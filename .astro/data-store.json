[["Map",1,2,9,10,305,306],"meta::meta",["Map",3,4,5,6,7,8],"astro-version","5.4.2","content-config-digest","cc3df833ca183983","astro-config-digest","{\"root\":{},\"srcDir\":{},\"publicDir\":{},\"outDir\":{},\"cacheDir\":{},\"site\":\"https://vgarmes.github.io\",\"compressHTML\":true,\"base\":\"/\",\"trailingSlash\":\"ignore\",\"output\":\"static\",\"scopedStyleStrategy\":\"attribute\",\"build\":{\"format\":\"directory\",\"client\":{},\"server\":{},\"assets\":\"_astro\",\"serverEntry\":\"entry.mjs\",\"redirects\":true,\"inlineStylesheets\":\"auto\",\"concurrency\":1},\"server\":{\"open\":false,\"host\":false,\"port\":4321,\"streaming\":true,\"allowedHosts\":[]},\"redirects\":{},\"image\":{\"endpoint\":{\"route\":\"/_image\"},\"service\":{\"entrypoint\":\"astro/assets/services/sharp\",\"config\":{}},\"domains\":[],\"remotePatterns\":[]},\"devToolbar\":{\"enabled\":true},\"markdown\":{\"syntaxHighlight\":\"shiki\",\"shikiConfig\":{\"langs\":[],\"langAlias\":{},\"theme\":\"github-dark\",\"themes\":{\"light\":\"catppuccin-latte\",\"dark\":\"tokyo-night\"},\"wrap\":false,\"transformers\":[]},\"remarkPlugins\":[null],\"rehypePlugins\":[],\"remarkRehype\":{},\"gfm\":true,\"smartypants\":true},\"security\":{\"checkOrigin\":true},\"env\":{\"schema\":{},\"validateSecrets\":false},\"experimental\":{\"clientPrerender\":false,\"contentIntellisense\":false,\"responsiveImages\":false,\"serializeConfig\":false},\"legacy\":{\"collections\":false}}","blog",["Map",11,12,29,30,57,58,73,74,89,90,129,130,194,195,255,256],"adding-likes-to-static-site",{"id":11,"data":13,"body":25,"filePath":26,"digest":27,"deferredRender":28},{"title":14,"pubDate":15,"description":16,"tags":17,"image":21,"draft":24},"Adding likes to a static blog site using Cloudflare Workers and D1",["Date","2023-11-14T00:00:00.000Z"],"In this in-depth walkthrough I explain the process I followed to add a \"likes\" feature to my blog posts using modern Edge technologies like Cloudflare Workers and D1 coupled with the power Hono and Drizzle.",[18,19,20],"cloudflare","hono","drizzle",{"url":22,"alt":23},"https://res.cloudinary.com/dx73a1lse/image/upload/v1699994715/blog/adding-likes-thumbnail_gvj01i.webp","Adding likes to a static blog site",false,"import LikeButtonDemo from '../../components/LikeButton/LikeButtonDemo.tsx'\n\nI've recently added a nice little \"like\" button to the blog posts, and it got me thinking - it's the perfect case study for an isolated full-stack component. So, why not write a new blog post about how I made it happen?\n\nFirst off, I knew I'd have to set up an API endpoint and handle data persistence in a database. In these kind of situations, where I need to quickly implement some modest backend functionality in a static site, my go-to technology is Cloudflare.\n\nCloudflare offers this nifty feature called Workers, allowing you to easily deploy serverless API endpoints across their Edge network spanning 300 global locations.\n\nPlus, they've recently rolled out D1, a brand-new SQLite-based database solution. At the time of writing, D1 was still in open alpha, and despite a few limitations, I decided it was worth giving it a try for this blog site.\n\nTo fully leverage Cloudflare's Workers Edge runtime, I integrated the backend framework Hono and used Drizzle as the database ORM.\n\nFinally, I implemented the button component in Preact (a lightweight alternative to React with the same API) and used some client-side optimization strategies like request batching and optimistic updates.\n\nCurious for more? Keep reading; this approach can be extended to accomodate various backend functionalities which you might find useful for your own projects.\n\n## Getting ready\n\nTo begin, you'll need to create a Cloudflare account if you haven't already. This account will grant you access to your dashboard, where you can set up and monitor your Workers and the D1 database.\n\nNext, get the Workers command-line interface, Wrangler. Wrangler facilitates the creation, testing, and deployment of Workers projects. You can install it in your global packages with `npm -g wrangler` or use it directly with `npx` commands.\n\nRunning the command `wrangler dev` will start a local server at `http://localhost:8787` for developing our Worker. Be aware that attempting to access this route will result in a 404 error until we build our API.\n\nAdditionally, create a `wrangler.toml` file at the root of your project. This file will serve as the configuration for our Worker. To kick off the configuration, add the following to the file:\n\n```toml\nname = \u003CWORKER_NAME> # i.e. \"my-worker\"\nmain = \u003CWORKER_ENTRY_POINT> # i.e \"src/api/index.ts\"\ncompatibility_date = \"2023-08-07\"\nnode_compat = true\n```\n\n### Setting up the database\n\nCreating our D1 database with Cloudflare is straightforward. Simply execute the following command:\n\n```shell\nwrangler d1 create \u003CDATABASE_NAME>\n```\n\nThis command will generate a new D1 database and provide the binding configuration, which will be necessary for the next step. You should see something like this on your command prompt as a result of executing the previous command:\n\n```shell\n[[d1_databases]]\nbinding = \"DB\"\ndatabase_name = \"\u003CDATABASE_NAME>\"\ndatabase_id = \"\u003Cunique-ID-for-your-database>\"\n```\n\n### Connecting your Worker with the D1 database\n\nTo establish a connection between your Worker and the D1 database, you'll need to create a binding. Bindings enable your Workers to access resources, such as D1, on the Cloudflare developer platform.\n\nYou can create bindings by updating the `wrangler.toml` file we created earlier. To bind your D1 database to your Worker, add the following at the end of the file:\n\n```toml\n[[d1_databases]]\nbinding = \"DB\" # i.e. available in your Worker on env.DB\ndatabase_name = \"\u003CDATABASE_NAME>\"\ndatabase_id = \"\u003Cunique-ID-for-your-database>\"\n```\n\nThe string you set for `\u003CBINDING_NAME>` will be used to reference this database in your Worker. It will be accessible in your Worker's environent as `env.\u003CBINDING_NAME>`, as we'll explore later on. Feel free to choose any valid JavaScript variable name. In this case, I've simply used `DB`.\n\n### Installing additional dependencies\n\nInstall Hono and Drizzle by running:\n\n```shell\nnpm install hono drizzle\n```\n\nIf you use Typescript, you'll also need to install the types for Workers:\n\n```shell\nnpm install -D @cloudflare/workers-types\n```\n\nOptionally, add the installed types to the `compilerOptions` in your `tsconfig.json` file. By doing this, you can directly access the Cloudflare Workers-specific types and interfaces within your TypeScript code without requiring explicit import statements:\n\n```json\n{\n\t\"compilerOptions\": {\n\t\t\"types\": [\"@cloudflare/workers-types\"]\n\t}\n}\n```\n\n## Building the database schema\n\nWith our D1 database set up, it's time to create the schema using Drizzle. One of the standout features of Drizzle is its ability to define and manage the database schema directly in TypeScript.\n\nLet's start by creating the `Posts` table, where we'll store each post's slug along with the total number of likes:\n\n```ts\nexport const posts = sqliteTable(\n\t'posts',\n\t{\n\t\tid: integer('id').primaryKey({ autoIncrement: true }),\n\t\tslug: text('slug').notNull(),\n\t\ttotalLikes: integer('total_likes').default(0)\n\t},\n\ttable => ({\n\t\tslugIdx: uniqueIndex('slugIdx').on(table.slug)\n\t})\n)\n```\n\nThe posts will be queried by their slug in most use cases, thus the index.\n\nNow, let's proceed to create the table responsible for tracking user likes:\n\n```ts\nexport const userLikes = sqliteTable(\n\t'user_likes',\n\t{\n\t\tuserId: text('user_id'),\n\t\tpostId: integer('post_id').references(() => posts.id),\n\t\tlikes: integer('likes').default(0)\n\t},\n\ttable => {\n\t\treturn {\n\t\t\tpk: primaryKey(table.userId, table.postId)\n\t\t}\n\t}\n)\n```\n\nAt the time of writing this article, there was [a bug with D1](https://github.com/cloudflare/workers-sdk/issues/3160) when trying to left join two tables that have the same column names, for which the second column is not returned. Hence why I used different naming for the likes and views in each of the tables.\n\nWhenever you apply changes to the schema, you'll need to run the following command to generate a SQL migration (for my own convenience, I've added this as a script in `package.json`.):\n\n```shell\ndrizzle-kit generate:sqlite\n```\n\nThis script will generate a migration file with a name resembling `0000_short_lockheed`.\n\nTo initialize the local database and run the server locally, use the following commands, replacing `FILE_NAME` with the name of the generated migration file:\n\n```shell\nwrangler d1 execute \u003CDATABASE_NAME> --local --file=./drizzle/\u003CFILE_NAME>.sql\nwrangler dev --local --persist\n```\n\nNote: Alternatively, if you are just prototyping, Drizzle allows you to use the `db push` command, which applies the schema changes to your development database without generating a migration file.\n\n## Crafting Web APIs with Hono\n\nHono is a backend framework, much like Express but for the Edges. Hono is fully compatible with Cloudlare Workers runtime and with just a few lines of code, we can have a fully functional Worker set up, as demonstrated below:\n\n```ts\nconst app = new Hono()\n\napp.get('hello-world', c => c.text('hello world!'))\n```\n\nThis will create a `GET` endpoint accessible locally at `http://localhost:8787/hello-world`.\n\nThis will serve as the foundation for the subsequent steps, where we will expand upon this to build the remaining backend functionalities.\n\n## Storing user likes\n\nOur primary objective is to define an endpoint for storing both post and user likes. This endpoint, which accepts POST requests, will be triggered by the \"like\" button.\n\nI've designated the route for this endpoint as `/api/posts/:slug/like`, making the post slug easily accessible via the request parameters within the request context: `c.req.param('slug')`.\n\nTo persist the data in the database, we'll utilize the database binding previously defined, which is also readily accessible within the request context.\n\nAdditionally, these bindings can accomodate environment variables, which can be set in development environment by creating a `.dev.vars` file, and in the deployed worker, by executing `wrangler secret put \u003CKEY>`. In my case, I included a salt value named `IP_ADDRESS_SALT`, which will be used later for hashing IP addresses.\n\nNow, we can initialize Hono with our customized bindings, ensuring proper typing:\n\n```ts\ntype Bindings = {\n\tDB: D1Database\n\tIP_ADDRESS_SALT: string\n}\n\nconst app = new Hono\u003C{ Bindings: Bindings }>()\n```\n\nThen, we can consume the request context and initiate a new database connection as shown below:\n\n```ts\napp.post('/api/posts/:slug/like', async c => {\n\tconst db = drizzle(c.env.DB)\n\t// rest will be added later ...\n}\n```\n\n### Identifying users on each request\n\nA crucial aspect of registering posts likes is establishing a reliable user identification method. With the goal of allowing users to like posts without mandatory authentication, I used a method to identify users based on their origin IP address within each request. To ensure user privacy and avoid retaining sensitive data, I also opted to hash this information.\n\nAccessing the request IP is straightforward by utilizing the Cloudflare Worker-provided header `cf-connecting-ip` within the request context. Subsequently, I used the SHA-256 encryption algorithm along with a salt (stored as the environment variable `IP_ADDRESS_SALT` mentioned earlier) to generate the user ID, as demonstrated below:\n\n```ts\nconst ipAddress = c.req.header('cf-connecting-ip') || '0.0.0.0'\nconst salt = c.env.IP_ADDRESS_SALT\nconst currentUserId = await hashIpAddress(ipAddress, salt)\n```\n\nFor brevity, I have omitted the detailed definition of the `hashIpAddress` function here, but you can find it in the [source code](https://github.com/vgarmes/vgarmes.github.io/blob/main/src/api/utils.ts) for reference.\n\n### Persisting to the database\n\nNow, we need to save the relevant information in the database. My approach for this was to first fetch the statistics about the corresponding post and user, performing a left join on both tables to validate, amongst other things, that the user hasn't reached the maximum number of likes:\n\n```ts\nconst post = await db\n\t.select({\n\t\tpostId: posts.id,\n\t\tuserLikes: userLikes.likes\n\t})\n\t.from(userLikes)\n\t.leftJoin(posts, eq(posts.id, userLikes.postId))\n\t.where(and(eq(posts.slug, slug), eq(userLikes.userId, currentUserId)))\n\t.get()\n```\n\nRight after, we perform two upsert statements in order to update both the `Posts` and `UserLikes` tables. At the time of writing, there wasn't a way to perform [transactions on D1 using Drizzle](https://github.com/drizzle-team/drizzle-orm/issues/758). Thus, I opted to perform two sequential upsert queries:\n\n```ts\nconst updatedPost = await db\n\t.insert(posts)\n\t.values({ slug, totalLikes: likesIncrement })\n\t.onConflictDoUpdate({\n\t\ttarget: posts.slug,\n\t\tset: { totalLikes: sql`total_likes + ${likesIncrement}` }\n\t})\n\t.returning()\n\t.get()\n\ndb.insert(userLikes)\n\t.values({\n\t\tuserId: currentUserId,\n\t\tpostId: updatedPost.id,\n\t\tlikes: likesIncrement\n\t})\n\t.onConflictDoUpdate({\n\t\ttarget: [userLikes.userId, userLikes.postId],\n\t\tset: { likes: sql`likes + ${likesIncrement}` }\n\t})\n```\n\nTo fetch the likes of a post, we take a similar approach by identifying the post and the user, and finally, we query the database to retrieve the corresponding data. You can see the whole implementation in the [source code](https://github.com/vgarmes/vgarmes.github.io/blob/main/src/api/index.ts).\n\n## Deploying the Worker and database\n\nWe are almost ready to deploy our Worker and D1 database globally. First, log in with your Cloudflare account by running:\n\n```shell\nwrangler login\n```\n\nAnd deploy the database by running:\n\n```shell\nwrangler d1 execute \u003CDATABASE_NAME> --file=./schema.sql\n```\n\nAnd finally the Worker:\n\n```shell\nwrangler deploy\n```\n\nNow you should have the worker deployed. You can preview it at `\u003CYOUR_WORKER>.\u003CYOUR_SUBDOMAIN>.workers.dev`.\n\n## The like button component\n\nFor the like button, I created a component in React with a design inspired by [Delba Oliveira's design](https://delba.dev/blog/a-like-button-that-likes-you-back), with a few changes and tweaks, including a playful confetti animation when the user reaches the maximum number of likes. You can play with the componnet here (it will reset the likes count after 3 seconds of reaching the maximum):\n\n\u003Cdiv className=\"w-full flex justify-center\">\n\t\u003CLikeButtonDemo client:visible />\n\u003C/div>\n\nWhen a user interacts with the like button on the post, a couple of things happen behind the scenes to make the experience smooth and efficient.\n\n### Initializing likes data\n\nInitially, when the component mounts, it fetches and stores both the total post likes and the user's likes in state variables. This provides the necessary data for the current state of likes:\n\n```tsx\nconst [likes, setLikes] = useState(0)\nconst [userLikes, setUserLikes] = useState(0)\nconst [status, setStatus] = useState\u003C'loading' | 'success' | 'error'>('loading')\n\nuseEffect(() => {\n\tconst fetchStats = async () => {\n\t\tconst response = await fetch(`${apiHost}/api/posts/${slug}/stats`)\n\t\tif (response.status !== 200) {\n\t\t\tsetStatus('error')\n\t\t\treturn\n\t\t}\n\t\tconst data = (await response.json()) as {\n\t\t\ttotalLikes: number\n\t\t\tuserLikes: number\n\t\t}\n\n\t\tsetLikes(data.totalLikes)\n\t\tsetUserLikes(data.userLikes)\n\t\tsetStatus('success')\n\t}\n\n\tfetchStats()\n}, [])\n```\n\n### Optimistic updates and request batching\n\nNow, when a user decides to like a post, there's what we call an \"optimistic update\". This means that, even before the server responds to the actual like being registered, the user interface is immediately updated. This instantaneous feedback makes the button click feel more responsive and improves the overall user experience.\n\nSince I allow the user to like a post multiple times, the component doesn't send a request to the server for each individual like. Instead, it batches these requests through a timeout:\n\n```tsx\nconst likesIncrement = useRef(0)\n\nuseEffect(() => {\n\tif (likesIncrement.current === 0) {\n\t\treturn\n\t}\n\n\tfunction likePost() {\n\t\tfetch(`${apiHost}/api/posts/${slug}/like`, {\n\t\t\tmethod: 'POST',\n\t\t\tbody: JSON.stringify({ count: likesIncrement.current })\n\t\t})\n\t\tlikesIncrement.current = 0\n\t}\n\n\tconst timeoutId = setTimeout(likePost, 1000)\n\n\treturn () => clearTimeout(timeoutId)\n}, [userLikes])\n```\n\nThe timer is reset with each click, and the number of clicks between timeouts is tracked through the reference value `likesIncrement`. When the timeout is triggered, the request is sent and the reference value is reset.\n\nFinally, on each button click we call the following function to update all the values and trigger the described actions:\n\n```tsx\nconst handleClick = () => {\n\tsetLikes(likes + 1)\n\tsetUserLikes(userLikes + 1)\n\tincrementLikes.current += 1\n}\n```\n\n## Conclusion\n\nThank you for reading this far! Crafting this like button feature has been a fun process and hopefully this walkthrough will spark some inspiration for your projects.\n\nFeel free to [reach me out on Twitter](https://twitter.com/vgmestre) if this has been useful to you or you have any suggestions for improving it.\n\nHappy coding!","src/content/blog/adding-likes-to-static-site.mdx","5ecff3928f0f6461",true,"developing-a-gameboy-game-part-1",{"id":29,"data":31,"body":42,"filePath":43,"digest":44,"rendered":45},{"title":32,"pubDate":33,"description":34,"tags":35,"image":39,"draft":28},"Developing a GameBoy game in 2024 (part 1)",["Date","2024-02-01T00:00:00.000Z"],"Developing a game for the GameBoy",[36,37,38],"game development","gameboy","assembly",{"url":40,"alt":41},"https://res.cloudinary.com/dx73a1lse/image/upload/v1691097664/blog/build-your-own-react-routerwebp_wzdy1w.webp","Thumbnail with the blog post title","Install the Command Line Tools for Xcode\n\n```shell\nxcode-select --install\n```\nInstall RGBDS (https://rgbds.gbdev.io/install/)\n\n```shell\nbrew install rgbds\n```","src/content/blog/developing-a-gameboy-game-part-1.md","ffdf2d859d492229",{"html":46,"metadata":47},"\u003Cp>Install the Command Line Tools for Xcode\u003C/p>\n\u003Cpre class=\"astro-code astro-code-themes catppuccin-latte tokyo-night\" style=\"background-color:#eff1f5;--shiki-dark-bg:#1a1b26;color:#4c4f69;--shiki-dark:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"shell\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#1E66F5;font-style:italic;--shiki-dark:#C0CAF5;--shiki-dark-font-style:inherit\">xcode-select\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#E0AF68\"> --install\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Install RGBDS (\u003Ca href=\"https://rgbds.gbdev.io/install/\">https://rgbds.gbdev.io/install/\u003C/a>)\u003C/p>\n\u003Cpre class=\"astro-code astro-code-themes catppuccin-latte tokyo-night\" style=\"background-color:#eff1f5;--shiki-dark-bg:#1a1b26;color:#4c4f69;--shiki-dark:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"shell\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#1E66F5;font-style:italic;--shiki-dark:#C0CAF5;--shiki-dark-font-style:inherit\">brew\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#9ECE6A\"> install\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#9ECE6A\"> rgbds\u003C/span>\u003C/span>\u003C/code>\u003C/pre>",{"headings":48,"localImagePaths":49,"remoteImagePaths":50,"frontmatter":51,"imagePaths":56},[],[],[],{"title":32,"pubDate":52,"description":34,"image":53,"tags":54,"draft":28,"minutesRead":55},["Date","2024-02-01T00:00:00.000Z"],{"url":40,"alt":41},[36,37,38],0.06,[],"recreating-vercel-relative-time-card",{"id":57,"data":59,"body":70,"filePath":71,"digest":72,"deferredRender":28},{"title":60,"pubDate":61,"description":62,"tags":63,"image":67,"draft":24},"Recreating Vercel's Relative Time Card component",["Date","2025-03-10T00:00:00.000Z"],"In this article, we walk through how to build a Relative Time Card component similar to Vercel’s, using native JavaScript APIs to format date differences and handle time zones.",[64,65,66],"react","vercel","datetime",{"url":68,"alt":69},"","Recreating Vercel relative time card","import RelativeTimeCardDemo from '../../components/demos/RelativeTimeCardDemo'\n\nHandling dates and time zones is a common UI/UX challenge in web applications. Depending on the use case, we might display times in UTC or the user’s local time zone, but it’s often unclear which one they’re looking at.\n\nTo address this, Vercel offers a clever solution in their dashboard. When hovering over a relative timestamp, users see the exact date and time in both UTC and their local time zone—providing clarity without cluttering the interface.\n\n![alt text](https://pbs.twimg.com/media/GdrLhI5WoAAGekN?format=png&name=medium)\n\nThis component is part of [Vercel’s design system](https://vercel.com/geist/relative-time-card), which, unfortunately, isn’t open source. However, by inspecting the compiled JavaScript, I was able to reverse-engineer its implementation. The solution is quite elegant, relying solely on the `Intl.DateTimeFormat` API along with some custom formatter methods.\n\nIn this post, I’ll walk you through the process step by step so you can build it yourself.\n\n## Creating the component shell\n\nFirst, let’s set up the basic structure of the component using dummy date values. For styling, I’m using Tailwind CSS, but you can easily adapt it to any styling solution you prefer.\n\n```tsx\nconst RelativeTimeCard: React.FC = () => {\n\treturn (\n\t\t\u003Cdiv className=\"bg-background border-border w-[325px] rounded-md border p-3 shadow-md\">\n\t\t\t\u003Cdiv className=\"flex flex-col gap-3\">\n\t\t\t\t\u003Cspan className=\"text-muted-foreground text-xs tabular-nums\">\n\t\t\t\t\t3 hours, 24 minutes, 35 seconds\n\t\t\t\t\u003C/span>\n\t\t\t\t\u003Cdiv className=\"flex flex-col gap-2\">\n\t\t\t\t\t\u003Cdiv className=\"flex items-center justify-between gap-3\">\n\t\t\t\t\t\t\u003Cdiv className=\"flex items-center gap-1.5\">\n\t\t\t\t\t\t\t\u003Cdiv className=\"bg-muted flex h-4 items-center justify-center rounded-xs px-1.5\">\n\t\t\t\t\t\t\t\t\u003Cspan className=\"text-muted-foreground font-mono text-xs\">\n\t\t\t\t\t\t\t\t\tUTC\n\t\t\t\t\t\t\t\t\u003C/span>\n\t\t\t\t\t\t\t\u003C/div>\n\t\t\t\t\t\t\t\u003Cspan className=\"text-sm\">March 10, 2025\u003C/span>\n\t\t\t\t\t\t\u003C/div>\n\t\t\t\t\t\t\u003Cspan className=\"text-muted-foreground font-mono text-xs tabular-nums\">\n\t\t\t\t\t\t\t08:04:34 AM\n\t\t\t\t\t\t\u003C/span>\n\t\t\t\t\t\u003C/div>\n\t\t\t\t\t\u003Cdiv className=\"flex items-center justify-between gap-3\">\n\t\t\t\t\t\t\u003Cdiv className=\"flex items-center gap-1.5\">\n\t\t\t\t\t\t\t\u003Cdiv className=\"bg-muted flex h-4 items-center justify-center rounded-xs px-1.5\">\n\t\t\t\t\t\t\t\t\u003Cspan className=\"text-muted-foreground font-mono text-xs\">\n\t\t\t\t\t\t\t\t\tGMT+1\n\t\t\t\t\t\t\t\t\u003C/span>\n\t\t\t\t\t\t\t\u003C/div>\n\t\t\t\t\t\t\t\u003Cspan className=\"text-sm\">March 10, 2025\u003C/span>\n\t\t\t\t\t\t\u003C/div>\n\t\t\t\t\t\t\u003Cspan className=\"text-muted-foreground font-mono text-xs tabular-nums\">\n\t\t\t\t\t\t\t09:04:34 AM\n\t\t\t\t\t\t\u003C/span>\n\t\t\t\t\t\u003C/div>\n\t\t\t\t\u003C/div>\n\t\t\t\u003C/div>\n\t\t\u003C/div>\n\t)\n}\n```\n\nJust for reference, I’ve used the same values as shadcn/ui for the additional theme colors like `muted` and `muted-foreground`.\n\nThis is what it looks like:\n\n{\n\n\u003Cdiv className=\"flex justify-center\">\n\t\u003Cdiv className=\"bg-background border-border w-[325px] rounded-md border p-3 shadow-md\">\n\t\t\u003Cdiv className=\"flex flex-col gap-3\">\n\t\t\t\u003Cspan className=\"text-muted-foreground text-xs tabular-nums\">\n\t\t\t\t3 hours, 24 minutes, 35 seconds\n\t\t\t\u003C/span>\n\t\t\t\u003Cdiv className=\"flex flex-col gap-2\">\n\t\t\t\t\u003Cdiv className=\"flex items-center justify-between gap-3\">\n\t\t\t\t\t\u003Cdiv className=\"flex items-center gap-1.5\">\n\t\t\t\t\t\t\u003Cdiv className=\"bg-muted flex h-4 items-center justify-center rounded-xs px-1.5\">\n\t\t\t\t\t\t\t\u003Cspan className=\"text-muted-foreground font-mono text-xs\">\n\t\t\t\t\t\t\t\tUTC\n\t\t\t\t\t\t\t\u003C/span>\n\t\t\t\t\t\t\u003C/div>\n\t\t\t\t\t\t\u003Cspan className=\"text-sm\">March 10, 2025\u003C/span>\n\t\t\t\t\t\u003C/div>\n\t\t\t\t\t\u003Cspan className=\"text-muted-foreground font-mono text-xs tabular-nums\">\n\t\t\t\t\t\t08:04:34 AM\n\t\t\t\t\t\u003C/span>\n\t\t\t\t\u003C/div>\n\t\t\t\t\u003Cdiv className=\"flex items-center justify-between gap-3\">\n\t\t\t\t\t\u003Cdiv className=\"flex items-center gap-1.5\">\n\t\t\t\t\t\t\u003Cdiv className=\"bg-muted flex h-4 items-center justify-center rounded-xs px-1.5\">\n\t\t\t\t\t\t\t\u003Cspan className=\"text-muted-foreground font-mono text-xs\">\n\t\t\t\t\t\t\t\tGMT+1\n\t\t\t\t\t\t\t\u003C/span>\n\t\t\t\t\t\t\u003C/div>\n\t\t\t\t\t\t\u003Cspan className=\"text-sm\">March 10, 2025\u003C/span>\n\t\t\t\t\t\u003C/div>\n\t\t\t\t\t\u003Cspan className=\"text-muted-foreground font-mono text-xs tabular-nums\">\n\t\t\t\t\t\t09:04:34 AM\n\t\t\t\t\t\u003C/span>\n\t\t\t\t\u003C/div>\n\t\t\t\u003C/div>\n\t\t\u003C/div>\n\t\u003C/div>\n\u003C/div>\n}\n\nNow, let’s replace those hardcoded values with actual date calculations.\n\n## The time distance formatter\n\nThe first thing we need to calculate is the time difference between the given date and today. Vercel’s approach displays the three most significant time units, ranging from years down to seconds.\n\nFor example, if the date is over a year old, it will show something like \"X years, Y months, Z days\" For more recent dates, it might display \"X hours, Y minutes, Z seconds\" And if the date is exactly now, a brief \"Just now\" message appears.\n\nTo achieve this, we first need to define an array of time units along with their values in milliseconds:\n\n```js\nconst timeUnits = [\n\t{\n\t\tunit: 'year',\n\t\tms: 31536e6\n\t},\n\t{\n\t\tunit: 'month',\n\t\tms: 2628e6\n\t},\n\t{\n\t\tunit: 'day',\n\t\tms: 864e5\n\t},\n\t{\n\t\tunit: 'hour',\n\t\tms: 36e5\n\t},\n\t{\n\t\tunit: 'minute',\n\t\tms: 6e4\n\t},\n\t{\n\t\tunit: 'second',\n\t\tms: 1e3\n\t}\n]\n```\n\nWith this predefined array of time units, we can now build our formatter function:\n\n```ts\nfunction formatDistanceToNow(date: Date): string {\n\t// Calculate the absolute difference between the current time and the provided date\n\tlet timeDifference = Math.abs(new Date().getTime() - date.getTime())\n\n\t// Initialize an empty array to store the time units\n\tconst timeParts = []\n\n\t// Iterate over the predefined array of time units and their corresponding milliseconds\n\tfor (const { unit: unitName, ms: unitMilliseconds } of timeUnits) {\n\t\t// Calculate how many of the current unit fit into the remaining time difference\n\t\tconst unitCount = Math.floor(timeDifference / unitMilliseconds)\n\n\t\t// If the unit count is greater than 0 or if we already have some parts in the array\n\t\tif (unitCount > 0 || timeParts.length > 0) {\n\t\t\t// Add the unit count and unit name to the array, pluralizing if necessary\n\t\t\ttimeParts.push(`${unitCount} ${unitName}${unitCount !== 1 ? 's' : ''}`)\n\n\t\t\t// Update the remaining time difference by taking the remainder after division\n\t\t\ttimeDifference %= unitMilliseconds\n\t\t}\n\n\t\t// If we have collected 3 time parts, stop the loop\n\t\tif (timeParts.length === 3) {\n\t\t\tbreak\n\t\t}\n\t}\n\n\t// Join the time parts with commas and format the result\n\treturn timeParts.length === 0 ? 'Just now' : `${timeParts.join(', ')} ago`\n}\n```\n\nThis works fine as is for a static result, but Vercel dynamically updates the value every second. To achieve the same behavior, we can run this function at a one-second interval and initialize it within a custom hook:\n\n```tsx\nconst useTimeDistance = (date: Date) => {\n\tconst [timeDistance, setTimeDistance] = useState(formatDistanceToNow(date))\n\n\tuseEffect(() => {\n\t\tconst updateTimeDistance = () => {\n\t\t\tconst formattedTime = formatDistanceToNow(date)\n\t\t\tsetTimeDistance(formattedTime)\n\t\t}\n\n\t\tconst intervalId = setInterval(updateTimeDistance, 1000)\n\n\t\treturn () => clearInterval(intervalId)\n\t}, [date])\n\n\treturn timeDistance\n}\n```\n\n## Formatting the Date in UTC and Local Timezone\n\nNext, we need to be able to format a given date so we can display the timezone, date, and time in both UTC and the local browser timezone.\n\nTo extract and format the timezone, we can use `Intl.DateTimeFormat` along with the `formatToParts` method:\n\n```ts\nconst formattedTz = (date: Date, zone: string) =>\n\tnew Intl.DateTimeFormat('en-US', {\n\t\ttimeZone: zone,\n\t\ttimeZoneName: 'short'\n\t})\n\t\t.formatToParts(date)\n\t\t.find(part => part.type === 'timeZoneName')?.value\n```\n\nWith this function:\n\n- Passing a `timeZone` value of `utc` returns `UTC`.\n- Passing a local browser timezone, such as `Europe/Copenhagen` (retrieved using `Intl.DateTimeFormat().resolvedOptions().timeZone`), formats it as `GMT+1`.\n\nWith the timezone out of the way, we now just need to format the date and time, which can be easily done as follows:\n\n```ts\nconst formattedDate = date.toLocaleString('en-US', {\n\ttimeZone: zone,\n\tyear: 'numeric',\n\tmonth: 'long',\n\tday: 'numeric'\n})\n\nconst formattedTime = date.toLocaleTimeString('en-US', {\n\ttimeZone: zone,\n\thour: '2-digit',\n\tminute: '2-digit',\n\tsecond: '2-digit'\n})\n```\n\n## Factor out the Date, Time and TimeZone component\n\nWith the previous formatters in place, we can now create a component that, given a date and a time zone, returns the formatted result in the corresponding layout:\n\n```tsx\nconst DateTimeZone: React.FC\u003C{ date: Date; zone: string }> = ({\n\tdate,\n\tzone\n}) => {\n\tconst formattedTz = new Intl.DateTimeFormat('en-US', {\n\t\ttimeZone: zone,\n\t\ttimeZoneName: 'short'\n\t})\n\t\t.formatToParts(date)\n\t\t.find(part => part.type === 'timeZoneName')?.value\n\treturn (\n\t\t\u003Cdiv className=\"flex items-center justify-between gap-3\">\n\t\t\t\u003Cdiv className=\"flex items-center gap-1.5\">\n\t\t\t\t\u003Cdiv className=\"bg-muted flex h-4 items-center justify-center rounded-xs px-1.5\">\n\t\t\t\t\t\u003Cspan className=\"text-muted-foreground font-mono text-xs\">\n\t\t\t\t\t\t{formattedTz}\n\t\t\t\t\t\u003C/span>\n\t\t\t\t\u003C/div>\n\t\t\t\t\u003Cspan className=\"text-sm\">\n\t\t\t\t\t{date.toLocaleString('en-US', {\n\t\t\t\t\t\ttimeZone: zone,\n\t\t\t\t\t\tyear: 'numeric',\n\t\t\t\t\t\tmonth: 'long',\n\t\t\t\t\t\tday: 'numeric'\n\t\t\t\t\t})}\n\t\t\t\t\u003C/span>\n\t\t\t\u003C/div>\n\t\t\t\u003Cspan className=\"text-muted-foreground font-mono text-xs tabular-nums\">\n\t\t\t\t{date.toLocaleTimeString('en-US', {\n\t\t\t\t\ttimeZone: zone,\n\t\t\t\t\thour: '2-digit',\n\t\t\t\t\tminute: '2-digit',\n\t\t\t\t\tsecond: '2-digit'\n\t\t\t\t})}\n\t\t\t\u003C/span>\n\t\t\u003C/div>\n\t)\n}\n```\n\n## Pulling it all together\n\nNow, all that’s left is to integrate the previous component with the rest of the layout and logic to build our `RelativeTimeCard` component:\n\n```tsx\nconst RelativeTimeCard: FunctionalComponent\u003CProps> = ({ date }) => {\n\tconst timeDistance = useTimeDistance(date)\n\treturn (\n\t\t\u003Cdiv className=\"bg-background border-border w-[325px] rounded-md border p-3 shadow-md\">\n\t\t\t\u003Cdiv className=\"flex flex-col gap-3\">\n\t\t\t\t\u003Cdiv className=\"flex flex-col gap-3\">\n\t\t\t\t\t\u003Cspan className=\"text-muted-foreground text-xs tabular-nums\">\n\t\t\t\t\t\t{timeDistance}\n\t\t\t\t\t\u003C/span>\n\t\t\t\t\u003C/div>\n\t\t\t\t\u003Cdiv className=\"flex flex-col gap-2\">\n\t\t\t\t\t\u003CDateTimeZone date={date} zone=\"utc\" />\n\t\t\t\t\t\u003CDateTimeZone\n\t\t\t\t\t\tdate={date}\n\t\t\t\t\t\tzone={Intl.DateTimeFormat().resolvedOptions().timeZone}\n\t\t\t\t\t/>\n\t\t\t\t\u003C/div>\n\t\t\t\u003C/div>\n\t\t\u003C/div>\n\t)\n}\n```\n\nAnd here's the result ✨:\n\n\u003CRelativeTimeCardDemo client:load />\n\nTo render this on hover, we can just leverage [Radix's Tooltip](https://www.radix-ui.com/primitives/docs/components/tooltip).\n\nThanks for reading!","src/content/blog/recreating-vercel-relative-time-card.mdx","65e457f0946aa65a","the-state-of-js-bundlers-2024",{"id":73,"data":75,"body":86,"filePath":87,"digest":88,"deferredRender":28},{"title":76,"pubDate":77,"description":78,"tags":79,"image":83,"draft":28},"The state of JavaScript bundlers in 2024",["Date","2023-07-19T00:00:00.000Z"],"In this step-by-step guide I explain the process I followed to customize the command prompt for a joyful and efficient development experience using Windows Terminal and Powershell",[80,81,82],"shell","powershell","oh my posh",{"url":84,"alt":85},"https://res.cloudinary.com/dx73a1lse/image/upload/v1689889088/blog/overview_ugl3u2.webp","Custom command prompt with Powershell","For many years, the combination of Webpack and Babel as bundler and transpiler respectively has been the most commonly used in the JavaScript ecosystem. However, during the last couple of years we have witnessed an increasingly amount of competitors that claim a much higher performance and efficieny. There has been so many new solutions that is currently hard to keep track of what is going on, this is why I decided to put together this blog post.\n\nBut... what is a bundler?\nA bundler is the main tool to produce a production build of our application. In a typical JavaScript application, the code is distributed in many separate files (or modules). If a browser had to use these files, it would produce a cascade effect where first it would get the entry point file and, from there, it would request subsequently all the modules imported in each of them. This would be very inefficient and slow, so this is why we have bundlers.\n\nThe bundler is responsible to group into a single file all the used modules so the browser only needs to download one file. However, this has the disadvantage that, as our codebase increases in size, the bundler will do the same accordingly. This is where code splitting, dynamic importing, and other strategies come into play to reduce the bundle size.\n\n...and a transpiler?\nBesides bundling the code at build time, the bundler also transpiles the code as it builds. The transpiler takes the JavaScript code and compiles it down to an older version in order to maximize the compatibility across browsers.\n\nBundlers:\n\n- Webpack\n- Turbopack\n- Parcel (uses SWC for transpilation)\n- Rollup\n- Rolldown\n- ESBuild\n- Bun\n- SWC\n\nFrameworks\n\n- Next.js: uses Webpack though it's starting to move on to Turbopack\n- Vite: uses Rollup for bundling, esbuild for transpiling\n  In Vite's development server mode, it uses ESBuild for rapid development and hot module replacement (HMR). However, during the production build process, it switches to Rollup for creating optimized production bundles.","src/content/blog/the-state-of-js-bundlers-2024.mdx","a1d363b453c8bc04","upload-images-with-rails-and-cloudinary",{"id":89,"data":91,"body":101,"filePath":102,"digest":103,"rendered":104},{"title":92,"pubDate":93,"description":94,"tags":95,"image":98,"draft":24},"Upload images with your Rails app using Active Storage and Cloudinary",["Date","2020-12-08T00:00:00.000Z"],"Setting up Active Storage in your Rails app for being able to upload images to cloud storage service can be a bit challenging the first time.",[96,97],"ruby","rails",{"url":99,"alt":100},"https://astro.build/assets/blog/astro-1-release-update/cover.jpeg","The Astro logo with the word One.","***Archived post. Originally posted on [my blog in Medium](https://medium.com/@vgmestre/upload-images-with-your-rails-app-using-active-storage-and-cloudinary-ecf31c5ba999)***\n\nOne of the first issues I encountered when deploying to production a Rails app that used Active Storage, is that I could no longer use its default local storage configuration as I did in the development environment. For example, if you are using a host like Heroku to deploy your app with Active Storage’s default setup, the images you upload will be stored only temporarily in Heroku’s filesystem.\n\nLuckily, Active Storage supports uploading files to a cloud storage service like Amazon S3, Google Cloud Storage, Microsoft Azure Storage or, in my case, Cloudinary. Services like Amazon S3 are widely used, but they have the inconvenience that, even with access to a free quota, you have to provide credit card details and are exposed to unexpected charges if you exceed the quota accidentally. Considering I was setting this up for some hobby projects, I didn't like the idea of facing a huge bill for accidentally overusing my cloud storage, [like that story of a guy who got a bill of $2700](https://chrisshort.net/the-aws-bill-heard-around-the-world/).\n\nThat's when I discovered [Cloudinary](https://cloudinary.com/invites/lpov9zyyucivvxsnalc5/vn6ewqntof8rnbjaoypb?t=default). Cloudinary is a cloud storage service that offers a free plan, requiring no credit card, and allows storage of up to 25GB of data or 25GB of viewing bandwidth. Moreover, it has a Gem that simplifies integration with any Rails app. This covered all my needs, so I went ahead.\n\n## Install Cloudinary's gem\n\nTo set up Cloudinary in your Rails app, first [create a free account on their website](https://cloudinary.com/invites/lpov9zyyucivvxsnalc5/vn6ewqntof8rnbjaoypb?t=default). Then, as with any other Rails gem, add it to your Gemfile:\n\n```ruby\ngem 'cloudinary'\n```\n\nand run:\n```ruby\nbundle install\n```\n\n## Set up your Cloudinary credentials\nThe next step is to add your Cloudinary credentials. You can find these in the `cloudinary.yml` file, which you can download from your Cloudinary dashboard. As with any other credentials, it is good practice to store them in a configuration file outside of Git while adding them to your environment variables.\n\nIn order to do this, if you are running the app locally, you can use a Gem called Figaro. Once installed, Figaro creates a `config/application.yml` file and adds it to your .gitignore. Therefore, in your `config/application.yml`, add your credentials as in the example below:\n\n```ruby\ndevelopment:\n cloud_name: mycloud\n api_key: '123456789'\n api_secret: qwerty123uiop456\n enhance_image_tag: 'true'\n static_file_support: 'false'\nproduction:\n cloud_name: mycloud\n api_key: '123456789'\n api_secret: qwerty123uiop456\n enhance_image_tag: 'true'\n static_file_support: 'true'\ntest:\n cloud_name: mycloud\n api_key: '123456789'\n api_secret: qwerty123uiop456\n enhance_image_tag: 'true'\n static_file_support: 'false'\n```\n\nThen, Figaro will parse this YAML file and load all the values into ENV.\n\nHowever, when deploying the app to production, you will have to do this in a different way depending on the service you are using. For example, in Heroku you will have to [add the credentials to your config vars](https://devcenter.heroku.com/articles/config-vars). You can easily do this from your Heroku dashboard, just remember to write the variable names in upper case (API_KEY, API_SECRET, CLOUD_NAME, etc).\n\n## Configure Active Storage\nNext is to set up Active Storage to work with Cloudinary. First you will have to declare the service in the config/storage.yml file:\n\n```ruby\ncloudinary:\n service: Cloudinary\n ```\n\n Then configure Active Storage in the `config/environments/production.rb` file commenting out the default local setup:\n\n ```ruby\n config.active_storage.service = :cloudinary\n#config.active_storage.service = :local\n```\n\nThis will change your production environment setup. If you are going to use Cloudinary in your development and test environments as well, just do the same in the corresponding development.rb and test.rb files.\n\nIn order to upload images to a cloud storage service, Active Storage will have to upload directly from the client to the cloud. This functionality is called Direct Uploads and it has to be included in your application’s JavaScript bundle.\n\nIf you are using an old version of Rails (5 or below) you will have to do this using the asset pipeline by adding the following line in app/assets/javascripts/application.js :\n\n```ruby\n//= require activestorage\n```\n\nHowever, this is not relevant to new Rails 6 applications where Webpack is used. Instead you will have to use the npm package including the following line in app/javascript/packs/application.js :\n\n```ruby\nrequire(\"@rails/activestorage\").start()\n```\n\n## Uploading and displaying images\n\nNow you are able to upload images using Rails forms like in the example below:\n\n```ruby\n\u003C%= form_for @book do |f| %>\n\u003C%= f.file_field :cover, class: 'form-control', direct_upload: true %>\n\u003C%= f.button :submit, class:\"button is-dark\" %>\n\u003C% end %>\n```\n\nWhen displaying images from the cloud, you can still use the image_tag method as usual:\n\n```ruby\n\u003C%= image_tag @book.cover, alt: \"#{@book.title}\" %>\n```","src/content/blog/upload-images-with-rails-and-cloudinary.md","fec84488aca1c5ef",{"html":105,"metadata":106},"\u003Cp>\u003Cem>\u003Cstrong>Archived post. Originally posted on \u003Ca href=\"https://medium.com/@vgmestre/upload-images-with-your-rails-app-using-active-storage-and-cloudinary-ecf31c5ba999\">my blog in Medium\u003C/a>\u003C/strong>\u003C/em>\u003C/p>\n\u003Cp>One of the first issues I encountered when deploying to production a Rails app that used Active Storage, is that I could no longer use its default local storage configuration as I did in the development environment. For example, if you are using a host like Heroku to deploy your app with Active Storage’s default setup, the images you upload will be stored only temporarily in Heroku’s filesystem.\u003C/p>\n\u003Cp>Luckily, Active Storage supports uploading files to a cloud storage service like Amazon S3, Google Cloud Storage, Microsoft Azure Storage or, in my case, Cloudinary. Services like Amazon S3 are widely used, but they have the inconvenience that, even with access to a free quota, you have to provide credit card details and are exposed to unexpected charges if you exceed the quota accidentally. Considering I was setting this up for some hobby projects, I didn’t like the idea of facing a huge bill for accidentally overusing my cloud storage, \u003Ca href=\"https://chrisshort.net/the-aws-bill-heard-around-the-world/\">like that story of a guy who got a bill of $2700\u003C/a>.\u003C/p>\n\u003Cp>That’s when I discovered \u003Ca href=\"https://cloudinary.com/invites/lpov9zyyucivvxsnalc5/vn6ewqntof8rnbjaoypb?t=default\">Cloudinary\u003C/a>. Cloudinary is a cloud storage service that offers a free plan, requiring no credit card, and allows storage of up to 25GB of data or 25GB of viewing bandwidth. Moreover, it has a Gem that simplifies integration with any Rails app. This covered all my needs, so I went ahead.\u003C/p>\n\u003Ch2 id=\"install-cloudinarys-gem\">Install Cloudinary’s gem\u003C/h2>\n\u003Cp>To set up Cloudinary in your Rails app, first \u003Ca href=\"https://cloudinary.com/invites/lpov9zyyucivvxsnalc5/vn6ewqntof8rnbjaoypb?t=default\">create a free account on their website\u003C/a>. Then, as with any other Rails gem, add it to your Gemfile:\u003C/p>\n\u003Cpre class=\"astro-code astro-code-themes catppuccin-latte tokyo-night\" style=\"background-color:#eff1f5;--shiki-dark-bg:#1a1b26;color:#4c4f69;--shiki-dark:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"ruby\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#4C4F69;--shiki-dark:#A9B1D6\">gem \u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\">'\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#9ECE6A\">cloudinary\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\">'\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>and run:\u003C/p>\n\u003Cpre class=\"astro-code astro-code-themes catppuccin-latte tokyo-night\" style=\"background-color:#eff1f5;--shiki-dark-bg:#1a1b26;color:#4c4f69;--shiki-dark:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"ruby\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#4C4F69;--shiki-dark:#A9B1D6\">bundle install\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"set-up-your-cloudinary-credentials\">Set up your Cloudinary credentials\u003C/h2>\n\u003Cp>The next step is to add your Cloudinary credentials. You can find these in the \u003Ccode>cloudinary.yml\u003C/code> file, which you can download from your Cloudinary dashboard. As with any other credentials, it is good practice to store them in a configuration file outside of Git while adding them to your environment variables.\u003C/p>\n\u003Cp>In order to do this, if you are running the app locally, you can use a Gem called Figaro. Once installed, Figaro creates a \u003Ccode>config/application.yml\u003C/code> file and adds it to your .gitignore. Therefore, in your \u003Ccode>config/application.yml\u003C/code>, add your credentials as in the example below:\u003C/p>\n\u003Cpre class=\"astro-code astro-code-themes catppuccin-latte tokyo-night\" style=\"background-color:#eff1f5;--shiki-dark-bg:#1a1b26;color:#4c4f69;--shiki-dark:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"ruby\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#D20F39;--shiki-dark:#FF9E64\">development\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#FF9E64\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D20F39;--shiki-dark:#FF9E64\"> cloud_name\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#FF9E64\">:\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#A9B1D6\"> mycloud\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D20F39;--shiki-dark:#FF9E64\"> api_key\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#FF9E64\">:\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\"> '\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#9ECE6A\">123456789\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\">'\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D20F39;--shiki-dark:#FF9E64\"> api_secret\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#FF9E64\">:\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#A9B1D6\"> qwerty123uiop456\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D20F39;--shiki-dark:#FF9E64\"> enhance_image_tag\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#FF9E64\">:\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\"> '\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#9ECE6A\">true\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\">'\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D20F39;--shiki-dark:#FF9E64\"> static_file_support\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#FF9E64\">:\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\"> '\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#9ECE6A\">false\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\">'\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D20F39;--shiki-dark:#FF9E64\">production\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#FF9E64\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D20F39;--shiki-dark:#FF9E64\"> cloud_name\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#FF9E64\">:\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#A9B1D6\"> mycloud\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D20F39;--shiki-dark:#FF9E64\"> api_key\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#FF9E64\">:\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\"> '\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#9ECE6A\">123456789\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\">'\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D20F39;--shiki-dark:#FF9E64\"> api_secret\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#FF9E64\">:\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#A9B1D6\"> qwerty123uiop456\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D20F39;--shiki-dark:#FF9E64\"> enhance_image_tag\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#FF9E64\">:\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\"> '\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#9ECE6A\">true\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\">'\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D20F39;--shiki-dark:#FF9E64\"> static_file_support\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#FF9E64\">:\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\"> '\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#9ECE6A\">true\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\">'\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D20F39;--shiki-dark:#FF9E64\">test\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#FF9E64\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D20F39;--shiki-dark:#FF9E64\"> cloud_name\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#FF9E64\">:\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#A9B1D6\"> mycloud\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D20F39;--shiki-dark:#FF9E64\"> api_key\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#FF9E64\">:\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\"> '\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#9ECE6A\">123456789\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\">'\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D20F39;--shiki-dark:#FF9E64\"> api_secret\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#FF9E64\">:\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#A9B1D6\"> qwerty123uiop456\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D20F39;--shiki-dark:#FF9E64\"> enhance_image_tag\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#FF9E64\">:\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\"> '\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#9ECE6A\">true\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\">'\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D20F39;--shiki-dark:#FF9E64\"> static_file_support\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#FF9E64\">:\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\"> '\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#9ECE6A\">false\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\">'\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Then, Figaro will parse this YAML file and load all the values into ENV.\u003C/p>\n\u003Cp>However, when deploying the app to production, you will have to do this in a different way depending on the service you are using. For example, in Heroku you will have to \u003Ca href=\"https://devcenter.heroku.com/articles/config-vars\">add the credentials to your config vars\u003C/a>. You can easily do this from your Heroku dashboard, just remember to write the variable names in upper case (API_KEY, API_SECRET, CLOUD_NAME, etc).\u003C/p>\n\u003Ch2 id=\"configure-active-storage\">Configure Active Storage\u003C/h2>\n\u003Cp>Next is to set up Active Storage to work with Cloudinary. First you will have to declare the service in the config/storage.yml file:\u003C/p>\n\u003Cpre class=\"astro-code astro-code-themes catppuccin-latte tokyo-night\" style=\"background-color:#eff1f5;--shiki-dark-bg:#1a1b26;color:#4c4f69;--shiki-dark:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"ruby\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#D20F39;--shiki-dark:#FF9E64\">cloudinary\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#FF9E64\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D20F39;--shiki-dark:#FF9E64\"> service\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#FF9E64\">:\u003C/span>\u003Cspan style=\"color:#FE640B;--shiki-dark:#FF9E64\"> Cloudinary\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Then configure Active Storage in the \u003Ccode>config/environments/production.rb\u003C/code> file commenting out the default local setup:\u003C/p>\n\u003Cpre class=\"astro-code astro-code-themes catppuccin-latte tokyo-night\" style=\"background-color:#eff1f5;--shiki-dark-bg:#1a1b26;color:#4c4f69;--shiki-dark:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"ruby\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#4C4F69;--shiki-dark:#A9B1D6\">config\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">.\u003C/span>\u003Cspan style=\"color:#1E66F5;font-style:italic;--shiki-dark:#7AA2F7;--shiki-dark-font-style:inherit\">active_storage\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">.\u003C/span>\u003Cspan style=\"color:#1E66F5;font-style:italic;--shiki-dark:#7AA2F7;--shiki-dark-font-style:inherit\">service\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\"> =\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#FF9E64\"> :\u003C/span>\u003Cspan style=\"color:#D20F39;--shiki-dark:#FF9E64\">cloudinary\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9CA0B0;font-style:italic;--shiki-dark:#51597D;--shiki-dark-font-style:italic\">#config.active_storage.service = :local\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>This will change your production environment setup. If you are going to use Cloudinary in your development and test environments as well, just do the same in the corresponding development.rb and test.rb files.\u003C/p>\n\u003Cp>In order to upload images to a cloud storage service, Active Storage will have to upload directly from the client to the cloud. This functionality is called Direct Uploads and it has to be included in your application’s JavaScript bundle.\u003C/p>\n\u003Cp>If you are using an old version of Rails (5 or below) you will have to do this using the asset pipeline by adding the following line in app/assets/javascripts/application.js :\u003C/p>\n\u003Cpre class=\"astro-code astro-code-themes catppuccin-latte tokyo-night\" style=\"background-color:#eff1f5;--shiki-dark-bg:#1a1b26;color:#4c4f69;--shiki-dark:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"ruby\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\">//=\u003C/span>\u003Cspan style=\"color:#8839EF;--shiki-dark:#7AA2F7\"> require\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#A9B1D6\"> activestorage\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>However, this is not relevant to new Rails 6 applications where Webpack is used. Instead you will have to use the npm package including the following line in app/javascript/packs/application.js :\u003C/p>\n\u003Cpre class=\"astro-code astro-code-themes catppuccin-latte tokyo-night\" style=\"background-color:#eff1f5;--shiki-dark-bg:#1a1b26;color:#4c4f69;--shiki-dark:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"ruby\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#8839EF;--shiki-dark:#7AA2F7\">require\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\">(\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\">\"\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#9ECE6A\">@rails/activestorage\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\">\"\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\">)\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">.\u003C/span>\u003Cspan style=\"color:#1E66F5;font-style:italic;--shiki-dark:#7AA2F7;--shiki-dark-font-style:inherit\">start\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\">()\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"uploading-and-displaying-images\">Uploading and displaying images\u003C/h2>\n\u003Cp>Now you are able to upload images using Rails forms like in the example below:\u003C/p>\n\u003Cpre class=\"astro-code astro-code-themes catppuccin-latte tokyo-night\" style=\"background-color:#eff1f5;--shiki-dark-bg:#1a1b26;color:#4c4f69;--shiki-dark:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"ruby\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#179299;--shiki-dark:#BB9AF7\">&#x3C;\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\">%=\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#A9B1D6\"> form_for \u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\">@book\u003C/span>\u003Cspan style=\"color:#8839EF;--shiki-dark:#BB9AF7\"> do\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\"> |\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\">f\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">|\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\"> %>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#40A02B;--shiki-dark:#9ECE6A\">&#x3C;%= f.file_field :cover, class: 'form-control', direct_upload: true %\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#179299;--shiki-dark:#BB9AF7\">&#x3C;\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\">%=\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#A9B1D6\"> f\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">.\u003C/span>\u003Cspan style=\"color:#1E66F5;font-style:italic;--shiki-dark:#7AA2F7;--shiki-dark-font-style:inherit\">button\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#FF9E64\"> :\u003C/span>\u003Cspan style=\"color:#D20F39;--shiki-dark:#FF9E64\">submit\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">,\u003C/span>\u003Cspan style=\"color:#D20F39;--shiki-dark:#FF9E64\"> class\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#FF9E64\">:\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\">\"\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#9ECE6A\">button is-dark\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\">\"\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\"> %>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#40A02B;--shiki-dark:#9ECE6A\">&#x3C;% end %\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\">>\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>When displaying images from the cloud, you can still use the image_tag method as usual:\u003C/p>\n\u003Cpre class=\"astro-code astro-code-themes catppuccin-latte tokyo-night\" style=\"background-color:#eff1f5;--shiki-dark-bg:#1a1b26;color:#4c4f69;--shiki-dark:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"ruby\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#179299;--shiki-dark:#BB9AF7\">&#x3C;\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\">%=\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#A9B1D6\"> image_tag \u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\">@book\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">.\u003C/span>\u003Cspan style=\"color:#1E66F5;font-style:italic;--shiki-dark:#7AA2F7;--shiki-dark-font-style:inherit\">cover\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">,\u003C/span>\u003Cspan style=\"color:#D20F39;--shiki-dark:#FF9E64\"> alt\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#FF9E64\">:\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\"> \"\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#7DCFFF\">#{\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\">@book\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">.\u003C/span>\u003Cspan style=\"color:#1E66F5;font-style:italic;--shiki-dark:#7AA2F7;--shiki-dark-font-style:inherit\">title\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#7DCFFF\">}\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\">\"\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\"> %>\u003C/span>\u003C/span>\u003C/code>\u003C/pre>",{"headings":107,"localImagePaths":121,"remoteImagePaths":122,"frontmatter":123,"imagePaths":128},[108,112,115,118],{"depth":109,"slug":110,"text":111},2,"install-cloudinarys-gem","Install Cloudinary’s gem",{"depth":109,"slug":113,"text":114},"set-up-your-cloudinary-credentials","Set up your Cloudinary credentials",{"depth":109,"slug":116,"text":117},"configure-active-storage","Configure Active Storage",{"depth":109,"slug":119,"text":120},"uploading-and-displaying-images","Uploading and displaying images",[],[],{"title":92,"pubDate":124,"description":94,"image":125,"tags":126,"draft":24,"minutesRead":127},["Date","2020-12-08T00:00:00.000Z"],{"url":99,"alt":100},[96,97],3.495,[],"build-your-own-react-router",{"id":129,"data":131,"body":139,"filePath":140,"digest":141,"rendered":142},{"title":132,"pubDate":133,"description":134,"tags":135,"image":138,"draft":24},"Build your own React router: A dive into Single-Page Applications",["Date","2023-08-03T00:00:00.000Z"],"The core of Single-Page Applications consists of its client routing which allows navigating through the pages without hitting the server. Here I explain how I have built my own basic React router to better understand the inner workings of SPAs.",[64,136,137],"router","spa",{"url":40,"alt":41},"Single-Page Applications (SPAs) are really popular, especially for highly interactive applications. Frameworks like Next.js, SvelteKit, and Remix are all examples of SPA frameworks, even though some of them offer server-side rendering capabilities. \n\nThe key feature of SPAs is that they consist of a single JavaScript application, which generates the HTML of every page after the initial load without the need to hit the server again. This allows the application to maintain state and memory across pages seamlessly. \n\nAt the core of these applications, there lies a router running on the client-side. This router is what prevents the client from requesting new pages from the server and instead lets the JavaScript application generate the corresponding page.\n\nTo gain a better understanding of how routing in SPAs works, I decided to create my own router using React and TypeScript. I found great inspiration from [video by midudev](https://www.youtube.com/watch?v=K2NcGYajvY4) (in Spanish) where he builds something similar. Additionally, I referred to the source code of the popular library [React Router]() for guidance during the development process. \n\nYou can see the router in action [here](https://v-router.netlify.app/)! Throughout this tutorial, I have prioritized simplicity while implementing only the essential features. Despite its simplicity, the router fully supports dynamic routing and query parameters. Now, let's delve into how we can build it.\n\n## Getting started\n\nAs a foundation to test the router, I created an appication using [Vite](https://vitejs.dev/guide/#scaffolding-your-first-vite-project) with the React and Typescript + SWC template.\n\nIn line with most typical React-based SPAs, this template generates an almost empty `index.html` file containing a root `\u003Cdiv>` element. Additionally, a JavaScript file (in this case, written in TypeScript) is included, where React will inject the rendered HTML into this root element:\n\n```tsx\n// main.tsx\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport App from './App';\n\nReactDOM.createRoot(document.getElementById('root')!).render(\n  \u003CReact.StrictMode>\n    \u003CApp />\n  \u003C/React.StrictMode>\n);\n```\n\nThe file `App.tsx` is where we will have to use our router to control what page is going to be rendered depending on the client location, enabling client side routing.\n\nFollowing a similar approach to React Router, we'll implement a `Router` component that accepts the routes as props. Thus, we can begin by creating the routes object and making an initial attempt at conditionally rendering the corresponding route based on the current location:\n\n```tsx\n// App.tsx\nconst routes = [\n  {\n    path: '/',\n    element: (\n      \u003Cdiv>\n        \u003Ch1>Hello World!\u003C/h1>\n        \u003Ca href=\"/about\">About us\u003C/a>\n      \u003C/div>\n    ),\n  },\n  {\n    path: '/about',\n    element: (\n      \u003Cdiv>\n        \u003Ch1>About us\u003C/h1>\n        \u003Ca href=\"/\">Go back home\u003C/a>\n      \u003C/div>\n    ),\n  },\n]\n\nfunction 404Page() {\n  return (\n    \u003Cdiv>\n      \u003Ch1>404\u003C/h1>\n    \u003C/div>\n  )\n}\n\nfunction App() {\n  const currentPathname = window.location.pathname;\n  const page = routes.find((route) => route.path === currentPathname)?.element\n  return (\n    \u003Cmain>\n      {page ? page : 404Page}\n    \u003C/main>\n  )\n}\n```\n\nThe implemented routing logic will successfully find a matching route and render the corresponding page; otherwise, it will display a 404 page. \n\nHowever, when attempting to navigate between the routes `/` and `/about` using the links provided, you will notice that every time you navigate to page, a request is sent to the server to fetch the corresponding HTML file and the entire JavaScript application (you can see it on the Network tab of the browser developer tools). \n\nTo achieve true SPA behavior, we need to avoid this and intercept all navigation attempts.\n\n## Intercepting navigation\n\nTo intercept all navigation attempts and prevent the browser's default behavior, we need to take the following steps:\n\n1. Create a function that we can call in an anchor element (and elsewhere) to enable navigation **to** a different path.\n2. Intercept the event of navigating back using the browser's back button.\n\n### Creating a function to navigate to another path\n\nFirst and foremost, we require a function that we can call whenever we need to navigate to a different page. The approach to achieve this involves programmatically replacing the URL using a `window` method while simultaneously triggering an event that we can subscribe to and handle the re-rendering process accordingly:\n\n```ts\nconst EVENTS = {\n  PUSHSTATE: 'pushstate',\n}\n\nconst dispatchPushStateEvent = (href: string) => {\n  window.history.pushState({}, '', href);\n  const navigationEvent = new Event(EVENTS.PUSHSTATE);\n  window.dispatchEvent(navigationEvent);\n};\n```\n\nThe `window.history.pushState` method is used to add an entry to the browser's session history stack, enabling us to replace the URL without the need to refresh the page.\n\nAt the same time, since this method doesn't trigger any events we can subscribe to, we can dispatch a custom `pushstate` event and subscribe to it in a `useEffect` hook. For this purpose, we will need to make some refinements to the `App.tsx` file:\n\n```tsx\n// App.tsx\n\n/*\n{... same as before ...}\n*/\nconst getCurrentPath = () => window.location.pathname;\n\nfunction App() {\n  const [currentPathname, setCurrentPathname] = useState(getCurrentPath());\n\n  useEffect(() => {\n    const onLocationChange = () => setCurrentPathname(getCurrentPath());\n    window.addEventListener(EVENTS.PUSHSTATE, onLocationChange);\n    return () => {\n      window.removeEventListener(EVENTS.PUSHSTATE, onLocationChange)\n    };\n    }, [])\n\n  const page = routes.find((route) => route.path === currentPathname)?.element\n  return (\n    \u003Cmain>\n      {page ? page : 404Page}\n    \u003C/main>\n  )\n}\n\n```\n\n## Link component: Replacing anchor's default behavior\n\nNow we can use the `dispatchPushStateEvent` function in the anchor element. For this, we can create a custom `Link` component that will return a traditional anchor element but with the modified functionality:\n\n```tsx\n// Link.tsx\nimport { AnchorHTMLAttributes, MouseEvent } from 'react';\nimport { dispatchPushStateEvent } from './utils';\n\ninterface LinkProps extends AnchorHTMLAttributes\u003CHTMLAnchorElement> {\n  to: string;\n}\n\nfunction Link({ target, to, ...props }: LinkProps) {\n  const handleClick = (event: MouseEvent) => {\n    const isMainEvent = event.button === 0; // primary mouse button click\n    const isModifiedEvent =\n      event.metaKey || event.altKey || event.ctrlKey || event.shiftKey;\n    \n    // let browser handle target=\"_blank\" etc\n    const isManageableEvent = target === undefined || target === '_self'; \n    \n    if (isMainEvent && isManageableEvent && !isModifiedEvent) {\n      event.preventDefault();\n      dispatchPushStateEvent(to);\n    }\n  };\n\n  return \u003Ca onClick={handleClick} href={to} target={target} {...props} />;\n}\n\nexport default Link\n```\n\nWhat we are accomplishing here is that clicking on the anchor will trigger our custom `pushState` event, but only if the intent is not to open a new window or tab (hence the `isModifiedEvent` and `isMnageableEvent` checks).\n\nWith the new `Link` component in place, we can now proceed to refactor the elements returned by our routes:\n\n```tsx\nconst routes = [\n  {\n    path: '/',\n    element: (\n      \u003Cdiv>\n        \u003Ch1>Hello World!\u003C/h1>\n        \u003CLink to=\"/about\">About us\u003C/Link>\n      \u003C/div>\n    ),\n  },\n  {\n    path: '/about',\n    element: (\n      \u003Cdiv>\n        \u003Ch1>About us\u003C/h1>\n        \u003CLink to=\"/\">Go back home\u003C/Link>\n      \u003C/div>\n    ),\n  },\n]\n\n```\n\nIf you try inspecting the network requests now, you'll notice that after the initial load, there won't be any more requests to the server while navigating across the pages. We have achieved the first goal for building the router!\n\nHowever, there is still an issue. If you attempt to navigate back using the browser's back button, you will notice that the page content doesn't update. This is because the current location in our SPA is not being updated.\n\n### Updating the location when navigating back\n\nTo update the current route when the user navigates back, we'll need to make some changes to the  `useEffect` where we previously handled our custom `pushState` event. This time, we will add a subscription to the `popState` event, which is automatically triggered when the back button is clicked (or when `window.back` is called).:\n\n```tsx\nconst [currentPathname, setCurrentPathname] = useState(getCurrentPath());\n\nuseEffect(() => {\n  const onLocationChange = () => setCurrentPathname(getCurrentPath());\n  window.addEventListener(EVENTS.PUSHSTATE, onLocationChange);\n  window.addEventListener(EVENTS.POPSTATE, onLocationChange);\n  return () => {\n    window.removeEventListener(EVENTS.PUSHSTATE, onLocationChange);\n    window.removeEventListener(EVENTS.POPSTATE, onLocationChange);\n  };\n}, []);\n```\n\nWhere we added the new event to the `EVENTS` object:\n\n```ts\nconst EVENTS = {\n  PUSHSTATE: 'pushstate',\n  POPSTATE: 'popstate',\n}\n```\n\nAnd with this, we have successfully built a working router for our SPAs!\n\n## Adding support to dynamic routes and query parameters\n\n### Dynamic routes\n\nSo far, we have added support for routes with static names (like `/about` for example). However, in most cases, we are going to need routes with dynamic segments (for example `/user/:id`). \n\nTo support his, we will use the library **path-to-regexp** and replace this line in `App.tsx` where we check for equal path names:\n\n```ts\nconst page = routes.find((route) => route.path === currentPathname)?.element\n```\n\nWith this one:\n\n```ts\nimport { match } from 'path-to-regexp';\n\nlet params: Record\u003Cstring, string> = {};\nlet pathname: string = '';\n\nconst page = routesToUse.find(({ path }) => {\n  if (path === currentPathname) {\n    pathname = path;\n    return true;\n  }\n\n  const matcherUrl = match(path, { decode: decodeURIComponent });\n\n  const matched = matcherUrl(currentLocation.path);\n  if (!matched) return false;\n\n  params = matched.params as Record\u003Cstring, string>;\n  pathname = path;\n  return true;\n})?.element;\n```\n\nWhere `params` will contain the values of the dynamic segments. For example, if the user is trying to access the route `/user/123`, this will match the route `/user/:id` and `params` will be an object with a value of `{id: '123'}`. We will also keep the value for the original path in `pathname` (in the previous example it would be `/user/:id`) since it might be useful.\n\n### Query parameters\n\nAdditionally, we'll also need to support query parameters. For this, we can start by implementing a helper function that will get the query parammeters (also called search parameters) from the current location:\n\n```ts\nexport const getQueryParams = () => {\n  const searchParams = new URLSearchParams(window.location.search);\n  const query = {} as Record\u003Cstring, string | string[]>;\n  for (const [key, value] of searchParams.entries()) {\n    if (!query[key]) {\n      query[key] = value;\n    } else if (typeof query[key] === 'string') {\n      query[key] = [query[key] as string, value];\n    } else {\n      query[key] = [...query[key], value];\n    }\n  }\n  return query;\n};\n```\n\nThis function will return an object whose values will be either a string or an array of strings, depending on whether the corresponding parameter key has multiple values or not. For example, a query parameter of `?foo=1&foo=2&bar=abc` will be parsed as `{ foo: ['1', '2'], bar: 'abc' }`.\n\nNow, we can add this to the event subscription, so the application is re-rendered when there's a query change. For this purpose, I renamed the previous `currentPathname` to `currentLocation`, which will contain both the current path and query:\n\n```ts\nconst [currentLocation, setCurrentLocation] = useState({\n  path: getCurrentPath(),\n  query: getQueryParams(),\n});\n\nuseEffect(() => {\n  const onLocationChange = () =>\n    setCurrentLocation({\n      path: getCurrentPath(),\n      query: getQueryParams(),\n    });\n  window.addEventListener(EVENTS.PUSHSTATE, onLocationChange);\n  window.addEventListener(EVENTS.POPSTATE, onLocationChange);\n  return () => {\n    window.removeEventListener(EVENTS.PUSHSTATE, onLocationChange);\n    window.removeEventListener(EVENTS.POPSTATE, onLocationChange);\n  };\n}, []);\n```\n\n### Refactoring the navigation\n\nThese additions will allow our application to render the right route when the requested url contains dynamic segments and also keep in the state the query parameters. \n\nHowever, if we want to link to a dynamic route or add query parameters to a link programatically, we'll need to refactor our `Link` component so it's able to link to an `href` given any values of path, dynamic segments and query parameters. The function to do this conversion would be something like this:\n\n```ts\nimport { compile } from 'path-to-regexp';\n\nconst compilePathWithSegments = (\n  pathname: string,\n  segments: Record\u003Cstring, string>\n) => {\n  const toPath = compile(pathname, { encode: encodeURIComponent });\n  return toPath(segments);\n};\n\nexport type PathObject = {\n  pathname: string;\n  pathSegments?: Record\u003Cstring, string>;\n  query?: Record\u003Cstring, string | string[]>;\n};\n\nexport function getRelativeHref(url: string | PathObject) {\n  if (typeof url === 'string') {\n    return url;\n  }\n  if (!url.pathname) {\n    return '';\n  }\n\n  let compiledPathname = url.pathname;\n  if (url.pathSegments) {\n    compiledPathname = compilePathWithSegments(url.pathname, url.pathSegments);\n  }\n\n  const searchParams = new URLSearchParams();\n  if (url.query) {\n    Object.entries(url.query).forEach(([key, value]) => {\n      if (typeof value === 'string') {\n        searchParams.append(key, value);\n      } else {\n        value.forEach((val) => searchParams.append(key, val));\n      }\n    });\n  }\n  return searchParams.toString()\n    ? `${compiledPathname}?${searchParams}`\n    : compiledPathname;\n}\n```\n\nThe function `getRelativeHref` will accept a URL as a string, for example `/about`, and just return it. Alternatively, the url can be passed as an object containing its pathname and, optionally, its dynamic segments and query parameters. For example: `{ pathname: '/user/:id', pathSegments: { id: 'foo' }, query: { search: 'bar' }}`.\n\nThen we can add this functionality to the `Link` component:\n\n```tsx\n// Link.tsx\nfunction Link({ target, to, ...props }: LinkProps) {\n  const href = getRelativeHref(to);\n  const handleClick = (event: MouseEvent) => {\n\n    // {... same as before ...}\n\n    if (isMainEvent && isManageableEvent && !isModifiedEvent) {\n      event.preventDefault();\n      dispatchPushStateEvent(href);\n    }\n  };\n\n  return \u003Ca onClick={handleClick} href={href} target={target} {...props} />;\n}\n```\n\n## The router context provider\n\nNow that we have all the basic functionality of the routing in place, we can extract this logic into a React context so we can consume the routing state in any component of the application. \n\nLet's start by creating the context:\n\n```tsx\n// context.ts\nimport { createContext, useContext } from 'react';\n\ninterface RouterContext {\n  pathname: string;\n  navigate: (to: string) => void;\n}\n\nexport const RouterContext = createContext\u003CRouterContext>(null!);\n\nexport function useRouter() {\n  return useContext(RouterContext);\n}\n```\n\nNow we can create a `Router` component that returns this context and includes all the routing logic:\n\n```tsx\n// Router.tsx\n\nfunction navigate(to: string | PathObject) {\n  const href = getRelativeHref(to);\n  dispatchPushStateEvent(href);\n}\n\nfunction Router({\n  routes = [],\n  defaultElement = \u003Ch1>404\u003C/h1>,\n}: PropsWithChildren\u003CProps>) {\n  /* \n  const [currentLocation, setCurrentLocation] = useState({ ...\n\n  useEffect(() => { ...\n\n  let params: Record\u003Cstring, string> = {};\n  let pathname: string = '';\n\n  const page = routes.find(({ path })) => { ...\n  */\n\n  return (\n      \u003CRouterContext.Provider\n        value={{\n          pathname,\n          asPath: currentLocation.path,\n          params,\n          query: currentLocation.query,\n          navigate,\n        }}\n      >\n        {page ? page : defaultElement}\n      \u003C/RouterContext.Provider>\n    );\n```\n## Taking it a bit further: the Route component\n\nIn order to reduce the level of abstraction, we can define a custom `Route` component, similar to the equivalent component in React Router. This allows us to use the `Route` component for each individual route instead of passing a `routes` object to the `Router`:\n\n```tsx\nfunction App() {\n  // ...\n  return (\n    \u003CRouter>\n      \u003CRoute path=\"/\" element={\u003CHomePage />} />\n      \u003CRoute path=\"/about\" element={\u003CAboutPage />} />\n    \u003C/Router>\n  )\n}\n```\n\nThis custom `Route` component, similary to the component in React Router, simply returns `null`:\n\n```tsx\n// Route.tsx\n\nimport { ReactNode } from 'react';\n\nexport interface RouteProps {\n  path: string;\n  element: ReactNode;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nexport function Route(_props: RouteProps) {\n  return null;\n}\n```\n\n(Notice that I added an eslint exception since we are not using the props.)\n\nThen, React Router cleverly leverages the `React.Children` method, which is not commonly encouraged by [the React docs](https://react.dev/reference/react/Children) except for specific use cases like this. This method lets you transform the JSX code received as `children` prop. \n\nBy doing this, we can map the `children` and extract the props of the corresponding routes. Then, the `Router` will render the element of the matching route as usual, effectively ignoring the children components:\n\n```tsx\n// Router.tsx\nfunction Router({\n  children,\n  routes = [],\n  defaultElement = \u003Ch1>404\u003C/h1>,\n  basename = '',\n}: PropsWithChildren\u003CProps>) {\n  // ... same code\n\n  const routesFromChildren =\n    Children.map(children, (child) => {\n      const { props, type } = child as JSX.Element;\n      const { displayName } = type;\n      const isRoute = displayName === 'Route';\n\n      return isRoute ? (props as RouteProps) : null;\n    })?.filter(Boolean) || [];\n\n  // we support both routes passed as an object ('routes' prop) or part of children as a \u003CRoute />\n  const routesToUse = [...routes, ...routesFromChildren];\n\n  const page = routesToUse.find(({ path }) => {\n    // ... same code\n  })\n  /* \n  return (\n    ... same code\n  ) \n  */\n```\n\n## Optimizing for production: Lazy loading\n\nAs it is now, using this router in our SPA will load all the JavaScript code during the first request, which negatively impacts the application's initial load time. \n\nTo optimize and load only the code required to run the current page, we should move the pages into their own files and lazy load them using  `React.Suspense`:\n\n```tsx\nimport { Suspense, lazy } from 'react';\nimport { Router, Route } from './';\nimport Page404 from './pages/404';\n\nconst HomePage = lazy(() => import('./pages/Home'))\nconst AboutPage = lazy(() => import('./pages/About'));\n\nfunction App() {\n  return (\n    \u003Cmain>\n      \u003CSuspense fallback={null}>\n        \u003CRouter defaultElement={\u003CPage404 />} >\n          \u003CRoute path=\"/\" element={\u003CHomePage />} />\n          \u003CRoute path=\"/about\" element={\u003CAboutPage />} />\n        \u003C/Router>\n      \u003C/Suspense>\n    \u003C/main>\n  );\n}\n\nexport default App;\n```\n\n## Putting it all together\n\nYou can take a look at the final implementation [in my repository](https://github.com/vgarmes/v-router), which incorporates all the techniques we have discussed, along with some additional improvements.\n\nIn conclusion, developing this basic client-side router has given me a better high-level understanding of SPAs. I hope it proves to be useful to you as well. Thanks for reading!","src/content/blog/build-your-own-react-router.md","fd4c13988f19e92b",{"html":143,"metadata":144},"\u003Cp>Single-Page Applications (SPAs) are really popular, especially for highly interactive applications. Frameworks like Next.js, SvelteKit, and Remix are all examples of SPA frameworks, even though some of them offer server-side rendering capabilities.\u003C/p>\n\u003Cp>The key feature of SPAs is that they consist of a single JavaScript application, which generates the HTML of every page after the initial load without the need to hit the server again. This allows the application to maintain state and memory across pages seamlessly.\u003C/p>\n\u003Cp>At the core of these applications, there lies a router running on the client-side. This router is what prevents the client from requesting new pages from the server and instead lets the JavaScript application generate the corresponding page.\u003C/p>\n\u003Cp>To gain a better understanding of how routing in SPAs works, I decided to create my own router using React and TypeScript. I found great inspiration from \u003Ca href=\"https://www.youtube.com/watch?v=K2NcGYajvY4\">video by midudev\u003C/a> (in Spanish) where he builds something similar. Additionally, I referred to the source code of the popular library \u003Ca href=\"\">React Router\u003C/a> for guidance during the development process.\u003C/p>\n\u003Cp>You can see the router in action \u003Ca href=\"https://v-router.netlify.app/\">here\u003C/a>! Throughout this tutorial, I have prioritized simplicity while implementing only the essential features. Despite its simplicity, the router fully supports dynamic routing and query parameters. Now, let’s delve into how we can build it.\u003C/p>\n\u003Ch2 id=\"getting-started\">Getting started\u003C/h2>\n\u003Cp>As a foundation to test the router, I created an appication using \u003Ca href=\"https://vitejs.dev/guide/#scaffolding-your-first-vite-project\">Vite\u003C/a> with the React and Typescript + SWC template.\u003C/p>\n\u003Cp>In line with most typical React-based SPAs, this template generates an almost empty \u003Ccode>index.html\u003C/code> file containing a root \u003Ccode>&#x3C;div>\u003C/code> element. Additionally, a JavaScript file (in this case, written in TypeScript) is included, where React will inject the rendered HTML into this root element:\u003C/p>\n\u003Cpre class=\"astro-code astro-code-themes catppuccin-latte tokyo-night\" style=\"background-color:#eff1f5;--shiki-dark-bg:#1a1b26;color:#4c4f69;--shiki-dark:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"tsx\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#9CA0B0;font-style:italic;--shiki-dark:#51597D;--shiki-dark-font-style:italic\">// main.tsx\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#8839EF;--shiki-dark:#7DCFFF\">import\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#0DB9D7\"> React\u003C/span>\u003Cspan style=\"color:#8839EF;--shiki-dark:#7DCFFF\"> from\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\"> '\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#9ECE6A\">react\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\">'\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#8839EF;--shiki-dark:#7DCFFF\">import\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#0DB9D7\"> ReactDOM\u003C/span>\u003Cspan style=\"color:#8839EF;--shiki-dark:#7DCFFF\"> from\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\"> '\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#9ECE6A\">react-dom/client\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\">'\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#8839EF;--shiki-dark:#7DCFFF\">import\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#0DB9D7\"> App\u003C/span>\u003Cspan style=\"color:#8839EF;--shiki-dark:#7DCFFF\"> from\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\"> '\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#9ECE6A\">./App\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\">'\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\">ReactDOM\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\">.\u003C/span>\u003Cspan style=\"color:#1E66F5;font-style:italic;--shiki-dark:#7AA2F7;--shiki-dark-font-style:inherit\">createRoot\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">(\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\">document\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\">.\u003C/span>\u003Cspan style=\"color:#1E66F5;font-style:italic;--shiki-dark:#7AA2F7;--shiki-dark-font-style:inherit\">getElementById\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">(\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\">'\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#9ECE6A\">root\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\">'\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">)\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#BB9AF7\">!\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">)\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\">.\u003C/span>\u003Cspan style=\"color:#1E66F5;font-style:italic;--shiki-dark:#7AA2F7;--shiki-dark-font-style:inherit\">render\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">(\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\">  &#x3C;\u003C/span>\u003Cspan style=\"color:#EA76CB;--shiki-dark:#DE5971\">React.StrictMode\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\">    &#x3C;\u003C/span>\u003Cspan style=\"color:#EA76CB;--shiki-dark:#DE5971\">App\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\"> />\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\">  &#x3C;/\u003C/span>\u003Cspan style=\"color:#EA76CB;--shiki-dark:#DE5971\">React.StrictMode\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">)\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">;\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>The file \u003Ccode>App.tsx\u003C/code> is where we will have to use our router to control what page is going to be rendered depending on the client location, enabling client side routing.\u003C/p>\n\u003Cp>Following a similar approach to React Router, we’ll implement a \u003Ccode>Router\u003C/code> component that accepts the routes as props. Thus, we can begin by creating the routes object and making an initial attempt at conditionally rendering the corresponding route based on the current location:\u003C/p>\n\u003Cpre class=\"astro-code astro-code-themes catppuccin-latte tokyo-night\" style=\"background-color:#eff1f5;--shiki-dark-bg:#1a1b26;color:#4c4f69;--shiki-dark:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"tsx\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#9CA0B0;font-style:italic;--shiki-dark:#51597D;--shiki-dark-font-style:italic\">// App.tsx\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#8839EF;font-style:inherit;--shiki-dark:#9D7CD8;--shiki-dark-font-style:italic\">const\u003C/span>\u003Cspan style=\"color:#FE640B;--shiki-dark:#BB9AF7\"> routes\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\"> =\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\"> [\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\">  {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#4C4F69;--shiki-dark:#73DACA\">    path\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\">:\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\"> '\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#9ECE6A\">/\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\">'\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#1E66F5;font-style:italic;--shiki-dark:#7AA2F7;--shiki-dark-font-style:inherit\">    element\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\">:\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\"> (\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\">      &#x3C;\u003C/span>\u003Cspan style=\"color:#1E66F5;--shiki-dark:#F7768E\">div\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\">        &#x3C;\u003C/span>\u003Cspan style=\"color:#1E66F5;--shiki-dark:#F7768E\">h1\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\">>\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9AA5CE\">Hello World!\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\">&#x3C;/\u003C/span>\u003Cspan style=\"color:#1E66F5;--shiki-dark:#F7768E\">h1\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\">        &#x3C;\u003C/span>\u003Cspan style=\"color:#1E66F5;--shiki-dark:#F7768E\">a\u003C/span>\u003Cspan style=\"color:#DF8E1D;--shiki-dark:#BB9AF7\"> href\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\">=\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\">\"\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#9ECE6A\">/about\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\">\"\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\">>\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9AA5CE\">About us\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\">&#x3C;/\u003C/span>\u003Cspan style=\"color:#1E66F5;--shiki-dark:#F7768E\">a\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\">      &#x3C;/\u003C/span>\u003Cspan style=\"color:#1E66F5;--shiki-dark:#F7768E\">div\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">    )\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\">  }\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\">  {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#4C4F69;--shiki-dark:#73DACA\">    path\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\">:\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\"> '\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#9ECE6A\">/about\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\">'\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#1E66F5;font-style:italic;--shiki-dark:#7AA2F7;--shiki-dark-font-style:inherit\">    element\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\">:\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\"> (\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\">      &#x3C;\u003C/span>\u003Cspan style=\"color:#1E66F5;--shiki-dark:#F7768E\">div\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\">        &#x3C;\u003C/span>\u003Cspan style=\"color:#1E66F5;--shiki-dark:#F7768E\">h1\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\">>\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9AA5CE\">About us\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\">&#x3C;/\u003C/span>\u003Cspan style=\"color:#1E66F5;--shiki-dark:#F7768E\">h1\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\">        &#x3C;\u003C/span>\u003Cspan style=\"color:#1E66F5;--shiki-dark:#F7768E\">a\u003C/span>\u003Cspan style=\"color:#DF8E1D;--shiki-dark:#BB9AF7\"> href\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\">=\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\">\"\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#9ECE6A\">/\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\">\"\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\">>\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9AA5CE\">Go back home\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\">&#x3C;/\u003C/span>\u003Cspan style=\"color:#1E66F5;--shiki-dark:#F7768E\">a\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\">      &#x3C;/\u003C/span>\u003Cspan style=\"color:#1E66F5;--shiki-dark:#F7768E\">div\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">    )\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\">  }\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#8839EF;--shiki-dark:#BB9AF7\">function\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#A9B1D6\"> 404\u003C/span>\u003Cspan style=\"color:#1E66F5;font-style:italic;--shiki-dark:#7AA2F7;--shiki-dark-font-style:inherit\">Page\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\">()\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#8839EF;font-style:inherit;--shiki-dark:#BB9AF7;--shiki-dark-font-style:italic\">  return\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\"> (\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\">    &#x3C;\u003C/span>\u003Cspan style=\"color:#1E66F5;--shiki-dark:#F7768E\">div\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\">      &#x3C;\u003C/span>\u003Cspan style=\"color:#1E66F5;--shiki-dark:#F7768E\">h1\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\">>\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9AA5CE\">404\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\">&#x3C;/\u003C/span>\u003Cspan style=\"color:#1E66F5;--shiki-dark:#F7768E\">h1\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\">    &#x3C;/\u003C/span>\u003Cspan style=\"color:#1E66F5;--shiki-dark:#F7768E\">div\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">  )\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#8839EF;--shiki-dark:#BB9AF7\">function\u003C/span>\u003Cspan style=\"color:#1E66F5;font-style:italic;--shiki-dark:#7AA2F7;--shiki-dark-font-style:inherit\"> App\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\">()\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#8839EF;font-style:inherit;--shiki-dark:#9D7CD8;--shiki-dark-font-style:italic\">  const\u003C/span>\u003Cspan style=\"color:#FE640B;--shiki-dark:#BB9AF7\"> currentPathname\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\"> =\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\"> window\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\">.\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\">location\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\">.\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#7DCFFF\">pathname\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#8839EF;font-style:inherit;--shiki-dark:#9D7CD8;--shiki-dark-font-style:italic\">  const\u003C/span>\u003Cspan style=\"color:#FE640B;--shiki-dark:#BB9AF7\"> page\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\"> =\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\"> routes\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\">.\u003C/span>\u003Cspan style=\"color:#1E66F5;font-style:italic;--shiki-dark:#7AA2F7;--shiki-dark-font-style:inherit\">find\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">(\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\">(\u003C/span>\u003Cspan style=\"color:#E64553;font-style:italic;--shiki-dark:#E0AF68;--shiki-dark-font-style:inherit\">route\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\">)\u003C/span>\u003Cspan style=\"color:#8839EF;--shiki-dark:#BB9AF7\"> =>\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\"> route\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\">.\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#7DCFFF\">path\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#BB9AF7\"> ===\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\"> currentPathname\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">)\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\">?.\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#7DCFFF\">element\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#8839EF;font-style:inherit;--shiki-dark:#BB9AF7;--shiki-dark-font-style:italic\">  return\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\"> (\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\">    &#x3C;\u003C/span>\u003Cspan style=\"color:#1E66F5;--shiki-dark:#F7768E\">main\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#7C7F93;--shiki-dark:#7DCFFF\">      {\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\">page\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#BB9AF7\"> ?\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\"> page\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#BB9AF7\"> :\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9AA5CE\"> 404\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\">Page\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#7DCFFF\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\">    &#x3C;/\u003C/span>\u003Cspan style=\"color:#1E66F5;--shiki-dark:#F7768E\">main\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">  )\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>The implemented routing logic will successfully find a matching route and render the corresponding page; otherwise, it will display a 404 page.\u003C/p>\n\u003Cp>However, when attempting to navigate between the routes \u003Ccode>/\u003C/code> and \u003Ccode>/about\u003C/code> using the links provided, you will notice that every time you navigate to page, a request is sent to the server to fetch the corresponding HTML file and the entire JavaScript application (you can see it on the Network tab of the browser developer tools).\u003C/p>\n\u003Cp>To achieve true SPA behavior, we need to avoid this and intercept all navigation attempts.\u003C/p>\n\u003Ch2 id=\"intercepting-navigation\">Intercepting navigation\u003C/h2>\n\u003Cp>To intercept all navigation attempts and prevent the browser’s default behavior, we need to take the following steps:\u003C/p>\n\u003Col>\n\u003Cli>Create a function that we can call in an anchor element (and elsewhere) to enable navigation \u003Cstrong>to\u003C/strong> a different path.\u003C/li>\n\u003Cli>Intercept the event of navigating back using the browser’s back button.\u003C/li>\n\u003C/ol>\n\u003Ch3 id=\"creating-a-function-to-navigate-to-another-path\">Creating a function to navigate to another path\u003C/h3>\n\u003Cp>First and foremost, we require a function that we can call whenever we need to navigate to a different page. The approach to achieve this involves programmatically replacing the URL using a \u003Ccode>window\u003C/code> method while simultaneously triggering an event that we can subscribe to and handle the re-rendering process accordingly:\u003C/p>\n\u003Cpre class=\"astro-code astro-code-themes catppuccin-latte tokyo-night\" style=\"background-color:#eff1f5;--shiki-dark-bg:#1a1b26;color:#4c4f69;--shiki-dark:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"ts\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#8839EF;font-style:inherit;--shiki-dark:#9D7CD8;--shiki-dark-font-style:italic\">const\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#BB9AF7\"> EVENTS\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\"> =\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#4C4F69;--shiki-dark:#73DACA\">  PUSHSTATE\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\">:\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\"> '\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#9ECE6A\">pushstate\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\">'\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#8839EF;font-style:inherit;--shiki-dark:#9D7CD8;--shiki-dark-font-style:italic\">const\u003C/span>\u003Cspan style=\"color:#1E66F5;font-style:italic;--shiki-dark:#7AA2F7;--shiki-dark-font-style:inherit\"> dispatchPushStateEvent\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\"> =\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\"> (\u003C/span>\u003Cspan style=\"color:#E64553;font-style:italic;--shiki-dark:#E0AF68;--shiki-dark-font-style:inherit\">href\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\">:\u003C/span>\u003Cspan style=\"color:#8839EF;--shiki-dark:#0DB9D7\"> string\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\">)\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#BB9AF7\"> =>\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\">  window\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\">.\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#7DCFFF\">history\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\">.\u003C/span>\u003Cspan style=\"color:#1E66F5;font-style:italic;--shiki-dark:#7AA2F7;--shiki-dark-font-style:inherit\">pushState\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">(\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\">{}\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">,\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\"> ''\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">,\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\"> href\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">)\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#8839EF;font-style:inherit;--shiki-dark:#9D7CD8;--shiki-dark-font-style:italic\">  const\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#BB9AF7\"> navigationEvent\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\"> =\u003C/span>\u003Cspan style=\"color:#8839EF;font-weight:bold;--shiki-dark:#89DDFF;--shiki-dark-font-weight:inherit\"> new\u003C/span>\u003Cspan style=\"color:#1E66F5;font-style:italic;--shiki-dark:#7AA2F7;--shiki-dark-font-style:inherit\"> Event\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">(\u003C/span>\u003Cspan style=\"color:#FE640B;--shiki-dark:#0DB9D7\">EVENTS\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\">.\u003C/span>\u003Cspan style=\"color:#FE640B;--shiki-dark:#FF9E64\">PUSHSTATE\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">)\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\">  window\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\">.\u003C/span>\u003Cspan style=\"color:#1E66F5;font-style:italic;--shiki-dark:#7AA2F7;--shiki-dark-font-style:inherit\">dispatchEvent\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">(\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\">navigationEvent\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">)\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\">}\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">;\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>The \u003Ccode>window.history.pushState\u003C/code> method is used to add an entry to the browser’s session history stack, enabling us to replace the URL without the need to refresh the page.\u003C/p>\n\u003Cp>At the same time, since this method doesn’t trigger any events we can subscribe to, we can dispatch a custom \u003Ccode>pushstate\u003C/code> event and subscribe to it in a \u003Ccode>useEffect\u003C/code> hook. For this purpose, we will need to make some refinements to the \u003Ccode>App.tsx\u003C/code> file:\u003C/p>\n\u003Cpre class=\"astro-code astro-code-themes catppuccin-latte tokyo-night\" style=\"background-color:#eff1f5;--shiki-dark-bg:#1a1b26;color:#4c4f69;--shiki-dark:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"tsx\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#9CA0B0;font-style:italic;--shiki-dark:#51597D;--shiki-dark-font-style:italic\">// App.tsx\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9CA0B0;font-style:italic;--shiki-dark:#51597D;--shiki-dark-font-style:italic\">/*\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9CA0B0;font-style:italic;--shiki-dark:#51597D;--shiki-dark-font-style:italic\">{... same as before ...}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9CA0B0;font-style:italic;--shiki-dark:#51597D;--shiki-dark-font-style:italic\">*/\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#8839EF;font-style:inherit;--shiki-dark:#9D7CD8;--shiki-dark-font-style:italic\">const\u003C/span>\u003Cspan style=\"color:#1E66F5;font-style:italic;--shiki-dark:#7AA2F7;--shiki-dark-font-style:inherit\"> getCurrentPath\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\"> =\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\"> ()\u003C/span>\u003Cspan style=\"color:#8839EF;--shiki-dark:#BB9AF7\"> =>\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\"> window\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\">.\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\">location\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\">.\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#7DCFFF\">pathname\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#8839EF;--shiki-dark:#BB9AF7\">function\u003C/span>\u003Cspan style=\"color:#1E66F5;font-style:italic;--shiki-dark:#7AA2F7;--shiki-dark-font-style:inherit\"> App\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\">()\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#8839EF;font-style:inherit;--shiki-dark:#9D7CD8;--shiki-dark-font-style:italic\">  const\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\"> [\u003C/span>\u003Cspan style=\"color:#FE640B;--shiki-dark:#BB9AF7\">currentPathname\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">,\u003C/span>\u003Cspan style=\"color:#FE640B;--shiki-dark:#BB9AF7\"> setCurrentPathname\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">]\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\"> =\u003C/span>\u003Cspan style=\"color:#1E66F5;font-style:italic;--shiki-dark:#7AA2F7;--shiki-dark-font-style:inherit\"> useState\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">(\u003C/span>\u003Cspan style=\"color:#1E66F5;font-style:italic;--shiki-dark:#7AA2F7;--shiki-dark-font-style:inherit\">getCurrentPath\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">())\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#1E66F5;font-style:italic;--shiki-dark:#7AA2F7;--shiki-dark-font-style:inherit\">  useEffect\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">(\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\">()\u003C/span>\u003Cspan style=\"color:#8839EF;--shiki-dark:#BB9AF7\"> =>\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#8839EF;font-style:inherit;--shiki-dark:#9D7CD8;--shiki-dark-font-style:italic\">    const\u003C/span>\u003Cspan style=\"color:#1E66F5;font-style:italic;--shiki-dark:#7AA2F7;--shiki-dark-font-style:inherit\"> onLocationChange\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\"> =\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\"> ()\u003C/span>\u003Cspan style=\"color:#8839EF;--shiki-dark:#BB9AF7\"> =>\u003C/span>\u003Cspan style=\"color:#1E66F5;font-style:italic;--shiki-dark:#7AA2F7;--shiki-dark-font-style:inherit\"> setCurrentPathname\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">(\u003C/span>\u003Cspan style=\"color:#1E66F5;font-style:italic;--shiki-dark:#7AA2F7;--shiki-dark-font-style:inherit\">getCurrentPath\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">())\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\">    window\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\">.\u003C/span>\u003Cspan style=\"color:#1E66F5;font-style:italic;--shiki-dark:#7AA2F7;--shiki-dark-font-style:inherit\">addEventListener\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">(\u003C/span>\u003Cspan style=\"color:#FE640B;--shiki-dark:#0DB9D7\">EVENTS\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\">.\u003C/span>\u003Cspan style=\"color:#FE640B;--shiki-dark:#FF9E64\">PUSHSTATE\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">,\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\"> onLocationChange\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">)\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#8839EF;font-style:inherit;--shiki-dark:#BB9AF7;--shiki-dark-font-style:italic\">    return\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\"> ()\u003C/span>\u003Cspan style=\"color:#8839EF;--shiki-dark:#BB9AF7\"> =>\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\">      window\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\">.\u003C/span>\u003Cspan style=\"color:#1E66F5;font-style:italic;--shiki-dark:#7AA2F7;--shiki-dark-font-style:inherit\">removeEventListener\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">(\u003C/span>\u003Cspan style=\"color:#FE640B;--shiki-dark:#0DB9D7\">EVENTS\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\">.\u003C/span>\u003Cspan style=\"color:#FE640B;--shiki-dark:#FF9E64\">PUSHSTATE\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">,\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\"> onLocationChange\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\">    }\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\">    }\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">,\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\"> [])\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#8839EF;font-style:inherit;--shiki-dark:#9D7CD8;--shiki-dark-font-style:italic\">  const\u003C/span>\u003Cspan style=\"color:#FE640B;--shiki-dark:#BB9AF7\"> page\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\"> =\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\"> routes\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\">.\u003C/span>\u003Cspan style=\"color:#1E66F5;font-style:italic;--shiki-dark:#7AA2F7;--shiki-dark-font-style:inherit\">find\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">(\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\">(\u003C/span>\u003Cspan style=\"color:#E64553;font-style:italic;--shiki-dark:#E0AF68;--shiki-dark-font-style:inherit\">route\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\">)\u003C/span>\u003Cspan style=\"color:#8839EF;--shiki-dark:#BB9AF7\"> =>\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\"> route\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\">.\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#7DCFFF\">path\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#BB9AF7\"> ===\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\"> currentPathname\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">)\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\">?.\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#7DCFFF\">element\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#8839EF;font-style:inherit;--shiki-dark:#BB9AF7;--shiki-dark-font-style:italic\">  return\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\"> (\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\">    &#x3C;\u003C/span>\u003Cspan style=\"color:#1E66F5;--shiki-dark:#F7768E\">main\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#7C7F93;--shiki-dark:#7DCFFF\">      {\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\">page\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#BB9AF7\"> ?\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\"> page\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#BB9AF7\"> :\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9AA5CE\"> 404\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\">Page\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#7DCFFF\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\">    &#x3C;/\u003C/span>\u003Cspan style=\"color:#1E66F5;--shiki-dark:#F7768E\">main\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">  )\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"link-component-replacing-anchors-default-behavior\">Link component: Replacing anchor’s default behavior\u003C/h2>\n\u003Cp>Now we can use the \u003Ccode>dispatchPushStateEvent\u003C/code> function in the anchor element. For this, we can create a custom \u003Ccode>Link\u003C/code> component that will return a traditional anchor element but with the modified functionality:\u003C/p>\n\u003Cpre class=\"astro-code astro-code-themes catppuccin-latte tokyo-night\" style=\"background-color:#eff1f5;--shiki-dark-bg:#1a1b26;color:#4c4f69;--shiki-dark:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"tsx\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#9CA0B0;font-style:italic;--shiki-dark:#51597D;--shiki-dark-font-style:italic\">// Link.tsx\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#8839EF;--shiki-dark:#7DCFFF\">import\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\"> {\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#0DB9D7\"> AnchorHTMLAttributes\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">,\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#0DB9D7\"> MouseEvent\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\"> }\u003C/span>\u003Cspan style=\"color:#8839EF;--shiki-dark:#7DCFFF\"> from\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\"> '\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#9ECE6A\">react\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\">'\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#8839EF;--shiki-dark:#7DCFFF\">import\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\"> {\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#0DB9D7\"> dispatchPushStateEvent\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\"> }\u003C/span>\u003Cspan style=\"color:#8839EF;--shiki-dark:#7DCFFF\"> from\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\"> '\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#9ECE6A\">./utils\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\">'\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#8839EF;--shiki-dark:#BB9AF7\">interface\u003C/span>\u003Cspan style=\"color:#DF8E1D;font-style:italic;--shiki-dark:#C0CAF5;--shiki-dark-font-style:inherit\"> LinkProps\u003C/span>\u003Cspan style=\"color:#8839EF;font-style:inherit;--shiki-dark:#9D7CD8;--shiki-dark-font-style:italic\"> extends\u003C/span>\u003Cspan style=\"color:#DF8E1D;font-style:italic;--shiki-dark:#BB9AF7;--shiki-dark-font-style:inherit\"> AnchorHTMLAttributes\u003C/span>\u003Cspan style=\"color:#04A5E5;--shiki-dark:#89DDFF\">&#x3C;\u003C/span>\u003Cspan style=\"color:#DF8E1D;font-style:italic;--shiki-dark:#C0CAF5;--shiki-dark-font-style:inherit\">HTMLAnchorElement\u003C/span>\u003Cspan style=\"color:#04A5E5;--shiki-dark:#89DDFF\">>\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\">  to\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\">:\u003C/span>\u003Cspan style=\"color:#8839EF;--shiki-dark:#0DB9D7\"> string\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#8839EF;--shiki-dark:#BB9AF7\">function\u003C/span>\u003Cspan style=\"color:#1E66F5;font-style:italic;--shiki-dark:#7AA2F7;--shiki-dark-font-style:inherit\"> Link\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\">(\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">{\u003C/span>\u003Cspan style=\"color:#E64553;font-style:italic;--shiki-dark:#E0AF68;--shiki-dark-font-style:inherit\"> target\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">,\u003C/span>\u003Cspan style=\"color:#E64553;font-style:italic;--shiki-dark:#E0AF68;--shiki-dark-font-style:inherit\"> to\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">,\u003C/span>\u003Cspan style=\"color:#179299;font-weight:inherit;--shiki-dark:#F7768E;--shiki-dark-font-weight:bold\"> ...\u003C/span>\u003Cspan style=\"color:#E64553;font-style:italic;--shiki-dark:#E0AF68;--shiki-dark-font-style:inherit\">props\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\"> }\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\">:\u003C/span>\u003Cspan style=\"color:#DF8E1D;font-style:italic;--shiki-dark:#C0CAF5;--shiki-dark-font-style:inherit\"> LinkProps\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\">)\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#8839EF;font-style:inherit;--shiki-dark:#9D7CD8;--shiki-dark-font-style:italic\">  const\u003C/span>\u003Cspan style=\"color:#1E66F5;font-style:italic;--shiki-dark:#7AA2F7;--shiki-dark-font-style:inherit\"> handleClick\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\"> =\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\"> (\u003C/span>\u003Cspan style=\"color:#E64553;font-style:italic;--shiki-dark:#E0AF68;--shiki-dark-font-style:inherit\">event\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\">:\u003C/span>\u003Cspan style=\"color:#DF8E1D;font-style:italic;--shiki-dark:#C0CAF5;--shiki-dark-font-style:inherit\"> MouseEvent\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\">)\u003C/span>\u003Cspan style=\"color:#8839EF;--shiki-dark:#BB9AF7\"> =>\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#8839EF;font-style:inherit;--shiki-dark:#9D7CD8;--shiki-dark-font-style:italic\">    const\u003C/span>\u003Cspan style=\"color:#FE640B;--shiki-dark:#BB9AF7\"> isMainEvent\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\"> =\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\"> event\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\">.\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#7DCFFF\">button\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#BB9AF7\"> ===\u003C/span>\u003Cspan style=\"color:#FE640B;--shiki-dark:#FF9E64\"> 0\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">;\u003C/span>\u003Cspan style=\"color:#9CA0B0;font-style:italic;--shiki-dark:#51597D;--shiki-dark-font-style:italic\"> // primary mouse button click\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#8839EF;font-style:inherit;--shiki-dark:#9D7CD8;--shiki-dark-font-style:italic\">    const\u003C/span>\u003Cspan style=\"color:#FE640B;--shiki-dark:#BB9AF7\"> isModifiedEvent\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\"> =\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\">      event\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\">.\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#7DCFFF\">metaKey\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#BB9AF7\"> ||\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\"> event\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\">.\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#7DCFFF\">altKey\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#BB9AF7\"> ||\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\"> event\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\">.\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#7DCFFF\">ctrlKey\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#BB9AF7\"> ||\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\"> event\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\">.\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#7DCFFF\">shiftKey\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">    \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9CA0B0;font-style:italic;--shiki-dark:#51597D;--shiki-dark-font-style:italic\">    // let browser handle target=\"_blank\" etc\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#8839EF;font-style:inherit;--shiki-dark:#9D7CD8;--shiki-dark-font-style:italic\">    const\u003C/span>\u003Cspan style=\"color:#FE640B;--shiki-dark:#BB9AF7\"> isManageableEvent\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\"> =\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\"> target\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#BB9AF7\"> ===\u003C/span>\u003Cspan style=\"color:#D20F39;--shiki-dark:#FF9E64\"> undefined\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#BB9AF7\"> ||\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\"> target\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#BB9AF7\"> ===\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\"> '\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#9ECE6A\">_self\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\">'\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">;\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\"> \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">    \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#8839EF;--shiki-dark:#BB9AF7\">    if\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\"> (\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\">isMainEvent\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#BB9AF7\"> &#x26;&#x26;\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\"> isManageableEvent\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#BB9AF7\"> &#x26;&#x26;\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#BB9AF7\"> !\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\">isModifiedEvent\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">) \u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\">{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\">      event\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\">.\u003C/span>\u003Cspan style=\"color:#1E66F5;font-style:italic;--shiki-dark:#7AA2F7;--shiki-dark-font-style:inherit\">preventDefault\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">()\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#1E66F5;font-style:italic;--shiki-dark:#7AA2F7;--shiki-dark-font-style:inherit\">      dispatchPushStateEvent\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">(\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\">to\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">)\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\">  }\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#8839EF;font-style:inherit;--shiki-dark:#BB9AF7;--shiki-dark-font-style:italic\">  return\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\"> &#x3C;\u003C/span>\u003Cspan style=\"color:#1E66F5;--shiki-dark:#F7768E\">a\u003C/span>\u003Cspan style=\"color:#DF8E1D;--shiki-dark:#BB9AF7\"> onClick\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\">=\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#7DCFFF\">{\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\">handleClick\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#7DCFFF\">}\u003C/span>\u003Cspan style=\"color:#DF8E1D;--shiki-dark:#BB9AF7\"> href\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\">=\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#7DCFFF\">{\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\">to\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#7DCFFF\">}\u003C/span>\u003Cspan style=\"color:#DF8E1D;--shiki-dark:#BB9AF7\"> target\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\">=\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#7DCFFF\">{\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\">target\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#7DCFFF\">}\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#7DCFFF\"> {\u003C/span>\u003Cspan style=\"color:#179299;font-weight:inherit;--shiki-dark:#F7768E;--shiki-dark-font-weight:bold\">...\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\">props\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#7DCFFF\">}\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\"> />\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#8839EF;--shiki-dark:#7DCFFF\">export\u003C/span>\u003Cspan style=\"color:#8839EF;--shiki-dark:#7DCFFF\"> default\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\"> Link\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>What we are accomplishing here is that clicking on the anchor will trigger our custom \u003Ccode>pushState\u003C/code> event, but only if the intent is not to open a new window or tab (hence the \u003Ccode>isModifiedEvent\u003C/code> and \u003Ccode>isMnageableEvent\u003C/code> checks).\u003C/p>\n\u003Cp>With the new \u003Ccode>Link\u003C/code> component in place, we can now proceed to refactor the elements returned by our routes:\u003C/p>\n\u003Cpre class=\"astro-code astro-code-themes catppuccin-latte tokyo-night\" style=\"background-color:#eff1f5;--shiki-dark-bg:#1a1b26;color:#4c4f69;--shiki-dark:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"tsx\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#8839EF;font-style:inherit;--shiki-dark:#9D7CD8;--shiki-dark-font-style:italic\">const\u003C/span>\u003Cspan style=\"color:#FE640B;--shiki-dark:#BB9AF7\"> routes\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\"> =\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\"> [\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\">  {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#4C4F69;--shiki-dark:#73DACA\">    path\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\">:\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\"> '\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#9ECE6A\">/\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\">'\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#1E66F5;font-style:italic;--shiki-dark:#7AA2F7;--shiki-dark-font-style:inherit\">    element\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\">:\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\"> (\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\">      &#x3C;\u003C/span>\u003Cspan style=\"color:#1E66F5;--shiki-dark:#F7768E\">div\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\">        &#x3C;\u003C/span>\u003Cspan style=\"color:#1E66F5;--shiki-dark:#F7768E\">h1\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\">>\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9AA5CE\">Hello World!\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\">&#x3C;/\u003C/span>\u003Cspan style=\"color:#1E66F5;--shiki-dark:#F7768E\">h1\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\">        &#x3C;\u003C/span>\u003Cspan style=\"color:#EA76CB;--shiki-dark:#DE5971\">Link\u003C/span>\u003Cspan style=\"color:#DF8E1D;--shiki-dark:#BB9AF7\"> to\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\">=\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\">\"\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#9ECE6A\">/about\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\">\"\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\">>\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9AA5CE\">About us\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\">&#x3C;/\u003C/span>\u003Cspan style=\"color:#EA76CB;--shiki-dark:#DE5971\">Link\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\">      &#x3C;/\u003C/span>\u003Cspan style=\"color:#1E66F5;--shiki-dark:#F7768E\">div\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">    )\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\">  }\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\">  {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#4C4F69;--shiki-dark:#73DACA\">    path\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\">:\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\"> '\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#9ECE6A\">/about\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\">'\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#1E66F5;font-style:italic;--shiki-dark:#7AA2F7;--shiki-dark-font-style:inherit\">    element\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\">:\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\"> (\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\">      &#x3C;\u003C/span>\u003Cspan style=\"color:#1E66F5;--shiki-dark:#F7768E\">div\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\">        &#x3C;\u003C/span>\u003Cspan style=\"color:#1E66F5;--shiki-dark:#F7768E\">h1\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\">>\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9AA5CE\">About us\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\">&#x3C;/\u003C/span>\u003Cspan style=\"color:#1E66F5;--shiki-dark:#F7768E\">h1\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\">        &#x3C;\u003C/span>\u003Cspan style=\"color:#EA76CB;--shiki-dark:#DE5971\">Link\u003C/span>\u003Cspan style=\"color:#DF8E1D;--shiki-dark:#BB9AF7\"> to\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\">=\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\">\"\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#9ECE6A\">/\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\">\"\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\">>\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9AA5CE\">Go back home\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\">&#x3C;/\u003C/span>\u003Cspan style=\"color:#EA76CB;--shiki-dark:#DE5971\">Link\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\">      &#x3C;/\u003C/span>\u003Cspan style=\"color:#1E66F5;--shiki-dark:#F7768E\">div\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">    )\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\">  }\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>If you try inspecting the network requests now, you’ll notice that after the initial load, there won’t be any more requests to the server while navigating across the pages. We have achieved the first goal for building the router!\u003C/p>\n\u003Cp>However, there is still an issue. If you attempt to navigate back using the browser’s back button, you will notice that the page content doesn’t update. This is because the current location in our SPA is not being updated.\u003C/p>\n\u003Ch3 id=\"updating-the-location-when-navigating-back\">Updating the location when navigating back\u003C/h3>\n\u003Cp>To update the current route when the user navigates back, we’ll need to make some changes to the  \u003Ccode>useEffect\u003C/code> where we previously handled our custom \u003Ccode>pushState\u003C/code> event. This time, we will add a subscription to the \u003Ccode>popState\u003C/code> event, which is automatically triggered when the back button is clicked (or when \u003Ccode>window.back\u003C/code> is called).:\u003C/p>\n\u003Cpre class=\"astro-code astro-code-themes catppuccin-latte tokyo-night\" style=\"background-color:#eff1f5;--shiki-dark-bg:#1a1b26;color:#4c4f69;--shiki-dark:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"tsx\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#8839EF;font-style:inherit;--shiki-dark:#9D7CD8;--shiki-dark-font-style:italic\">const\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\"> [\u003C/span>\u003Cspan style=\"color:#FE640B;--shiki-dark:#BB9AF7\">currentPathname\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">,\u003C/span>\u003Cspan style=\"color:#FE640B;--shiki-dark:#BB9AF7\"> setCurrentPathname\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">]\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\"> =\u003C/span>\u003Cspan style=\"color:#1E66F5;font-style:italic;--shiki-dark:#7AA2F7;--shiki-dark-font-style:inherit\"> useState\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">(\u003C/span>\u003Cspan style=\"color:#1E66F5;font-style:italic;--shiki-dark:#7AA2F7;--shiki-dark-font-style:inherit\">getCurrentPath\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">())\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#1E66F5;font-style:italic;--shiki-dark:#7AA2F7;--shiki-dark-font-style:inherit\">useEffect\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">(\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\">()\u003C/span>\u003Cspan style=\"color:#8839EF;--shiki-dark:#BB9AF7\"> =>\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#8839EF;font-style:inherit;--shiki-dark:#9D7CD8;--shiki-dark-font-style:italic\">  const\u003C/span>\u003Cspan style=\"color:#1E66F5;font-style:italic;--shiki-dark:#7AA2F7;--shiki-dark-font-style:inherit\"> onLocationChange\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\"> =\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\"> ()\u003C/span>\u003Cspan style=\"color:#8839EF;--shiki-dark:#BB9AF7\"> =>\u003C/span>\u003Cspan style=\"color:#1E66F5;font-style:italic;--shiki-dark:#7AA2F7;--shiki-dark-font-style:inherit\"> setCurrentPathname\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">(\u003C/span>\u003Cspan style=\"color:#1E66F5;font-style:italic;--shiki-dark:#7AA2F7;--shiki-dark-font-style:inherit\">getCurrentPath\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">())\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\">  window\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\">.\u003C/span>\u003Cspan style=\"color:#1E66F5;font-style:italic;--shiki-dark:#7AA2F7;--shiki-dark-font-style:inherit\">addEventListener\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">(\u003C/span>\u003Cspan style=\"color:#FE640B;--shiki-dark:#0DB9D7\">EVENTS\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\">.\u003C/span>\u003Cspan style=\"color:#FE640B;--shiki-dark:#FF9E64\">PUSHSTATE\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">,\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\"> onLocationChange\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">)\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\">  window\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\">.\u003C/span>\u003Cspan style=\"color:#1E66F5;font-style:italic;--shiki-dark:#7AA2F7;--shiki-dark-font-style:inherit\">addEventListener\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">(\u003C/span>\u003Cspan style=\"color:#FE640B;--shiki-dark:#0DB9D7\">EVENTS\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\">.\u003C/span>\u003Cspan style=\"color:#FE640B;--shiki-dark:#FF9E64\">POPSTATE\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">,\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\"> onLocationChange\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">)\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#8839EF;font-style:inherit;--shiki-dark:#BB9AF7;--shiki-dark-font-style:italic\">  return\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\"> ()\u003C/span>\u003Cspan style=\"color:#8839EF;--shiki-dark:#BB9AF7\"> =>\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\">    window\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\">.\u003C/span>\u003Cspan style=\"color:#1E66F5;font-style:italic;--shiki-dark:#7AA2F7;--shiki-dark-font-style:inherit\">removeEventListener\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">(\u003C/span>\u003Cspan style=\"color:#FE640B;--shiki-dark:#0DB9D7\">EVENTS\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\">.\u003C/span>\u003Cspan style=\"color:#FE640B;--shiki-dark:#FF9E64\">PUSHSTATE\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">,\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\"> onLocationChange\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">)\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\">    window\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\">.\u003C/span>\u003Cspan style=\"color:#1E66F5;font-style:italic;--shiki-dark:#7AA2F7;--shiki-dark-font-style:inherit\">removeEventListener\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">(\u003C/span>\u003Cspan style=\"color:#FE640B;--shiki-dark:#0DB9D7\">EVENTS\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\">.\u003C/span>\u003Cspan style=\"color:#FE640B;--shiki-dark:#FF9E64\">POPSTATE\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">,\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\"> onLocationChange\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">)\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\">  }\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\">}\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">,\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\"> [])\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">;\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Where we added the new event to the \u003Ccode>EVENTS\u003C/code> object:\u003C/p>\n\u003Cpre class=\"astro-code astro-code-themes catppuccin-latte tokyo-night\" style=\"background-color:#eff1f5;--shiki-dark-bg:#1a1b26;color:#4c4f69;--shiki-dark:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"ts\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#8839EF;font-style:inherit;--shiki-dark:#9D7CD8;--shiki-dark-font-style:italic\">const\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#BB9AF7\"> EVENTS\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\"> =\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#4C4F69;--shiki-dark:#73DACA\">  PUSHSTATE\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\">:\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\"> '\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#9ECE6A\">pushstate\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\">'\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#4C4F69;--shiki-dark:#73DACA\">  POPSTATE\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\">:\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\"> '\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#9ECE6A\">popstate\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\">'\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>And with this, we have successfully built a working router for our SPAs!\u003C/p>\n\u003Ch2 id=\"adding-support-to-dynamic-routes-and-query-parameters\">Adding support to dynamic routes and query parameters\u003C/h2>\n\u003Ch3 id=\"dynamic-routes\">Dynamic routes\u003C/h3>\n\u003Cp>So far, we have added support for routes with static names (like \u003Ccode>/about\u003C/code> for example). However, in most cases, we are going to need routes with dynamic segments (for example \u003Ccode>/user/:id\u003C/code>).\u003C/p>\n\u003Cp>To support his, we will use the library \u003Cstrong>path-to-regexp\u003C/strong> and replace this line in \u003Ccode>App.tsx\u003C/code> where we check for equal path names:\u003C/p>\n\u003Cpre class=\"astro-code astro-code-themes catppuccin-latte tokyo-night\" style=\"background-color:#eff1f5;--shiki-dark-bg:#1a1b26;color:#4c4f69;--shiki-dark:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"ts\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#8839EF;font-style:inherit;--shiki-dark:#9D7CD8;--shiki-dark-font-style:italic\">const\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#BB9AF7\"> page\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\"> =\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\"> routes\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\">.\u003C/span>\u003Cspan style=\"color:#1E66F5;font-style:italic;--shiki-dark:#7AA2F7;--shiki-dark-font-style:inherit\">find\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">(\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\">(\u003C/span>\u003Cspan style=\"color:#E64553;font-style:italic;--shiki-dark:#E0AF68;--shiki-dark-font-style:inherit\">route\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\">)\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#BB9AF7\"> =>\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\"> route\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\">.\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#7DCFFF\">path\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#BB9AF7\"> ===\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\"> currentPathname\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">)\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\">?.\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#7DCFFF\">element\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>With this one:\u003C/p>\n\u003Cpre class=\"astro-code astro-code-themes catppuccin-latte tokyo-night\" style=\"background-color:#eff1f5;--shiki-dark-bg:#1a1b26;color:#4c4f69;--shiki-dark:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"ts\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#8839EF;--shiki-dark:#7DCFFF\">import\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\"> {\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#0DB9D7\"> match\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\"> }\u003C/span>\u003Cspan style=\"color:#8839EF;--shiki-dark:#7DCFFF\"> from\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\"> '\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#9ECE6A\">path-to-regexp\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\">'\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#8839EF;font-style:inherit;--shiki-dark:#9D7CD8;--shiki-dark-font-style:italic\">let\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#BB9AF7\"> params\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\">:\u003C/span>\u003Cspan style=\"color:#DF8E1D;font-style:italic;--shiki-dark:#C0CAF5;--shiki-dark-font-style:inherit\"> Record\u003C/span>\u003Cspan style=\"color:#04A5E5;--shiki-dark:#89DDFF\">&#x3C;\u003C/span>\u003Cspan style=\"color:#8839EF;--shiki-dark:#0DB9D7\">string\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">,\u003C/span>\u003Cspan style=\"color:#8839EF;--shiki-dark:#0DB9D7\"> string\u003C/span>\u003Cspan style=\"color:#04A5E5;--shiki-dark:#89DDFF\">>\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\"> =\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\"> {}\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#8839EF;font-style:inherit;--shiki-dark:#9D7CD8;--shiki-dark-font-style:italic\">let\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#BB9AF7\"> pathname\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\">:\u003C/span>\u003Cspan style=\"color:#8839EF;--shiki-dark:#0DB9D7\"> string\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\"> =\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\"> ''\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#8839EF;font-style:inherit;--shiki-dark:#9D7CD8;--shiki-dark-font-style:italic\">const\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#BB9AF7\"> page\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\"> =\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\"> routesToUse\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\">.\u003C/span>\u003Cspan style=\"color:#1E66F5;font-style:italic;--shiki-dark:#7AA2F7;--shiki-dark-font-style:inherit\">find\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">(\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\">(\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">{\u003C/span>\u003Cspan style=\"color:#E64553;font-style:italic;--shiki-dark:#E0AF68;--shiki-dark-font-style:inherit\"> path\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\"> }\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\">)\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#BB9AF7\"> =>\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#8839EF;--shiki-dark:#BB9AF7\">  if\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\"> (\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\">path\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#BB9AF7\"> ===\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\"> currentPathname\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">) \u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\">{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\">    pathname\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\"> =\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\"> path\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#8839EF;font-style:inherit;--shiki-dark:#BB9AF7;--shiki-dark-font-style:italic\">    return\u003C/span>\u003Cspan style=\"color:#FE640B;--shiki-dark:#FF9E64\"> true\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#8839EF;font-style:inherit;--shiki-dark:#9D7CD8;--shiki-dark-font-style:italic\">  const\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#BB9AF7\"> matcherUrl\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\"> =\u003C/span>\u003Cspan style=\"color:#1E66F5;font-style:italic;--shiki-dark:#7AA2F7;--shiki-dark-font-style:inherit\"> match\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">(\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\">path\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">,\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\"> {\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#73DACA\"> decode\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\">:\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\"> decodeURIComponent\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\"> }\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">)\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#8839EF;font-style:inherit;--shiki-dark:#9D7CD8;--shiki-dark-font-style:italic\">  const\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#BB9AF7\"> matched\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\"> =\u003C/span>\u003Cspan style=\"color:#1E66F5;font-style:italic;--shiki-dark:#7AA2F7;--shiki-dark-font-style:inherit\"> matcherUrl\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">(\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\">currentLocation\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\">.\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#7DCFFF\">path\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">)\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#8839EF;--shiki-dark:#BB9AF7\">  if\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\"> (\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#BB9AF7\">!\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\">matched\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">) \u003C/span>\u003Cspan style=\"color:#8839EF;font-style:inherit;--shiki-dark:#BB9AF7;--shiki-dark-font-style:italic\">return\u003C/span>\u003Cspan style=\"color:#FE640B;--shiki-dark:#FF9E64\"> false\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\">  params\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\"> =\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\"> matched\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\">.\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#7DCFFF\">params\u003C/span>\u003Cspan style=\"color:#8839EF;--shiki-dark:#89DDFF\"> as\u003C/span>\u003Cspan style=\"color:#DF8E1D;font-style:italic;--shiki-dark:#C0CAF5;--shiki-dark-font-style:inherit\"> Record\u003C/span>\u003Cspan style=\"color:#04A5E5;--shiki-dark:#89DDFF\">&#x3C;\u003C/span>\u003Cspan style=\"color:#8839EF;--shiki-dark:#0DB9D7\">string\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">,\u003C/span>\u003Cspan style=\"color:#8839EF;--shiki-dark:#0DB9D7\"> string\u003C/span>\u003Cspan style=\"color:#04A5E5;--shiki-dark:#89DDFF\">>\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\">  pathname\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\"> =\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\"> path\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#8839EF;font-style:inherit;--shiki-dark:#BB9AF7;--shiki-dark-font-style:italic\">  return\u003C/span>\u003Cspan style=\"color:#FE640B;--shiki-dark:#FF9E64\"> true\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\">}\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">)\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\">?.\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#7DCFFF\">element\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">;\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Where \u003Ccode>params\u003C/code> will contain the values of the dynamic segments. For example, if the user is trying to access the route \u003Ccode>/user/123\u003C/code>, this will match the route \u003Ccode>/user/:id\u003C/code> and \u003Ccode>params\u003C/code> will be an object with a value of \u003Ccode>{id: '123'}\u003C/code>. We will also keep the value for the original path in \u003Ccode>pathname\u003C/code> (in the previous example it would be \u003Ccode>/user/:id\u003C/code>) since it might be useful.\u003C/p>\n\u003Ch3 id=\"query-parameters\">Query parameters\u003C/h3>\n\u003Cp>Additionally, we’ll also need to support query parameters. For this, we can start by implementing a helper function that will get the query parammeters (also called search parameters) from the current location:\u003C/p>\n\u003Cpre class=\"astro-code astro-code-themes catppuccin-latte tokyo-night\" style=\"background-color:#eff1f5;--shiki-dark-bg:#1a1b26;color:#4c4f69;--shiki-dark:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"ts\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#8839EF;--shiki-dark:#7DCFFF\">export\u003C/span>\u003Cspan style=\"color:#8839EF;font-style:inherit;--shiki-dark:#9D7CD8;--shiki-dark-font-style:italic\"> const\u003C/span>\u003Cspan style=\"color:#1E66F5;font-style:italic;--shiki-dark:#7AA2F7;--shiki-dark-font-style:inherit\"> getQueryParams\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\"> =\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\"> ()\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#BB9AF7\"> =>\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#8839EF;font-style:inherit;--shiki-dark:#9D7CD8;--shiki-dark-font-style:italic\">  const\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#BB9AF7\"> searchParams\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\"> =\u003C/span>\u003Cspan style=\"color:#8839EF;font-weight:bold;--shiki-dark:#89DDFF;--shiki-dark-font-weight:inherit\"> new\u003C/span>\u003Cspan style=\"color:#1E66F5;font-style:italic;--shiki-dark:#7AA2F7;--shiki-dark-font-style:inherit\"> URLSearchParams\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">(\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\">window\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\">.\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\">location\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\">.\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#7DCFFF\">search\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">)\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#8839EF;font-style:inherit;--shiki-dark:#9D7CD8;--shiki-dark-font-style:italic\">  const\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#BB9AF7\"> query\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\"> =\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\"> {}\u003C/span>\u003Cspan style=\"color:#8839EF;--shiki-dark:#89DDFF\"> as\u003C/span>\u003Cspan style=\"color:#DF8E1D;font-style:italic;--shiki-dark:#C0CAF5;--shiki-dark-font-style:inherit\"> Record\u003C/span>\u003Cspan style=\"color:#04A5E5;--shiki-dark:#89DDFF\">&#x3C;\u003C/span>\u003Cspan style=\"color:#8839EF;--shiki-dark:#0DB9D7\">string\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">,\u003C/span>\u003Cspan style=\"color:#8839EF;--shiki-dark:#0DB9D7\"> string\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\"> |\u003C/span>\u003Cspan style=\"color:#8839EF;--shiki-dark:#0DB9D7\"> string\u003C/span>\u003Cspan style=\"color:#DF8E1D;font-style:italic;--shiki-dark:#9ABDF5;--shiki-dark-font-style:inherit\">[]\u003C/span>\u003Cspan style=\"color:#04A5E5;--shiki-dark:#89DDFF\">>\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#8839EF;--shiki-dark:#BB9AF7\">  for\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\"> (\u003C/span>\u003Cspan style=\"color:#8839EF;font-style:inherit;--shiki-dark:#9D7CD8;--shiki-dark-font-style:italic\">const\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\"> [\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#BB9AF7\">key\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">,\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#BB9AF7\"> value\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">]\u003C/span>\u003Cspan style=\"color:#8839EF;--shiki-dark:#89DDFF\"> of\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\"> searchParams\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\">.\u003C/span>\u003Cspan style=\"color:#1E66F5;font-style:italic;--shiki-dark:#7AA2F7;--shiki-dark-font-style:inherit\">entries\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">()) \u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\">{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#8839EF;--shiki-dark:#BB9AF7\">    if\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\"> (\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#BB9AF7\">!\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\">query\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">[\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#7DCFFF\">key\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">]) \u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\">{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\">      query\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">[\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#7DCFFF\">key\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">] \u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\">=\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\"> value\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\">    }\u003C/span>\u003Cspan style=\"color:#8839EF;--shiki-dark:#BB9AF7\"> else\u003C/span>\u003Cspan style=\"color:#8839EF;--shiki-dark:#BB9AF7\"> if\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\"> (\u003C/span>\u003Cspan style=\"color:#8839EF;--shiki-dark:#89DDFF\">typeof\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\"> query\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">[\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#7DCFFF\">key\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">] \u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#BB9AF7\">===\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\"> '\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#9ECE6A\">string\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\">'\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">) \u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\">{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\">      query\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">[\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#7DCFFF\">key\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">] \u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\">=\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\"> [\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#7DCFFF\">query\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">[\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#7DCFFF\">key\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">] \u003C/span>\u003Cspan style=\"color:#8839EF;--shiki-dark:#89DDFF\">as\u003C/span>\u003Cspan style=\"color:#8839EF;--shiki-dark:#0DB9D7\"> string\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">,\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#7DCFFF\"> value\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">]\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\">    }\u003C/span>\u003Cspan style=\"color:#8839EF;--shiki-dark:#BB9AF7\"> else\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\">      query\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">[\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#7DCFFF\">key\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">] \u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\">=\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\"> [\u003C/span>\u003Cspan style=\"color:#179299;font-weight:inherit;--shiki-dark:#F7768E;--shiki-dark-font-weight:bold\">...\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#7DCFFF\">query\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">[\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#7DCFFF\">key\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">]\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">,\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#7DCFFF\"> value\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">]\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#8839EF;font-style:inherit;--shiki-dark:#BB9AF7;--shiki-dark-font-style:italic\">  return\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\"> query\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\">}\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">;\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>This function will return an object whose values will be either a string or an array of strings, depending on whether the corresponding parameter key has multiple values or not. For example, a query parameter of \u003Ccode>?foo=1&#x26;foo=2&#x26;bar=abc\u003C/code> will be parsed as \u003Ccode>{ foo: ['1', '2'], bar: 'abc' }\u003C/code>.\u003C/p>\n\u003Cp>Now, we can add this to the event subscription, so the application is re-rendered when there’s a query change. For this purpose, I renamed the previous \u003Ccode>currentPathname\u003C/code> to \u003Ccode>currentLocation\u003C/code>, which will contain both the current path and query:\u003C/p>\n\u003Cpre class=\"astro-code astro-code-themes catppuccin-latte tokyo-night\" style=\"background-color:#eff1f5;--shiki-dark-bg:#1a1b26;color:#4c4f69;--shiki-dark:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"ts\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#8839EF;font-style:inherit;--shiki-dark:#9D7CD8;--shiki-dark-font-style:italic\">const\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\"> [\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#BB9AF7\">currentLocation\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">,\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#BB9AF7\"> setCurrentLocation\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">]\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\"> =\u003C/span>\u003Cspan style=\"color:#1E66F5;font-style:italic;--shiki-dark:#7AA2F7;--shiki-dark-font-style:inherit\"> useState\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">(\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\">{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#4C4F69;--shiki-dark:#73DACA\">  path\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\">:\u003C/span>\u003Cspan style=\"color:#1E66F5;font-style:italic;--shiki-dark:#7AA2F7;--shiki-dark-font-style:inherit\"> getCurrentPath\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">()\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#4C4F69;--shiki-dark:#73DACA\">  query\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\">:\u003C/span>\u003Cspan style=\"color:#1E66F5;font-style:italic;--shiki-dark:#7AA2F7;--shiki-dark-font-style:inherit\"> getQueryParams\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">()\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\">}\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">)\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#1E66F5;font-style:italic;--shiki-dark:#7AA2F7;--shiki-dark-font-style:inherit\">useEffect\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">(\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\">()\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#BB9AF7\"> =>\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#8839EF;font-style:inherit;--shiki-dark:#9D7CD8;--shiki-dark-font-style:italic\">  const\u003C/span>\u003Cspan style=\"color:#1E66F5;font-style:italic;--shiki-dark:#7AA2F7;--shiki-dark-font-style:inherit\"> onLocationChange\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\"> =\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\"> ()\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#BB9AF7\"> =>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#1E66F5;font-style:italic;--shiki-dark:#7AA2F7;--shiki-dark-font-style:inherit\">    setCurrentLocation\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">(\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\">{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#4C4F69;--shiki-dark:#73DACA\">      path\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\">:\u003C/span>\u003Cspan style=\"color:#1E66F5;font-style:italic;--shiki-dark:#7AA2F7;--shiki-dark-font-style:inherit\"> getCurrentPath\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">()\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#4C4F69;--shiki-dark:#73DACA\">      query\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\">:\u003C/span>\u003Cspan style=\"color:#1E66F5;font-style:italic;--shiki-dark:#7AA2F7;--shiki-dark-font-style:inherit\"> getQueryParams\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">()\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\">    }\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">)\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\">  window\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\">.\u003C/span>\u003Cspan style=\"color:#1E66F5;font-style:italic;--shiki-dark:#7AA2F7;--shiki-dark-font-style:inherit\">addEventListener\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">(\u003C/span>\u003Cspan style=\"color:#FE640B;--shiki-dark:#0DB9D7\">EVENTS\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\">.\u003C/span>\u003Cspan style=\"color:#FE640B;--shiki-dark:#FF9E64\">PUSHSTATE\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">,\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\"> onLocationChange\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">)\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\">  window\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\">.\u003C/span>\u003Cspan style=\"color:#1E66F5;font-style:italic;--shiki-dark:#7AA2F7;--shiki-dark-font-style:inherit\">addEventListener\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">(\u003C/span>\u003Cspan style=\"color:#FE640B;--shiki-dark:#0DB9D7\">EVENTS\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\">.\u003C/span>\u003Cspan style=\"color:#FE640B;--shiki-dark:#FF9E64\">POPSTATE\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">,\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\"> onLocationChange\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">)\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#8839EF;font-style:inherit;--shiki-dark:#BB9AF7;--shiki-dark-font-style:italic\">  return\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\"> ()\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#BB9AF7\"> =>\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\">    window\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\">.\u003C/span>\u003Cspan style=\"color:#1E66F5;font-style:italic;--shiki-dark:#7AA2F7;--shiki-dark-font-style:inherit\">removeEventListener\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">(\u003C/span>\u003Cspan style=\"color:#FE640B;--shiki-dark:#0DB9D7\">EVENTS\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\">.\u003C/span>\u003Cspan style=\"color:#FE640B;--shiki-dark:#FF9E64\">PUSHSTATE\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">,\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\"> onLocationChange\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">)\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\">    window\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\">.\u003C/span>\u003Cspan style=\"color:#1E66F5;font-style:italic;--shiki-dark:#7AA2F7;--shiki-dark-font-style:inherit\">removeEventListener\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">(\u003C/span>\u003Cspan style=\"color:#FE640B;--shiki-dark:#0DB9D7\">EVENTS\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\">.\u003C/span>\u003Cspan style=\"color:#FE640B;--shiki-dark:#FF9E64\">POPSTATE\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">,\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\"> onLocationChange\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">)\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\">  }\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\">}\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">,\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\"> [])\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">;\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch3 id=\"refactoring-the-navigation\">Refactoring the navigation\u003C/h3>\n\u003Cp>These additions will allow our application to render the right route when the requested url contains dynamic segments and also keep in the state the query parameters.\u003C/p>\n\u003Cp>However, if we want to link to a dynamic route or add query parameters to a link programatically, we’ll need to refactor our \u003Ccode>Link\u003C/code> component so it’s able to link to an \u003Ccode>href\u003C/code> given any values of path, dynamic segments and query parameters. The function to do this conversion would be something like this:\u003C/p>\n\u003Cpre class=\"astro-code astro-code-themes catppuccin-latte tokyo-night\" style=\"background-color:#eff1f5;--shiki-dark-bg:#1a1b26;color:#4c4f69;--shiki-dark:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"ts\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#8839EF;--shiki-dark:#7DCFFF\">import\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\"> {\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#0DB9D7\"> compile\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\"> }\u003C/span>\u003Cspan style=\"color:#8839EF;--shiki-dark:#7DCFFF\"> from\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\"> '\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#9ECE6A\">path-to-regexp\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\">'\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#8839EF;font-style:inherit;--shiki-dark:#9D7CD8;--shiki-dark-font-style:italic\">const\u003C/span>\u003Cspan style=\"color:#1E66F5;font-style:italic;--shiki-dark:#7AA2F7;--shiki-dark-font-style:inherit\"> compilePathWithSegments\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\"> =\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\"> (\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E64553;font-style:italic;--shiki-dark:#E0AF68;--shiki-dark-font-style:inherit\">  pathname\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\">:\u003C/span>\u003Cspan style=\"color:#8839EF;--shiki-dark:#0DB9D7\"> string\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E64553;font-style:italic;--shiki-dark:#E0AF68;--shiki-dark-font-style:inherit\">  segments\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\">:\u003C/span>\u003Cspan style=\"color:#DF8E1D;font-style:italic;--shiki-dark:#C0CAF5;--shiki-dark-font-style:inherit\"> Record\u003C/span>\u003Cspan style=\"color:#04A5E5;--shiki-dark:#89DDFF\">&#x3C;\u003C/span>\u003Cspan style=\"color:#8839EF;--shiki-dark:#0DB9D7\">string\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">,\u003C/span>\u003Cspan style=\"color:#8839EF;--shiki-dark:#0DB9D7\"> string\u003C/span>\u003Cspan style=\"color:#04A5E5;--shiki-dark:#89DDFF\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">)\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#BB9AF7\"> =>\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#8839EF;font-style:inherit;--shiki-dark:#9D7CD8;--shiki-dark-font-style:italic\">  const\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#BB9AF7\"> toPath\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\"> =\u003C/span>\u003Cspan style=\"color:#1E66F5;font-style:italic;--shiki-dark:#7AA2F7;--shiki-dark-font-style:inherit\"> compile\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">(\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\">pathname\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">,\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\"> {\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#73DACA\"> encode\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\">:\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\"> encodeURIComponent\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\"> }\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">)\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#8839EF;font-style:inherit;--shiki-dark:#BB9AF7;--shiki-dark-font-style:italic\">  return\u003C/span>\u003Cspan style=\"color:#1E66F5;font-style:italic;--shiki-dark:#7AA2F7;--shiki-dark-font-style:inherit\"> toPath\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">(\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\">segments\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">)\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\">}\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#8839EF;--shiki-dark:#7DCFFF\">export\u003C/span>\u003Cspan style=\"color:#8839EF;--shiki-dark:#BB9AF7\"> type\u003C/span>\u003Cspan style=\"color:#DF8E1D;font-style:italic;--shiki-dark:#C0CAF5;--shiki-dark-font-style:inherit\"> PathObject\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\"> =\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#4C4F69;font-style:italic;--shiki-dark:#73DACA;--shiki-dark-font-style:inherit\">  pathname\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\">:\u003C/span>\u003Cspan style=\"color:#8839EF;--shiki-dark:#0DB9D7\"> string\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#4C4F69;font-style:italic;--shiki-dark:#73DACA;--shiki-dark-font-style:inherit\">  pathSegments\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\">?:\u003C/span>\u003Cspan style=\"color:#DF8E1D;font-style:italic;--shiki-dark:#C0CAF5;--shiki-dark-font-style:inherit\"> Record\u003C/span>\u003Cspan style=\"color:#04A5E5;--shiki-dark:#89DDFF\">&#x3C;\u003C/span>\u003Cspan style=\"color:#8839EF;--shiki-dark:#0DB9D7\">string\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">,\u003C/span>\u003Cspan style=\"color:#8839EF;--shiki-dark:#0DB9D7\"> string\u003C/span>\u003Cspan style=\"color:#04A5E5;--shiki-dark:#89DDFF\">>\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#4C4F69;font-style:italic;--shiki-dark:#73DACA;--shiki-dark-font-style:inherit\">  query\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\">?:\u003C/span>\u003Cspan style=\"color:#DF8E1D;font-style:italic;--shiki-dark:#C0CAF5;--shiki-dark-font-style:inherit\"> Record\u003C/span>\u003Cspan style=\"color:#04A5E5;--shiki-dark:#89DDFF\">&#x3C;\u003C/span>\u003Cspan style=\"color:#8839EF;--shiki-dark:#0DB9D7\">string\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">,\u003C/span>\u003Cspan style=\"color:#8839EF;--shiki-dark:#0DB9D7\"> string\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\"> |\u003C/span>\u003Cspan style=\"color:#8839EF;--shiki-dark:#0DB9D7\"> string\u003C/span>\u003Cspan style=\"color:#DF8E1D;font-style:italic;--shiki-dark:#9ABDF5;--shiki-dark-font-style:inherit\">[]\u003C/span>\u003Cspan style=\"color:#04A5E5;--shiki-dark:#89DDFF\">>\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\">}\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#8839EF;--shiki-dark:#7DCFFF\">export\u003C/span>\u003Cspan style=\"color:#8839EF;--shiki-dark:#BB9AF7\"> function\u003C/span>\u003Cspan style=\"color:#1E66F5;font-style:italic;--shiki-dark:#7AA2F7;--shiki-dark-font-style:inherit\"> getRelativeHref\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\">(\u003C/span>\u003Cspan style=\"color:#E64553;font-style:italic;--shiki-dark:#E0AF68;--shiki-dark-font-style:inherit\">url\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\">:\u003C/span>\u003Cspan style=\"color:#8839EF;--shiki-dark:#0DB9D7\"> string\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\"> |\u003C/span>\u003Cspan style=\"color:#DF8E1D;font-style:italic;--shiki-dark:#C0CAF5;--shiki-dark-font-style:inherit\"> PathObject\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\">)\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#8839EF;--shiki-dark:#BB9AF7\">  if\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\"> (\u003C/span>\u003Cspan style=\"color:#8839EF;--shiki-dark:#89DDFF\">typeof\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\"> url\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#BB9AF7\"> ===\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\"> '\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#9ECE6A\">string\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\">'\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">) \u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\">{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#8839EF;font-style:inherit;--shiki-dark:#BB9AF7;--shiki-dark-font-style:italic\">    return\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\"> url\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#8839EF;--shiki-dark:#BB9AF7\">  if\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\"> (\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#BB9AF7\">!\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\">url\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\">.\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#7DCFFF\">pathname\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">) \u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\">{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#8839EF;font-style:inherit;--shiki-dark:#BB9AF7;--shiki-dark-font-style:italic\">    return\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\"> ''\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#8839EF;font-style:inherit;--shiki-dark:#9D7CD8;--shiki-dark-font-style:italic\">  let\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#BB9AF7\"> compiledPathname\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\"> =\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\"> url\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\">.\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#7DCFFF\">pathname\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#8839EF;--shiki-dark:#BB9AF7\">  if\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\"> (\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\">url\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\">.\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#7DCFFF\">pathSegments\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">) \u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\">{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\">    compiledPathname\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\"> =\u003C/span>\u003Cspan style=\"color:#1E66F5;font-style:italic;--shiki-dark:#7AA2F7;--shiki-dark-font-style:inherit\"> compilePathWithSegments\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">(\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\">url\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\">.\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#7DCFFF\">pathname\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">,\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\"> url\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\">.\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#7DCFFF\">pathSegments\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">)\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#8839EF;font-style:inherit;--shiki-dark:#9D7CD8;--shiki-dark-font-style:italic\">  const\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#BB9AF7\"> searchParams\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\"> =\u003C/span>\u003Cspan style=\"color:#8839EF;font-weight:bold;--shiki-dark:#89DDFF;--shiki-dark-font-weight:inherit\"> new\u003C/span>\u003Cspan style=\"color:#1E66F5;font-style:italic;--shiki-dark:#7AA2F7;--shiki-dark-font-style:inherit\"> URLSearchParams\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">()\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#8839EF;--shiki-dark:#BB9AF7\">  if\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\"> (\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\">url\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\">.\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#7DCFFF\">query\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">) \u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\">{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\">    Object\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\">.\u003C/span>\u003Cspan style=\"color:#1E66F5;font-style:italic;--shiki-dark:#7AA2F7;--shiki-dark-font-style:inherit\">entries\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">(\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\">url\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\">.\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#7DCFFF\">query\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">)\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\">.\u003C/span>\u003Cspan style=\"color:#1E66F5;font-style:italic;--shiki-dark:#7AA2F7;--shiki-dark-font-style:inherit\">forEach\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">(\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\">(\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">[\u003C/span>\u003Cspan style=\"color:#E64553;font-style:italic;--shiki-dark:#E0AF68;--shiki-dark-font-style:inherit\">key\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">,\u003C/span>\u003Cspan style=\"color:#E64553;font-style:italic;--shiki-dark:#E0AF68;--shiki-dark-font-style:inherit\"> value\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">]\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\">)\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#BB9AF7\"> =>\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#8839EF;--shiki-dark:#BB9AF7\">      if\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\"> (\u003C/span>\u003Cspan style=\"color:#8839EF;--shiki-dark:#89DDFF\">typeof\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\"> value\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#BB9AF7\"> ===\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\"> '\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#9ECE6A\">string\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\">'\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">) \u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\">{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\">        searchParams\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\">.\u003C/span>\u003Cspan style=\"color:#1E66F5;font-style:italic;--shiki-dark:#7AA2F7;--shiki-dark-font-style:inherit\">append\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">(\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\">key\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">,\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\"> value\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">)\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\">      }\u003C/span>\u003Cspan style=\"color:#8839EF;--shiki-dark:#BB9AF7\"> else\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\">        value\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\">.\u003C/span>\u003Cspan style=\"color:#1E66F5;font-style:italic;--shiki-dark:#7AA2F7;--shiki-dark-font-style:inherit\">forEach\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">(\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\">(\u003C/span>\u003Cspan style=\"color:#E64553;font-style:italic;--shiki-dark:#E0AF68;--shiki-dark-font-style:inherit\">val\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\">)\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#BB9AF7\"> =>\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\"> searchParams\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\">.\u003C/span>\u003Cspan style=\"color:#1E66F5;font-style:italic;--shiki-dark:#7AA2F7;--shiki-dark-font-style:inherit\">append\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">(\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\">key\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">,\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\"> val\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">))\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\">      }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\">    }\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">)\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#8839EF;font-style:inherit;--shiki-dark:#BB9AF7;--shiki-dark-font-style:italic\">  return\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\"> searchParams\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\">.\u003C/span>\u003Cspan style=\"color:#1E66F5;font-style:italic;--shiki-dark:#7AA2F7;--shiki-dark-font-style:inherit\">toString\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">()\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#179299;--shiki-dark:#BB9AF7\">    ?\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\"> `\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#7DCFFF\">${\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\">compiledPathname\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#7DCFFF\">}\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#9ECE6A\">?\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#7DCFFF\">${\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\">searchParams\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#7DCFFF\">}\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\">`\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#179299;--shiki-dark:#BB9AF7\">    :\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\"> compiledPathname\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>The function \u003Ccode>getRelativeHref\u003C/code> will accept a URL as a string, for example \u003Ccode>/about\u003C/code>, and just return it. Alternatively, the url can be passed as an object containing its pathname and, optionally, its dynamic segments and query parameters. For example: \u003Ccode>{ pathname: '/user/:id', pathSegments: { id: 'foo' }, query: { search: 'bar' }}\u003C/code>.\u003C/p>\n\u003Cp>Then we can add this functionality to the \u003Ccode>Link\u003C/code> component:\u003C/p>\n\u003Cpre class=\"astro-code astro-code-themes catppuccin-latte tokyo-night\" style=\"background-color:#eff1f5;--shiki-dark-bg:#1a1b26;color:#4c4f69;--shiki-dark:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"tsx\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#9CA0B0;font-style:italic;--shiki-dark:#51597D;--shiki-dark-font-style:italic\">// Link.tsx\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#8839EF;--shiki-dark:#BB9AF7\">function\u003C/span>\u003Cspan style=\"color:#1E66F5;font-style:italic;--shiki-dark:#7AA2F7;--shiki-dark-font-style:inherit\"> Link\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\">(\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">{\u003C/span>\u003Cspan style=\"color:#E64553;font-style:italic;--shiki-dark:#E0AF68;--shiki-dark-font-style:inherit\"> target\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">,\u003C/span>\u003Cspan style=\"color:#E64553;font-style:italic;--shiki-dark:#E0AF68;--shiki-dark-font-style:inherit\"> to\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">,\u003C/span>\u003Cspan style=\"color:#179299;font-weight:inherit;--shiki-dark:#F7768E;--shiki-dark-font-weight:bold\"> ...\u003C/span>\u003Cspan style=\"color:#E64553;font-style:italic;--shiki-dark:#E0AF68;--shiki-dark-font-style:inherit\">props\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\"> }\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\">:\u003C/span>\u003Cspan style=\"color:#DF8E1D;font-style:italic;--shiki-dark:#C0CAF5;--shiki-dark-font-style:inherit\"> LinkProps\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\">)\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#8839EF;font-style:inherit;--shiki-dark:#9D7CD8;--shiki-dark-font-style:italic\">  const\u003C/span>\u003Cspan style=\"color:#FE640B;--shiki-dark:#BB9AF7\"> href\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\"> =\u003C/span>\u003Cspan style=\"color:#1E66F5;font-style:italic;--shiki-dark:#7AA2F7;--shiki-dark-font-style:inherit\"> getRelativeHref\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">(\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\">to\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">)\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#8839EF;font-style:inherit;--shiki-dark:#9D7CD8;--shiki-dark-font-style:italic\">  const\u003C/span>\u003Cspan style=\"color:#1E66F5;font-style:italic;--shiki-dark:#7AA2F7;--shiki-dark-font-style:inherit\"> handleClick\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\"> =\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\"> (\u003C/span>\u003Cspan style=\"color:#E64553;font-style:italic;--shiki-dark:#E0AF68;--shiki-dark-font-style:inherit\">event\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\">:\u003C/span>\u003Cspan style=\"color:#DF8E1D;font-style:italic;--shiki-dark:#C0CAF5;--shiki-dark-font-style:inherit\"> MouseEvent\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\">)\u003C/span>\u003Cspan style=\"color:#8839EF;--shiki-dark:#BB9AF7\"> =>\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9CA0B0;font-style:italic;--shiki-dark:#51597D;--shiki-dark-font-style:italic\">    // {... same as before ...}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#8839EF;--shiki-dark:#BB9AF7\">    if\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\"> (\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\">isMainEvent\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#BB9AF7\"> &#x26;&#x26;\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\"> isManageableEvent\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#BB9AF7\"> &#x26;&#x26;\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#BB9AF7\"> !\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\">isModifiedEvent\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">) \u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\">{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\">      event\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\">.\u003C/span>\u003Cspan style=\"color:#1E66F5;font-style:italic;--shiki-dark:#7AA2F7;--shiki-dark-font-style:inherit\">preventDefault\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">()\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#1E66F5;font-style:italic;--shiki-dark:#7AA2F7;--shiki-dark-font-style:inherit\">      dispatchPushStateEvent\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">(\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\">href\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">)\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\">  }\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#8839EF;font-style:inherit;--shiki-dark:#BB9AF7;--shiki-dark-font-style:italic\">  return\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\"> &#x3C;\u003C/span>\u003Cspan style=\"color:#1E66F5;--shiki-dark:#F7768E\">a\u003C/span>\u003Cspan style=\"color:#DF8E1D;--shiki-dark:#BB9AF7\"> onClick\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\">=\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#7DCFFF\">{\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\">handleClick\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#7DCFFF\">}\u003C/span>\u003Cspan style=\"color:#DF8E1D;--shiki-dark:#BB9AF7\"> href\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\">=\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#7DCFFF\">{\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\">href\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#7DCFFF\">}\u003C/span>\u003Cspan style=\"color:#DF8E1D;--shiki-dark:#BB9AF7\"> target\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\">=\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#7DCFFF\">{\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\">target\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#7DCFFF\">}\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#7DCFFF\"> {\u003C/span>\u003Cspan style=\"color:#179299;font-weight:inherit;--shiki-dark:#F7768E;--shiki-dark-font-weight:bold\">...\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\">props\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#7DCFFF\">}\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\"> />\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"the-router-context-provider\">The router context provider\u003C/h2>\n\u003Cp>Now that we have all the basic functionality of the routing in place, we can extract this logic into a React context so we can consume the routing state in any component of the application.\u003C/p>\n\u003Cp>Let’s start by creating the context:\u003C/p>\n\u003Cpre class=\"astro-code astro-code-themes catppuccin-latte tokyo-night\" style=\"background-color:#eff1f5;--shiki-dark-bg:#1a1b26;color:#4c4f69;--shiki-dark:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"tsx\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#9CA0B0;font-style:italic;--shiki-dark:#51597D;--shiki-dark-font-style:italic\">// context.ts\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#8839EF;--shiki-dark:#7DCFFF\">import\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\"> {\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#0DB9D7\"> createContext\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">,\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#0DB9D7\"> useContext\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\"> }\u003C/span>\u003Cspan style=\"color:#8839EF;--shiki-dark:#7DCFFF\"> from\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\"> '\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#9ECE6A\">react\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\">'\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#8839EF;--shiki-dark:#BB9AF7\">interface\u003C/span>\u003Cspan style=\"color:#DF8E1D;font-style:italic;--shiki-dark:#C0CAF5;--shiki-dark-font-style:inherit\"> RouterContext\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\">  pathname\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\">:\u003C/span>\u003Cspan style=\"color:#8839EF;--shiki-dark:#0DB9D7\"> string\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#1E66F5;font-style:italic;--shiki-dark:#7AA2F7;--shiki-dark-font-style:inherit\">  navigate\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\">:\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\"> (\u003C/span>\u003Cspan style=\"color:#E64553;font-style:italic;--shiki-dark:#E0AF68;--shiki-dark-font-style:inherit\">to\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\">:\u003C/span>\u003Cspan style=\"color:#8839EF;--shiki-dark:#0DB9D7\"> string\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\">)\u003C/span>\u003Cspan style=\"color:#8839EF;--shiki-dark:#BB9AF7\"> =>\u003C/span>\u003Cspan style=\"color:#8839EF;--shiki-dark:#0DB9D7\"> void\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#8839EF;--shiki-dark:#7DCFFF\">export\u003C/span>\u003Cspan style=\"color:#8839EF;font-style:inherit;--shiki-dark:#9D7CD8;--shiki-dark-font-style:italic\"> const\u003C/span>\u003Cspan style=\"color:#FE640B;--shiki-dark:#BB9AF7\"> RouterContext\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\"> =\u003C/span>\u003Cspan style=\"color:#1E66F5;font-style:italic;--shiki-dark:#7AA2F7;--shiki-dark-font-style:inherit\"> createContext\u003C/span>\u003Cspan style=\"color:#04A5E5;--shiki-dark:#89DDFF\">&#x3C;\u003C/span>\u003Cspan style=\"color:#DF8E1D;font-style:italic;--shiki-dark:#C0CAF5;--shiki-dark-font-style:inherit\">RouterContext\u003C/span>\u003Cspan style=\"color:#04A5E5;--shiki-dark:#89DDFF\">>\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">(\u003C/span>\u003Cspan style=\"color:#D20F39;--shiki-dark:#FF9E64\">null\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#BB9AF7\">!\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">)\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#8839EF;--shiki-dark:#7DCFFF\">export\u003C/span>\u003Cspan style=\"color:#8839EF;--shiki-dark:#BB9AF7\"> function\u003C/span>\u003Cspan style=\"color:#1E66F5;font-style:italic;--shiki-dark:#7AA2F7;--shiki-dark-font-style:inherit\"> useRouter\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\">()\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#8839EF;font-style:inherit;--shiki-dark:#BB9AF7;--shiki-dark-font-style:italic\">  return\u003C/span>\u003Cspan style=\"color:#1E66F5;font-style:italic;--shiki-dark:#7AA2F7;--shiki-dark-font-style:inherit\"> useContext\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">(\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\">RouterContext\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">)\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Now we can create a \u003Ccode>Router\u003C/code> component that returns this context and includes all the routing logic:\u003C/p>\n\u003Cpre class=\"astro-code astro-code-themes catppuccin-latte tokyo-night\" style=\"background-color:#eff1f5;--shiki-dark-bg:#1a1b26;color:#4c4f69;--shiki-dark:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"tsx\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#9CA0B0;font-style:italic;--shiki-dark:#51597D;--shiki-dark-font-style:italic\">// Router.tsx\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#8839EF;--shiki-dark:#BB9AF7\">function\u003C/span>\u003Cspan style=\"color:#1E66F5;font-style:italic;--shiki-dark:#7AA2F7;--shiki-dark-font-style:inherit\"> navigate\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\">(\u003C/span>\u003Cspan style=\"color:#E64553;font-style:italic;--shiki-dark:#E0AF68;--shiki-dark-font-style:inherit\">to\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\">:\u003C/span>\u003Cspan style=\"color:#8839EF;--shiki-dark:#0DB9D7\"> string\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\"> |\u003C/span>\u003Cspan style=\"color:#DF8E1D;font-style:italic;--shiki-dark:#C0CAF5;--shiki-dark-font-style:inherit\"> PathObject\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\">)\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#8839EF;font-style:inherit;--shiki-dark:#9D7CD8;--shiki-dark-font-style:italic\">  const\u003C/span>\u003Cspan style=\"color:#FE640B;--shiki-dark:#BB9AF7\"> href\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\"> =\u003C/span>\u003Cspan style=\"color:#1E66F5;font-style:italic;--shiki-dark:#7AA2F7;--shiki-dark-font-style:inherit\"> getRelativeHref\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">(\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\">to\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">)\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#1E66F5;font-style:italic;--shiki-dark:#7AA2F7;--shiki-dark-font-style:inherit\">  dispatchPushStateEvent\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">(\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\">href\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">)\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#8839EF;--shiki-dark:#BB9AF7\">function\u003C/span>\u003Cspan style=\"color:#1E66F5;font-style:italic;--shiki-dark:#7AA2F7;--shiki-dark-font-style:inherit\"> Router\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\">(\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E64553;font-style:italic;--shiki-dark:#E0AF68;--shiki-dark-font-style:inherit\">  routes\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\"> =\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\"> []\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E64553;font-style:italic;--shiki-dark:#E0AF68;--shiki-dark-font-style:inherit\">  defaultElement\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\"> =\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\"> &#x3C;\u003C/span>\u003Cspan style=\"color:#1E66F5;--shiki-dark:#F7768E\">h1\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\">>\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9AA5CE\">404\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\">&#x3C;/\u003C/span>\u003Cspan style=\"color:#1E66F5;--shiki-dark:#F7768E\">h1\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\">>\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">}\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\">:\u003C/span>\u003Cspan style=\"color:#DF8E1D;font-style:italic;--shiki-dark:#C0CAF5;--shiki-dark-font-style:inherit\"> PropsWithChildren\u003C/span>\u003Cspan style=\"color:#04A5E5;--shiki-dark:#89DDFF\">&#x3C;\u003C/span>\u003Cspan style=\"color:#DF8E1D;font-style:italic;--shiki-dark:#C0CAF5;--shiki-dark-font-style:inherit\">Props\u003C/span>\u003Cspan style=\"color:#04A5E5;--shiki-dark:#89DDFF\">>\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\">)\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9CA0B0;font-style:italic;--shiki-dark:#51597D;--shiki-dark-font-style:italic\">  /* \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9CA0B0;font-style:italic;--shiki-dark:#51597D;--shiki-dark-font-style:italic\">  const [currentLocation, setCurrentLocation] = useState({ ...\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9CA0B0;font-style:italic;--shiki-dark:#51597D;--shiki-dark-font-style:italic\">  useEffect(() => { ...\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9CA0B0;font-style:italic;--shiki-dark:#51597D;--shiki-dark-font-style:italic\">  let params: Record&#x3C;string, string> = {};\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9CA0B0;font-style:italic;--shiki-dark:#51597D;--shiki-dark-font-style:italic\">  let pathname: string = '';\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9CA0B0;font-style:italic;--shiki-dark:#51597D;--shiki-dark-font-style:italic\">  const page = routes.find(({ path })) => { ...\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9CA0B0;font-style:italic;--shiki-dark:#51597D;--shiki-dark-font-style:italic\">  */\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#8839EF;font-style:inherit;--shiki-dark:#BB9AF7;--shiki-dark-font-style:italic\">  return\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\"> (\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\">      &#x3C;\u003C/span>\u003Cspan style=\"color:#EA76CB;--shiki-dark:#DE5971\">RouterContext.Provider\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#DF8E1D;--shiki-dark:#BB9AF7\">        value\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\">=\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#7DCFFF\">{\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\">{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\">          pathname\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#4C4F69;--shiki-dark:#73DACA\">          asPath\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\">:\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\"> currentLocation\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\">.\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#7DCFFF\">path\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\">          params\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#4C4F69;--shiki-dark:#73DACA\">          query\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\">:\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\"> currentLocation\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\">.\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#7DCFFF\">query\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\">          navigate\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\">        }\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#7DCFFF\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\">      >\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#7C7F93;--shiki-dark:#7DCFFF\">        {\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\">page\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#BB9AF7\"> ?\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\"> page\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#BB9AF7\"> :\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\"> defaultElement\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#7DCFFF\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\">      &#x3C;/\u003C/span>\u003Cspan style=\"color:#EA76CB;--shiki-dark:#DE5971\">RouterContext.Provider\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">    )\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">;\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"taking-it-a-bit-further-the-route-component\">Taking it a bit further: the Route component\u003C/h2>\n\u003Cp>In order to reduce the level of abstraction, we can define a custom \u003Ccode>Route\u003C/code> component, similar to the equivalent component in React Router. This allows us to use the \u003Ccode>Route\u003C/code> component for each individual route instead of passing a \u003Ccode>routes\u003C/code> object to the \u003Ccode>Router\u003C/code>:\u003C/p>\n\u003Cpre class=\"astro-code astro-code-themes catppuccin-latte tokyo-night\" style=\"background-color:#eff1f5;--shiki-dark-bg:#1a1b26;color:#4c4f69;--shiki-dark:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"tsx\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#8839EF;--shiki-dark:#BB9AF7\">function\u003C/span>\u003Cspan style=\"color:#1E66F5;font-style:italic;--shiki-dark:#7AA2F7;--shiki-dark-font-style:inherit\"> App\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\">()\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9CA0B0;font-style:italic;--shiki-dark:#51597D;--shiki-dark-font-style:italic\">  // ...\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#8839EF;font-style:inherit;--shiki-dark:#BB9AF7;--shiki-dark-font-style:italic\">  return\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\"> (\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\">    &#x3C;\u003C/span>\u003Cspan style=\"color:#EA76CB;--shiki-dark:#DE5971\">Router\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\">      &#x3C;\u003C/span>\u003Cspan style=\"color:#EA76CB;--shiki-dark:#DE5971\">Route\u003C/span>\u003Cspan style=\"color:#DF8E1D;--shiki-dark:#BB9AF7\"> path\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\">=\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\">\"\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#9ECE6A\">/\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\">\"\u003C/span>\u003Cspan style=\"color:#DF8E1D;--shiki-dark:#BB9AF7\"> element\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\">=\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#7DCFFF\">{\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\">&#x3C;\u003C/span>\u003Cspan style=\"color:#EA76CB;--shiki-dark:#DE5971\">HomePage\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\"> />\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#7DCFFF\">}\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\"> />\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\">      &#x3C;\u003C/span>\u003Cspan style=\"color:#EA76CB;--shiki-dark:#DE5971\">Route\u003C/span>\u003Cspan style=\"color:#DF8E1D;--shiki-dark:#BB9AF7\"> path\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\">=\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\">\"\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#9ECE6A\">/about\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\">\"\u003C/span>\u003Cspan style=\"color:#DF8E1D;--shiki-dark:#BB9AF7\"> element\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\">=\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#7DCFFF\">{\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\">&#x3C;\u003C/span>\u003Cspan style=\"color:#EA76CB;--shiki-dark:#DE5971\">AboutPage\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\"> />\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#7DCFFF\">}\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\"> />\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\">    &#x3C;/\u003C/span>\u003Cspan style=\"color:#EA76CB;--shiki-dark:#DE5971\">Router\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">  )\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>This custom \u003Ccode>Route\u003C/code> component, similary to the component in React Router, simply returns \u003Ccode>null\u003C/code>:\u003C/p>\n\u003Cpre class=\"astro-code astro-code-themes catppuccin-latte tokyo-night\" style=\"background-color:#eff1f5;--shiki-dark-bg:#1a1b26;color:#4c4f69;--shiki-dark:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"tsx\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#9CA0B0;font-style:italic;--shiki-dark:#51597D;--shiki-dark-font-style:italic\">// Route.tsx\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#8839EF;--shiki-dark:#7DCFFF\">import\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\"> {\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#0DB9D7\"> ReactNode\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\"> }\u003C/span>\u003Cspan style=\"color:#8839EF;--shiki-dark:#7DCFFF\"> from\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\"> '\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#9ECE6A\">react\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\">'\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#8839EF;--shiki-dark:#7DCFFF\">export\u003C/span>\u003Cspan style=\"color:#8839EF;--shiki-dark:#BB9AF7\"> interface\u003C/span>\u003Cspan style=\"color:#DF8E1D;font-style:italic;--shiki-dark:#C0CAF5;--shiki-dark-font-style:inherit\"> RouteProps\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\">  path\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\">:\u003C/span>\u003Cspan style=\"color:#8839EF;--shiki-dark:#0DB9D7\"> string\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\">  element\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\">:\u003C/span>\u003Cspan style=\"color:#DF8E1D;font-style:italic;--shiki-dark:#C0CAF5;--shiki-dark-font-style:inherit\"> ReactNode\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9CA0B0;font-style:italic;--shiki-dark:#51597D;--shiki-dark-font-style:italic\">// eslint-disable-next-line @typescript-eslint/no-unused-vars\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#8839EF;--shiki-dark:#7DCFFF\">export\u003C/span>\u003Cspan style=\"color:#8839EF;--shiki-dark:#BB9AF7\"> function\u003C/span>\u003Cspan style=\"color:#1E66F5;font-style:italic;--shiki-dark:#7AA2F7;--shiki-dark-font-style:inherit\"> Route\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\">(\u003C/span>\u003Cspan style=\"color:#E64553;font-style:italic;--shiki-dark:#E0AF68;--shiki-dark-font-style:inherit\">_props\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\">:\u003C/span>\u003Cspan style=\"color:#DF8E1D;font-style:italic;--shiki-dark:#C0CAF5;--shiki-dark-font-style:inherit\"> RouteProps\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\">)\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#8839EF;font-style:inherit;--shiki-dark:#BB9AF7;--shiki-dark-font-style:italic\">  return\u003C/span>\u003Cspan style=\"color:#D20F39;--shiki-dark:#FF9E64\"> null\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>(Notice that I added an eslint exception since we are not using the props.)\u003C/p>\n\u003Cp>Then, React Router cleverly leverages the \u003Ccode>React.Children\u003C/code> method, which is not commonly encouraged by \u003Ca href=\"https://react.dev/reference/react/Children\">the React docs\u003C/a> except for specific use cases like this. This method lets you transform the JSX code received as \u003Ccode>children\u003C/code> prop.\u003C/p>\n\u003Cp>By doing this, we can map the \u003Ccode>children\u003C/code> and extract the props of the corresponding routes. Then, the \u003Ccode>Router\u003C/code> will render the element of the matching route as usual, effectively ignoring the children components:\u003C/p>\n\u003Cpre class=\"astro-code astro-code-themes catppuccin-latte tokyo-night\" style=\"background-color:#eff1f5;--shiki-dark-bg:#1a1b26;color:#4c4f69;--shiki-dark:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"tsx\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#9CA0B0;font-style:italic;--shiki-dark:#51597D;--shiki-dark-font-style:italic\">// Router.tsx\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#8839EF;--shiki-dark:#BB9AF7\">function\u003C/span>\u003Cspan style=\"color:#1E66F5;font-style:italic;--shiki-dark:#7AA2F7;--shiki-dark-font-style:inherit\"> Router\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\">(\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E64553;font-style:italic;--shiki-dark:#E0AF68;--shiki-dark-font-style:inherit\">  children\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E64553;font-style:italic;--shiki-dark:#E0AF68;--shiki-dark-font-style:inherit\">  routes\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\"> =\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\"> []\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E64553;font-style:italic;--shiki-dark:#E0AF68;--shiki-dark-font-style:inherit\">  defaultElement\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\"> =\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\"> &#x3C;\u003C/span>\u003Cspan style=\"color:#1E66F5;--shiki-dark:#F7768E\">h1\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\">>\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9AA5CE\">404\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\">&#x3C;/\u003C/span>\u003Cspan style=\"color:#1E66F5;--shiki-dark:#F7768E\">h1\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\">>\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E64553;font-style:italic;--shiki-dark:#E0AF68;--shiki-dark-font-style:inherit\">  basename\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\"> =\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\"> ''\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">}\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\">:\u003C/span>\u003Cspan style=\"color:#DF8E1D;font-style:italic;--shiki-dark:#C0CAF5;--shiki-dark-font-style:inherit\"> PropsWithChildren\u003C/span>\u003Cspan style=\"color:#04A5E5;--shiki-dark:#89DDFF\">&#x3C;\u003C/span>\u003Cspan style=\"color:#DF8E1D;font-style:italic;--shiki-dark:#C0CAF5;--shiki-dark-font-style:inherit\">Props\u003C/span>\u003Cspan style=\"color:#04A5E5;--shiki-dark:#89DDFF\">>\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\">)\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9CA0B0;font-style:italic;--shiki-dark:#51597D;--shiki-dark-font-style:italic\">  // ... same code\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#8839EF;font-style:inherit;--shiki-dark:#9D7CD8;--shiki-dark-font-style:italic\">  const\u003C/span>\u003Cspan style=\"color:#FE640B;--shiki-dark:#BB9AF7\"> routesFromChildren\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\"> =\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\">    Children\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\">.\u003C/span>\u003Cspan style=\"color:#1E66F5;font-style:italic;--shiki-dark:#7AA2F7;--shiki-dark-font-style:inherit\">map\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">(\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\">children\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">,\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\"> (\u003C/span>\u003Cspan style=\"color:#E64553;font-style:italic;--shiki-dark:#E0AF68;--shiki-dark-font-style:inherit\">child\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\">)\u003C/span>\u003Cspan style=\"color:#8839EF;--shiki-dark:#BB9AF7\"> =>\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#8839EF;font-style:inherit;--shiki-dark:#9D7CD8;--shiki-dark-font-style:italic\">      const\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\"> {\u003C/span>\u003Cspan style=\"color:#FE640B;--shiki-dark:#BB9AF7\"> props\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">,\u003C/span>\u003Cspan style=\"color:#FE640B;--shiki-dark:#BB9AF7\"> type\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\"> }\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\"> =\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\"> child\u003C/span>\u003Cspan style=\"color:#8839EF;--shiki-dark:#89DDFF\"> as\u003C/span>\u003Cspan style=\"color:#DF8E1D;font-style:italic;--shiki-dark:#C0CAF5;--shiki-dark-font-style:inherit\"> JSX\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\">.\u003C/span>\u003Cspan style=\"color:#DF8E1D;font-style:italic;--shiki-dark:#C0CAF5;--shiki-dark-font-style:inherit\">Element\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#8839EF;font-style:inherit;--shiki-dark:#9D7CD8;--shiki-dark-font-style:italic\">      const\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\"> {\u003C/span>\u003Cspan style=\"color:#FE640B;--shiki-dark:#BB9AF7\"> displayName\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\"> }\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\"> =\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\"> type\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#8839EF;font-style:inherit;--shiki-dark:#9D7CD8;--shiki-dark-font-style:italic\">      const\u003C/span>\u003Cspan style=\"color:#FE640B;--shiki-dark:#BB9AF7\"> isRoute\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\"> =\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\"> displayName\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#BB9AF7\"> ===\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\"> '\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#9ECE6A\">Route\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\">'\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#8839EF;font-style:inherit;--shiki-dark:#BB9AF7;--shiki-dark-font-style:italic\">      return\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\"> isRoute\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#BB9AF7\"> ?\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\"> (\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\">props\u003C/span>\u003Cspan style=\"color:#8839EF;--shiki-dark:#89DDFF\"> as\u003C/span>\u003Cspan style=\"color:#DF8E1D;font-style:italic;--shiki-dark:#C0CAF5;--shiki-dark-font-style:inherit\"> RouteProps\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">) \u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#BB9AF7\">:\u003C/span>\u003Cspan style=\"color:#D20F39;--shiki-dark:#FF9E64\"> null\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\">    }\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">)\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\">?.\u003C/span>\u003Cspan style=\"color:#1E66F5;font-style:italic;--shiki-dark:#7AA2F7;--shiki-dark-font-style:inherit\">filter\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">(\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\">Boolean\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">) \u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#BB9AF7\">||\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\"> []\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9CA0B0;font-style:italic;--shiki-dark:#51597D;--shiki-dark-font-style:italic\">  // we support both routes passed as an object ('routes' prop) or part of children as a &#x3C;Route />\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#8839EF;font-style:inherit;--shiki-dark:#9D7CD8;--shiki-dark-font-style:italic\">  const\u003C/span>\u003Cspan style=\"color:#FE640B;--shiki-dark:#BB9AF7\"> routesToUse\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\"> =\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\"> [\u003C/span>\u003Cspan style=\"color:#179299;font-weight:inherit;--shiki-dark:#F7768E;--shiki-dark-font-weight:bold\">...\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#7DCFFF\">routes\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">,\u003C/span>\u003Cspan style=\"color:#179299;font-weight:inherit;--shiki-dark:#F7768E;--shiki-dark-font-weight:bold\"> ...\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#7DCFFF\">routesFromChildren\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">]\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#8839EF;font-style:inherit;--shiki-dark:#9D7CD8;--shiki-dark-font-style:italic\">  const\u003C/span>\u003Cspan style=\"color:#FE640B;--shiki-dark:#BB9AF7\"> page\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\"> =\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\"> routesToUse\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\">.\u003C/span>\u003Cspan style=\"color:#1E66F5;font-style:italic;--shiki-dark:#7AA2F7;--shiki-dark-font-style:inherit\">find\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">(\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\">(\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">{\u003C/span>\u003Cspan style=\"color:#E64553;font-style:italic;--shiki-dark:#E0AF68;--shiki-dark-font-style:inherit\"> path\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\"> }\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\">)\u003C/span>\u003Cspan style=\"color:#8839EF;--shiki-dark:#BB9AF7\"> =>\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9CA0B0;font-style:italic;--shiki-dark:#51597D;--shiki-dark-font-style:italic\">    // ... same code\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\">  }\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9CA0B0;font-style:italic;--shiki-dark:#51597D;--shiki-dark-font-style:italic\">  /* \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9CA0B0;font-style:italic;--shiki-dark:#51597D;--shiki-dark-font-style:italic\">  return (\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9CA0B0;font-style:italic;--shiki-dark:#51597D;--shiki-dark-font-style:italic\">    ... same code\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9CA0B0;font-style:italic;--shiki-dark:#51597D;--shiki-dark-font-style:italic\">  ) \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9CA0B0;font-style:italic;--shiki-dark:#51597D;--shiki-dark-font-style:italic\">  */\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"optimizing-for-production-lazy-loading\">Optimizing for production: Lazy loading\u003C/h2>\n\u003Cp>As it is now, using this router in our SPA will load all the JavaScript code during the first request, which negatively impacts the application’s initial load time.\u003C/p>\n\u003Cp>To optimize and load only the code required to run the current page, we should move the pages into their own files and lazy load them using  \u003Ccode>React.Suspense\u003C/code>:\u003C/p>\n\u003Cpre class=\"astro-code astro-code-themes catppuccin-latte tokyo-night\" style=\"background-color:#eff1f5;--shiki-dark-bg:#1a1b26;color:#4c4f69;--shiki-dark:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"tsx\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#8839EF;--shiki-dark:#7DCFFF\">import\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\"> {\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#0DB9D7\"> Suspense\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">,\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#0DB9D7\"> lazy\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\"> }\u003C/span>\u003Cspan style=\"color:#8839EF;--shiki-dark:#7DCFFF\"> from\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\"> '\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#9ECE6A\">react\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\">'\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#8839EF;--shiki-dark:#7DCFFF\">import\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\"> {\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#0DB9D7\"> Router\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">,\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#0DB9D7\"> Route\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\"> }\u003C/span>\u003Cspan style=\"color:#8839EF;--shiki-dark:#7DCFFF\"> from\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\"> '\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#9ECE6A\">./\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\">'\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#8839EF;--shiki-dark:#7DCFFF\">import\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#0DB9D7\"> Page404\u003C/span>\u003Cspan style=\"color:#8839EF;--shiki-dark:#7DCFFF\"> from\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\"> '\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#9ECE6A\">./pages/404\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\">'\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#8839EF;font-style:inherit;--shiki-dark:#9D7CD8;--shiki-dark-font-style:italic\">const\u003C/span>\u003Cspan style=\"color:#FE640B;--shiki-dark:#BB9AF7\"> HomePage\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\"> =\u003C/span>\u003Cspan style=\"color:#1E66F5;font-style:italic;--shiki-dark:#7AA2F7;--shiki-dark-font-style:inherit\"> lazy\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">(\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\">()\u003C/span>\u003Cspan style=\"color:#8839EF;--shiki-dark:#BB9AF7\"> =>\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\"> import\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">(\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\">'\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#9ECE6A\">./pages/Home\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\">'\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">))\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#8839EF;font-style:inherit;--shiki-dark:#9D7CD8;--shiki-dark-font-style:italic\">const\u003C/span>\u003Cspan style=\"color:#FE640B;--shiki-dark:#BB9AF7\"> AboutPage\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\"> =\u003C/span>\u003Cspan style=\"color:#1E66F5;font-style:italic;--shiki-dark:#7AA2F7;--shiki-dark-font-style:inherit\"> lazy\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">(\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\">()\u003C/span>\u003Cspan style=\"color:#8839EF;--shiki-dark:#BB9AF7\"> =>\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\"> import\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">(\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\">'\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#9ECE6A\">./pages/About\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\">'\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">))\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#8839EF;--shiki-dark:#BB9AF7\">function\u003C/span>\u003Cspan style=\"color:#1E66F5;font-style:italic;--shiki-dark:#7AA2F7;--shiki-dark-font-style:inherit\"> App\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\">()\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#8839EF;font-style:inherit;--shiki-dark:#BB9AF7;--shiki-dark-font-style:italic\">  return\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\"> (\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\">    &#x3C;\u003C/span>\u003Cspan style=\"color:#1E66F5;--shiki-dark:#F7768E\">main\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\">      &#x3C;\u003C/span>\u003Cspan style=\"color:#EA76CB;--shiki-dark:#DE5971\">Suspense\u003C/span>\u003Cspan style=\"color:#DF8E1D;--shiki-dark:#BB9AF7\"> fallback\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\">=\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#7DCFFF\">{\u003C/span>\u003Cspan style=\"color:#D20F39;--shiki-dark:#FF9E64\">null\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#7DCFFF\">}\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\">        &#x3C;\u003C/span>\u003Cspan style=\"color:#EA76CB;--shiki-dark:#DE5971\">Router\u003C/span>\u003Cspan style=\"color:#DF8E1D;--shiki-dark:#BB9AF7\"> defaultElement\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\">=\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#7DCFFF\">{\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\">&#x3C;\u003C/span>\u003Cspan style=\"color:#EA76CB;--shiki-dark:#DE5971\">Page404\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\"> />\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#7DCFFF\">}\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\"> >\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\">          &#x3C;\u003C/span>\u003Cspan style=\"color:#EA76CB;--shiki-dark:#DE5971\">Route\u003C/span>\u003Cspan style=\"color:#DF8E1D;--shiki-dark:#BB9AF7\"> path\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\">=\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\">\"\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#9ECE6A\">/\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\">\"\u003C/span>\u003Cspan style=\"color:#DF8E1D;--shiki-dark:#BB9AF7\"> element\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\">=\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#7DCFFF\">{\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\">&#x3C;\u003C/span>\u003Cspan style=\"color:#EA76CB;--shiki-dark:#DE5971\">HomePage\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\"> />\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#7DCFFF\">}\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\"> />\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\">          &#x3C;\u003C/span>\u003Cspan style=\"color:#EA76CB;--shiki-dark:#DE5971\">Route\u003C/span>\u003Cspan style=\"color:#DF8E1D;--shiki-dark:#BB9AF7\"> path\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\">=\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\">\"\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#9ECE6A\">/about\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\">\"\u003C/span>\u003Cspan style=\"color:#DF8E1D;--shiki-dark:#BB9AF7\"> element\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\">=\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#7DCFFF\">{\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\">&#x3C;\u003C/span>\u003Cspan style=\"color:#EA76CB;--shiki-dark:#DE5971\">AboutPage\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\"> />\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#7DCFFF\">}\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\"> />\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\">        &#x3C;/\u003C/span>\u003Cspan style=\"color:#EA76CB;--shiki-dark:#DE5971\">Router\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\">      &#x3C;/\u003C/span>\u003Cspan style=\"color:#EA76CB;--shiki-dark:#DE5971\">Suspense\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\">    &#x3C;/\u003C/span>\u003Cspan style=\"color:#1E66F5;--shiki-dark:#F7768E\">main\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">  )\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#8839EF;--shiki-dark:#7DCFFF\">export\u003C/span>\u003Cspan style=\"color:#8839EF;--shiki-dark:#7DCFFF\"> default\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\"> App\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">;\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"putting-it-all-together\">Putting it all together\u003C/h2>\n\u003Cp>You can take a look at the final implementation \u003Ca href=\"https://github.com/vgarmes/v-router\">in my repository\u003C/a>, which incorporates all the techniques we have discussed, along with some additional improvements.\u003C/p>\n\u003Cp>In conclusion, developing this basic client-side router has given me a better high-level understanding of SPAs. I hope it proves to be useful to you as well. Thanks for reading!\u003C/p>",{"headings":145,"localImagePaths":186,"remoteImagePaths":187,"frontmatter":188,"imagePaths":193},[146,149,152,156,159,162,165,168,171,174,177,180,183],{"depth":109,"slug":147,"text":148},"getting-started","Getting started",{"depth":109,"slug":150,"text":151},"intercepting-navigation","Intercepting navigation",{"depth":153,"slug":154,"text":155},3,"creating-a-function-to-navigate-to-another-path","Creating a function to navigate to another path",{"depth":109,"slug":157,"text":158},"link-component-replacing-anchors-default-behavior","Link component: Replacing anchor’s default behavior",{"depth":153,"slug":160,"text":161},"updating-the-location-when-navigating-back","Updating the location when navigating back",{"depth":109,"slug":163,"text":164},"adding-support-to-dynamic-routes-and-query-parameters","Adding support to dynamic routes and query parameters",{"depth":153,"slug":166,"text":167},"dynamic-routes","Dynamic routes",{"depth":153,"slug":169,"text":170},"query-parameters","Query parameters",{"depth":153,"slug":172,"text":173},"refactoring-the-navigation","Refactoring the navigation",{"depth":109,"slug":175,"text":176},"the-router-context-provider","The router context provider",{"depth":109,"slug":178,"text":179},"taking-it-a-bit-further-the-route-component","Taking it a bit further: the Route component",{"depth":109,"slug":181,"text":182},"optimizing-for-production-lazy-loading","Optimizing for production: Lazy loading",{"depth":109,"slug":184,"text":185},"putting-it-all-together","Putting it all together",[],[],{"title":132,"pubDate":189,"description":134,"image":190,"tags":191,"draft":24,"minutesRead":192},["Date","2023-08-03T00:00:00.000Z"],{"url":40,"alt":41},[64,136,137],12.665,[],"powershell-custom-prompt-setup",{"id":194,"data":196,"body":201,"filePath":202,"digest":203,"rendered":204},{"title":197,"pubDate":198,"description":78,"tags":199,"image":200,"draft":24},"Set up a delightful custom prompt for PowerShell",["Date","2023-07-19T00:00:00.000Z"],[80,81,82],{"url":84,"alt":85},"For some time now, I've been wanting to customize my terminal to get more out of it. This motivation specially started after watching people like [Takuya Matsuyama (@craftzdog)](https://www.youtube.com/@devaslife) flying through the command-line with their awesome setups.\n\nSo, the other day, I finally decided to do the same on my Windows machine. Surprisingly, it just required a few simple tweaks with PowerShell and tools like Oh My Posh to completely transform the command prompt taking it to a whole new level with features like:\n\n1. Customizable colors, themes, text fonts, and icons to enhance the appearance.\n2. Display of Git branch information directly in the prompt.\n3. Aliases for quicker command execution.\n4. Command-line tab auto-completion and command history.\n5. Directory jumping based on history, facilitating navigation.\n6. Implementation of custom functions to automate tasks.\n\nCheck out how it looks in the screenshot below:\n\n![Custom command prompt with Powershell](https://res.cloudinary.com/dx73a1lse/image/upload/v1689889088/blog/overview_ugl3u2.webp)\n\n \nIn this post, I'll walk you trough the process of setting up these tools. Most of the configuration will be stored in a single file that PowerShell will use when it starts up. To make it easier to follow along, you can refer to [my personal setup file](https://github.com/vgarmes/dotfiles/blob/main/.config/powershell/user_profile.ps1) for reference.\n\nWhether you want to implement a few of these steps or go all-in, I hope that this post turns out useful and that it will make your command-line experience way more fun and productive.\n\n---\n\n## Pre-requisites: Windows Terminal and PowerShell\n\nIf you don't already have Windows Terminal and Powershell, the easiest way to get them is by installing them from the Microsoft Store.\n\nAfter installing PowerShell, you can set it as the default shell in Windows Terminal if you want it to be the default option when launching the terminal.\n\n![Window Terminal Startup settings](https://res.cloudinary.com/dx73a1lse/image/upload/v1689770259/blog/startup_ipy0hj.png)\n\n## Install a Nerd Font\n\nThe custom themes we are about to install in the following steps utilize glyphs (icons) to style the command prompt. To ensure that all glyphs are displayed correctly in the terminal, it is recommended to install a [Nerd Font](https://www.nerdfonts.com/).\n\nChoose a font of your preference (I chose *Hack*), download it, and unzip the file. Then, right-click on the font file and select *Install* to install it on your system.\n\nNext, open the Windows Terminal **Settings**, select the Powershell profile, and go to the **Appearance** tab. From the **Font face** drop-down menu, select the newly installed font.\n\n![Appearance tab of Powershell profile in Windows terminal](https://res.cloudinary.com/dx73a1lse/image/upload/v1686473655/blog/color-scheme_nlqocv.png)\n\n## Change the color scheme\n\nAdditionally, within the **Appearance** tab, you have the option to customize the color scheme according to your preference. Personally, I prefer dark themes for everything, so I chose the *One Half Dark* theme. \n\nDepending on your own preferences, you may also want to consider making the background of your terminal slightly translucent. To do this, you can find the **Transparency** settings within the same tab. \n\nExperiment with adjusting the values for **Background opacity** and toggling the **Enable acrylic material** option until you find the configuration that you personally like. In my case, I set the opacity to 90% and enabled the acrylic material feature.\n\n![Transparency settings of Windows Terminal](https://res.cloudinary.com/dx73a1lse/image/upload/v1686473654/blog/background-opacity_got3cp.png)\n\n## Create a Powershell profile\n\nThe remaining configuration is defined in the PowerShell profile. As mentioned earlier, this file is essentially a script that runs when PowerShell starts and it can include commands, aliases, functions, variables, modules, and more.\n\nThe `$PROFILE` variable stores the path to the PowerShell profile for the current user and current host in your machine. If you have recently installed PowerShell, it's likely that this directory doesn't exist on your computer. In any case, to create it without risking overwriting an existing profile, execute the following command:\n\n```ps1\nif (!(Test-Path -Path $PROFILE)) {\n  New-Item -ItemType File -Path $PROFILE -Force\n}\n```\n\nThis will allow adding your PowerShell configuration directly on your `$PROFILE` file. However, for better control over your configuration files, it is recommended to create a separate file that will be later imported into the `$PROFILE`. In my case, I created a directory in my home directory (`Users/{username}`):\n\n```shell\nmkdir .config/powershell\n```\nNavigate to this directory and create a PowerShell user profile with the extension `.ps1`. I've just named it `user_profile.ps1`.\n\nNext, we need to import this file into the `$PROFILE`. Open it using your preferred text editor (just replace `nvim` if you use any other editor, such as `notepad`):\n\n```shell\nnvim $PROFILE\n```\n\nAdd a line similar to the one below to import your configuration file. The specific path will depend on where you created your `.ps1` configuration file. You can use the `USERPROFILE` enviroment variable to prepend the home directory to the path where you created the file:\n\n```ps1\n. $env:USERPROFILE\\.config\\powershell\\user_profile.ps1\n```\n\nThe next steps will basically consist in configuring the PowerShell environment by adding PowerShell commands (also called cmdlets) to the profile. \n\n## Set some aliases\n\nAliases are essentially shortcuts that map one command to another. They come in handy by saving you from typing long commands or remembering different command names across various operating systems.\n\nCreating aliases in PowerShell is straightforward using the  `Set-Alias` cmdlet. The syntax is as follows:\n\n```ps1\nSet-Alias {command name} {command to run}\n```\n\nFor instance, a useful alias for users of Unix-like operating systems is mapping `ls` to `ll`, as `ls` provides a similar file listing as the Unix command `ll`. To create this alias, add the following line to your profile:\n\n```ps1\nSet-Alias ll ls\n```\n\nNow is a good time to test if PowerShell correctly configured to use your profile file. Restart your profile with this command:\n\n```shell\n. $PROFILE\n```\n\nAfter restarting, simply type the alias on the command prompt. If it functions as expected, it indicates that your profile has been correctly configured.\n\n## Install posh-git\n\nLet's begin by installing the first module, **posh-git**. This module seamlessly integrates Git and PowerShell by offering Git status summary information that can be displayed in the PowerShell prompt.\n\nTo install posh-git, use the following command, which uses the PowerShell gallery:\n\n```ps1\nInstall-Module posh-git -Scope CurrentUser -Force\n```\n\n**Tip:** To view the PowerShell gallery modules you have installed at any time, you can use the following command:\n\n```ps1\nGet-InstalledModule\n```\n\n## Install Oh My Posh\n\nOh My Posh is a highly customizable prompt framework for PowerShell that allows us to change the styling of the command-prompt. These preferences are defined in a theme, which can be either custom-made or chosen from their extensive community library.\n\nTo install Oh My Posh, you can use the **winget** package manager:\n\n```shell\nwinget install JanDeDobbeleer.OhMyPosh -s winget\n```\n\n**Note:** If you need to update Oh My Posh, simply run the command:\n```shell\nwinget upgrade JanDeDobbeleer.OhMyPosh -s winget\n```\n\nAfter installing Oh My Posh, you'll need to restart the terminal and add the initialization of Oh My Posh to your profile:\n\n```\nOh My Posh init pwsh | Invoke-Expression\n```\n\n### Add a theme to Oh My Posh\nTo use a theme, add the following command to your PowerShell profile, replacing `POSH_THEMES_PATH` with your preferred theme:\n\n```ps1\nOh My Posh init pwsh --config \"$env:POSH_THEMES_PATH/jandedobbeleer.omp.json\" | Invoke-Expression\n```\n\nYou can explore the full list of themes [here](https://ohmyposh.dev/docs/themes).\n\n## Install icons\n\nAnother visual enhancement we can leverage through PowerShell modules is the ability to display icons representing file types next to file names when listing directories. To add these icons, we can install the **Terminal-Icons** module:\n\n```ps1\nInstall-Module -Name Terminal-Icons -Repository PSGallery\n```\n\nAnd import it in your Powershell profile:\n```ps1\nImport-Module -Name Terminal-Icons\n```\n\n## Install z (directory jumping)\n\nThe **z** module is incredibly useful as it enables quick navigation through the file system based on your command history. With z, you can simply type `z` followed by a keyword in the command prompt, and it will search your command history for the closest match and automatically navigate to that directory.\n\nFor instance, if you previosly navigated to the directory `C:\\path\\to\\my-cool-project`, typing `z cool`, you will be automatically taken to that directory.\n\nTo install **z**, run the following command:\n```ps1\nInstall-Module -Name z\n```\n\n## Configure PSReadLine\n\nPSreadline is a module that comes pre-installed with the latest versions of PowerShell and allows us to configure the behavior of command line editing. One particularly useful feature is the predictive IntelliSense, which provides command predictions based on your command history as you type. To enable this, simply add the following line to your profile:\n\n```ps1\nSet-PSReadLineOption -PredictionSource History\n```\n\nYou can further configure how PSReadLine displays the predictions. By default, they appear on the same line as your input, but you can also enable a list view by using the following configuration:\n\n```ps1\nSet-PSReadLineOption -PredictionViewStyle ListView\n```\n\nAnother great feature of PSReadLine is the ability to customize key bindings. For example, if you want to emulate Bash or Emacs key bindings, add the following line:\n\n```ps1\nSet-PSReadLineOption -EditMode Emacs\n```\n\n## Add custom functions\nFinally, one of my favorite features of PowerShell is its ability to easily add custom functions, providing limitless possibilities for automation.\n\nTo illustrate this, let's consider a function that I frequently use, especially when working on collaborative projects: deleting Git branches that match a specific pattern. For instance, if I have multiple branches containing the word \"hotfix\" that I no longer need, I would like to delete them all at once. Here's an example function that automates this process:\"\n\n```ps1\nfunction delete-branches ($pattern) {\n  # Get all branch names that match the pattern\n  $branchesToDelete = git branch | Where-Object { $_ -match $pattern }\n\n  if ($branchesToDelete.Count -eq 0) {\n    Write-Host \"No branches found matching the pattern '$pattern'.\"\n  }\n\n  # Prompt for confirmation before deleting\n  $confirmationMessage = \"The following branches will be deleted: `n$($branchesToDelete -join \"`n\")`nDo you want to proceed? (Y/N)\"\n  $confirmation = Read-Host -Prompt $confirmationMessage\n\n  if ($confirmation -eq \"Y\" -or $confirmation -eq \"y\") {\n    foreach ($branch in $branchesToDelte) {\n      git branch -D $branch.Trim()\n    }\n    Write-Host \"Branches deleted successfully.\"\n  } else {\n    Write-Host \"Operation cancelled.\"\n  }\n}\n```\n\nThen, simply typing `delete-branches hotfix` will run the function above, prompt a list of branches that match the pattern `hotfix` and ask you for confirmation to delete them all.\n\n## Conclusions\n\nI hope you found this tutorial useful and that it inspired you to start utilizing these productivity hacks. Personally, I'm really happy with the results, and I have already noticed a significant improvement in the overall experience of using the terminal, making it more enjoyable and efficient.","src/content/blog/powershell-custom-prompt-setup.md","3efeaf933b0bd09b",{"html":205,"metadata":206},"\u003Cp>For some time now, I’ve been wanting to customize my terminal to get more out of it. This motivation specially started after watching people like \u003Ca href=\"https://www.youtube.com/@devaslife\">Takuya Matsuyama (@craftzdog)\u003C/a> flying through the command-line with their awesome setups.\u003C/p>\n\u003Cp>So, the other day, I finally decided to do the same on my Windows machine. Surprisingly, it just required a few simple tweaks with PowerShell and tools like Oh My Posh to completely transform the command prompt taking it to a whole new level with features like:\u003C/p>\n\u003Col>\n\u003Cli>Customizable colors, themes, text fonts, and icons to enhance the appearance.\u003C/li>\n\u003Cli>Display of Git branch information directly in the prompt.\u003C/li>\n\u003Cli>Aliases for quicker command execution.\u003C/li>\n\u003Cli>Command-line tab auto-completion and command history.\u003C/li>\n\u003Cli>Directory jumping based on history, facilitating navigation.\u003C/li>\n\u003Cli>Implementation of custom functions to automate tasks.\u003C/li>\n\u003C/ol>\n\u003Cp>Check out how it looks in the screenshot below:\u003C/p>\n\u003Cp>\u003Cimg src=\"https://res.cloudinary.com/dx73a1lse/image/upload/v1689889088/blog/overview_ugl3u2.webp\" alt=\"Custom command prompt with Powershell\">\u003C/p>\n\u003Cp>In this post, I’ll walk you trough the process of setting up these tools. Most of the configuration will be stored in a single file that PowerShell will use when it starts up. To make it easier to follow along, you can refer to \u003Ca href=\"https://github.com/vgarmes/dotfiles/blob/main/.config/powershell/user_profile.ps1\">my personal setup file\u003C/a> for reference.\u003C/p>\n\u003Cp>Whether you want to implement a few of these steps or go all-in, I hope that this post turns out useful and that it will make your command-line experience way more fun and productive.\u003C/p>\n\u003Chr>\n\u003Ch2 id=\"pre-requisites-windows-terminal-and-powershell\">Pre-requisites: Windows Terminal and PowerShell\u003C/h2>\n\u003Cp>If you don’t already have Windows Terminal and Powershell, the easiest way to get them is by installing them from the Microsoft Store.\u003C/p>\n\u003Cp>After installing PowerShell, you can set it as the default shell in Windows Terminal if you want it to be the default option when launching the terminal.\u003C/p>\n\u003Cp>\u003Cimg src=\"https://res.cloudinary.com/dx73a1lse/image/upload/v1689770259/blog/startup_ipy0hj.png\" alt=\"Window Terminal Startup settings\">\u003C/p>\n\u003Ch2 id=\"install-a-nerd-font\">Install a Nerd Font\u003C/h2>\n\u003Cp>The custom themes we are about to install in the following steps utilize glyphs (icons) to style the command prompt. To ensure that all glyphs are displayed correctly in the terminal, it is recommended to install a \u003Ca href=\"https://www.nerdfonts.com/\">Nerd Font\u003C/a>.\u003C/p>\n\u003Cp>Choose a font of your preference (I chose \u003Cem>Hack\u003C/em>), download it, and unzip the file. Then, right-click on the font file and select \u003Cem>Install\u003C/em> to install it on your system.\u003C/p>\n\u003Cp>Next, open the Windows Terminal \u003Cstrong>Settings\u003C/strong>, select the Powershell profile, and go to the \u003Cstrong>Appearance\u003C/strong> tab. From the \u003Cstrong>Font face\u003C/strong> drop-down menu, select the newly installed font.\u003C/p>\n\u003Cp>\u003Cimg src=\"https://res.cloudinary.com/dx73a1lse/image/upload/v1686473655/blog/color-scheme_nlqocv.png\" alt=\"Appearance tab of Powershell profile in Windows terminal\">\u003C/p>\n\u003Ch2 id=\"change-the-color-scheme\">Change the color scheme\u003C/h2>\n\u003Cp>Additionally, within the \u003Cstrong>Appearance\u003C/strong> tab, you have the option to customize the color scheme according to your preference. Personally, I prefer dark themes for everything, so I chose the \u003Cem>One Half Dark\u003C/em> theme.\u003C/p>\n\u003Cp>Depending on your own preferences, you may also want to consider making the background of your terminal slightly translucent. To do this, you can find the \u003Cstrong>Transparency\u003C/strong> settings within the same tab.\u003C/p>\n\u003Cp>Experiment with adjusting the values for \u003Cstrong>Background opacity\u003C/strong> and toggling the \u003Cstrong>Enable acrylic material\u003C/strong> option until you find the configuration that you personally like. In my case, I set the opacity to 90% and enabled the acrylic material feature.\u003C/p>\n\u003Cp>\u003Cimg src=\"https://res.cloudinary.com/dx73a1lse/image/upload/v1686473654/blog/background-opacity_got3cp.png\" alt=\"Transparency settings of Windows Terminal\">\u003C/p>\n\u003Ch2 id=\"create-a-powershell-profile\">Create a Powershell profile\u003C/h2>\n\u003Cp>The remaining configuration is defined in the PowerShell profile. As mentioned earlier, this file is essentially a script that runs when PowerShell starts and it can include commands, aliases, functions, variables, modules, and more.\u003C/p>\n\u003Cp>The \u003Ccode>$PROFILE\u003C/code> variable stores the path to the PowerShell profile for the current user and current host in your machine. If you have recently installed PowerShell, it’s likely that this directory doesn’t exist on your computer. In any case, to create it without risking overwriting an existing profile, execute the following command:\u003C/p>\n\u003Cpre class=\"astro-code astro-code-themes catppuccin-latte tokyo-night\" style=\"background-color:#eff1f5;--shiki-dark-bg:#1a1b26;color:#4c4f69;--shiki-dark:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"ps1\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#8839EF;--shiki-dark:#BB9AF7\">if\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\"> (\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\">!\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\">(\u003C/span>\u003Cspan style=\"color:#1E66F5;font-style:italic;--shiki-dark:#0DB9D7;--shiki-dark-font-style:inherit\">Test-Path\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\"> -\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#A9B1D6\">Path \u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#89DDFF\">$\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\">PROFILE\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\">))\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#1E66F5;font-style:italic;--shiki-dark:#0DB9D7;--shiki-dark-font-style:inherit\">  New-Item\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\"> -\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#A9B1D6\">ItemType File \u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\">-\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#A9B1D6\">Path \u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#89DDFF\">$\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\">PROFILE\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\"> -\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#A9B1D6\">Force\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>This will allow adding your PowerShell configuration directly on your \u003Ccode>$PROFILE\u003C/code> file. However, for better control over your configuration files, it is recommended to create a separate file that will be later imported into the \u003Ccode>$PROFILE\u003C/code>. In my case, I created a directory in my home directory (\u003Ccode>Users/{username}\u003C/code>):\u003C/p>\n\u003Cpre class=\"astro-code astro-code-themes catppuccin-latte tokyo-night\" style=\"background-color:#eff1f5;--shiki-dark-bg:#1a1b26;color:#4c4f69;--shiki-dark:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"shell\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#1E66F5;font-style:italic;--shiki-dark:#C0CAF5;--shiki-dark-font-style:inherit\">mkdir\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#9ECE6A\"> .config/powershell\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Navigate to this directory and create a PowerShell user profile with the extension \u003Ccode>.ps1\u003C/code>. I’ve just named it \u003Ccode>user_profile.ps1\u003C/code>.\u003C/p>\n\u003Cp>Next, we need to import this file into the \u003Ccode>$PROFILE\u003C/code>. Open it using your preferred text editor (just replace \u003Ccode>nvim\u003C/code> if you use any other editor, such as \u003Ccode>notepad\u003C/code>):\u003C/p>\n\u003Cpre class=\"astro-code astro-code-themes catppuccin-latte tokyo-night\" style=\"background-color:#eff1f5;--shiki-dark-bg:#1a1b26;color:#4c4f69;--shiki-dark:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"shell\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#1E66F5;font-style:italic;--shiki-dark:#C0CAF5;--shiki-dark-font-style:inherit\">nvim\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\"> $PROFILE\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Add a line similar to the one below to import your configuration file. The specific path will depend on where you created your \u003Ccode>.ps1\u003C/code> configuration file. You can use the \u003Ccode>USERPROFILE\u003C/code> enviroment variable to prepend the home directory to the path where you created the file:\u003C/p>\n\u003Cpre class=\"astro-code astro-code-themes catppuccin-latte tokyo-night\" style=\"background-color:#eff1f5;--shiki-dark-bg:#1a1b26;color:#4c4f69;--shiki-dark:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"ps1\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\">.\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\"> $env:USERPROFILE\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#A9B1D6\">\\.config\\powershell\\user_profile.ps1\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>The next steps will basically consist in configuring the PowerShell environment by adding PowerShell commands (also called cmdlets) to the profile.\u003C/p>\n\u003Ch2 id=\"set-some-aliases\">Set some aliases\u003C/h2>\n\u003Cp>Aliases are essentially shortcuts that map one command to another. They come in handy by saving you from typing long commands or remembering different command names across various operating systems.\u003C/p>\n\u003Cp>Creating aliases in PowerShell is straightforward using the  \u003Ccode>Set-Alias\u003C/code> cmdlet. The syntax is as follows:\u003C/p>\n\u003Cpre class=\"astro-code astro-code-themes catppuccin-latte tokyo-night\" style=\"background-color:#eff1f5;--shiki-dark-bg:#1a1b26;color:#4c4f69;--shiki-dark:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"ps1\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#1E66F5;font-style:italic;--shiki-dark:#0DB9D7;--shiki-dark-font-style:inherit\">Set-Alias\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\"> {\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#A9B1D6\">command name\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\">}\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\"> {\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#A9B1D6\">command to run\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>For instance, a useful alias for users of Unix-like operating systems is mapping \u003Ccode>ls\u003C/code> to \u003Ccode>ll\u003C/code>, as \u003Ccode>ls\u003C/code> provides a similar file listing as the Unix command \u003Ccode>ll\u003C/code>. To create this alias, add the following line to your profile:\u003C/p>\n\u003Cpre class=\"astro-code astro-code-themes catppuccin-latte tokyo-night\" style=\"background-color:#eff1f5;--shiki-dark-bg:#1a1b26;color:#4c4f69;--shiki-dark:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"ps1\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#1E66F5;font-style:italic;--shiki-dark:#0DB9D7;--shiki-dark-font-style:inherit\">Set-Alias\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#A9B1D6\"> ll ls\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Now is a good time to test if PowerShell correctly configured to use your profile file. Restart your profile with this command:\u003C/p>\n\u003Cpre class=\"astro-code astro-code-themes catppuccin-latte tokyo-night\" style=\"background-color:#eff1f5;--shiki-dark-bg:#1a1b26;color:#4c4f69;--shiki-dark:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"shell\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#D20F39;font-style:italic;--shiki-dark:#0DB9D7;--shiki-dark-font-style:inherit\">.\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\"> $PROFILE\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>After restarting, simply type the alias on the command prompt. If it functions as expected, it indicates that your profile has been correctly configured.\u003C/p>\n\u003Ch2 id=\"install-posh-git\">Install posh-git\u003C/h2>\n\u003Cp>Let’s begin by installing the first module, \u003Cstrong>posh-git\u003C/strong>. This module seamlessly integrates Git and PowerShell by offering Git status summary information that can be displayed in the PowerShell prompt.\u003C/p>\n\u003Cp>To install posh-git, use the following command, which uses the PowerShell gallery:\u003C/p>\n\u003Cpre class=\"astro-code astro-code-themes catppuccin-latte tokyo-night\" style=\"background-color:#eff1f5;--shiki-dark-bg:#1a1b26;color:#4c4f69;--shiki-dark:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"ps1\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#1E66F5;font-style:italic;--shiki-dark:#0DB9D7;--shiki-dark-font-style:inherit\">Install-Module\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#A9B1D6\"> posh\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\">-\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#A9B1D6\">git \u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\">-\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#A9B1D6\">Scope CurrentUser \u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\">-\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#A9B1D6\">Force\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>\u003Cstrong>Tip:\u003C/strong> To view the PowerShell gallery modules you have installed at any time, you can use the following command:\u003C/p>\n\u003Cpre class=\"astro-code astro-code-themes catppuccin-latte tokyo-night\" style=\"background-color:#eff1f5;--shiki-dark-bg:#1a1b26;color:#4c4f69;--shiki-dark:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"ps1\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#1E66F5;font-style:italic;--shiki-dark:#0DB9D7;--shiki-dark-font-style:inherit\">Get-InstalledModule\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"install-oh-my-posh\">Install Oh My Posh\u003C/h2>\n\u003Cp>Oh My Posh is a highly customizable prompt framework for PowerShell that allows us to change the styling of the command-prompt. These preferences are defined in a theme, which can be either custom-made or chosen from their extensive community library.\u003C/p>\n\u003Cp>To install Oh My Posh, you can use the \u003Cstrong>winget\u003C/strong> package manager:\u003C/p>\n\u003Cpre class=\"astro-code astro-code-themes catppuccin-latte tokyo-night\" style=\"background-color:#eff1f5;--shiki-dark-bg:#1a1b26;color:#4c4f69;--shiki-dark:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"shell\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#1E66F5;font-style:italic;--shiki-dark:#C0CAF5;--shiki-dark-font-style:inherit\">winget\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#9ECE6A\"> install\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#9ECE6A\"> JanDeDobbeleer.OhMyPosh\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#E0AF68\"> -s\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#9ECE6A\"> winget\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>\u003Cstrong>Note:\u003C/strong> If you need to update Oh My Posh, simply run the command:\u003C/p>\n\u003Cpre class=\"astro-code astro-code-themes catppuccin-latte tokyo-night\" style=\"background-color:#eff1f5;--shiki-dark-bg:#1a1b26;color:#4c4f69;--shiki-dark:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"shell\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#1E66F5;font-style:italic;--shiki-dark:#C0CAF5;--shiki-dark-font-style:inherit\">winget\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#9ECE6A\"> upgrade\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#9ECE6A\"> JanDeDobbeleer.OhMyPosh\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#E0AF68\"> -s\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#9ECE6A\"> winget\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>After installing Oh My Posh, you’ll need to restart the terminal and add the initialization of Oh My Posh to your profile:\u003C/p>\n\u003Cpre class=\"astro-code astro-code-themes catppuccin-latte tokyo-night\" style=\"background-color:#eff1f5;--shiki-dark-bg:#1a1b26;color:#4c4f69;--shiki-dark:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>Oh My Posh init pwsh | Invoke-Expression\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch3 id=\"add-a-theme-to-oh-my-posh\">Add a theme to Oh My Posh\u003C/h3>\n\u003Cp>To use a theme, add the following command to your PowerShell profile, replacing \u003Ccode>POSH_THEMES_PATH\u003C/code> with your preferred theme:\u003C/p>\n\u003Cpre class=\"astro-code astro-code-themes catppuccin-latte tokyo-night\" style=\"background-color:#eff1f5;--shiki-dark-bg:#1a1b26;color:#4c4f69;--shiki-dark:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"ps1\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#4C4F69;--shiki-dark:#A9B1D6\">Oh My Posh init pwsh \u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\">--\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#A9B1D6\">config \u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\">\"\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\">$env:POSH_THEMES_PATH\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#9ECE6A\">/jandedobbeleer.omp.json\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\">\"\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\"> |\u003C/span>\u003Cspan style=\"color:#1E66F5;font-style:italic;--shiki-dark:#0DB9D7;--shiki-dark-font-style:inherit\"> Invoke-Expression\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>You can explore the full list of themes \u003Ca href=\"https://ohmyposh.dev/docs/themes\">here\u003C/a>.\u003C/p>\n\u003Ch2 id=\"install-icons\">Install icons\u003C/h2>\n\u003Cp>Another visual enhancement we can leverage through PowerShell modules is the ability to display icons representing file types next to file names when listing directories. To add these icons, we can install the \u003Cstrong>Terminal-Icons\u003C/strong> module:\u003C/p>\n\u003Cpre class=\"astro-code astro-code-themes catppuccin-latte tokyo-night\" style=\"background-color:#eff1f5;--shiki-dark-bg:#1a1b26;color:#4c4f69;--shiki-dark:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"ps1\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#1E66F5;font-style:italic;--shiki-dark:#0DB9D7;--shiki-dark-font-style:inherit\">Install-Module\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\"> -\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#A9B1D6\">Name Terminal\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\">-\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#A9B1D6\">Icons \u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\">-\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#A9B1D6\">Repository PSGallery\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>And import it in your Powershell profile:\u003C/p>\n\u003Cpre class=\"astro-code astro-code-themes catppuccin-latte tokyo-night\" style=\"background-color:#eff1f5;--shiki-dark-bg:#1a1b26;color:#4c4f69;--shiki-dark:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"ps1\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#1E66F5;font-style:italic;--shiki-dark:#0DB9D7;--shiki-dark-font-style:inherit\">Import-Module\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\"> -\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#A9B1D6\">Name Terminal\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\">-\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#A9B1D6\">Icons\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"install-z-directory-jumping\">Install z (directory jumping)\u003C/h2>\n\u003Cp>The \u003Cstrong>z\u003C/strong> module is incredibly useful as it enables quick navigation through the file system based on your command history. With z, you can simply type \u003Ccode>z\u003C/code> followed by a keyword in the command prompt, and it will search your command history for the closest match and automatically navigate to that directory.\u003C/p>\n\u003Cp>For instance, if you previosly navigated to the directory \u003Ccode>C:\\path\\to\\my-cool-project\u003C/code>, typing \u003Ccode>z cool\u003C/code>, you will be automatically taken to that directory.\u003C/p>\n\u003Cp>To install \u003Cstrong>z\u003C/strong>, run the following command:\u003C/p>\n\u003Cpre class=\"astro-code astro-code-themes catppuccin-latte tokyo-night\" style=\"background-color:#eff1f5;--shiki-dark-bg:#1a1b26;color:#4c4f69;--shiki-dark:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"ps1\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#1E66F5;font-style:italic;--shiki-dark:#0DB9D7;--shiki-dark-font-style:inherit\">Install-Module\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\"> -\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#A9B1D6\">Name z\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"configure-psreadline\">Configure PSReadLine\u003C/h2>\n\u003Cp>PSreadline is a module that comes pre-installed with the latest versions of PowerShell and allows us to configure the behavior of command line editing. One particularly useful feature is the predictive IntelliSense, which provides command predictions based on your command history as you type. To enable this, simply add the following line to your profile:\u003C/p>\n\u003Cpre class=\"astro-code astro-code-themes catppuccin-latte tokyo-night\" style=\"background-color:#eff1f5;--shiki-dark-bg:#1a1b26;color:#4c4f69;--shiki-dark:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"ps1\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#1E66F5;font-style:italic;--shiki-dark:#0DB9D7;--shiki-dark-font-style:inherit\">Set-PSReadLineOption\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\"> -\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#A9B1D6\">PredictionSource History\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>You can further configure how PSReadLine displays the predictions. By default, they appear on the same line as your input, but you can also enable a list view by using the following configuration:\u003C/p>\n\u003Cpre class=\"astro-code astro-code-themes catppuccin-latte tokyo-night\" style=\"background-color:#eff1f5;--shiki-dark-bg:#1a1b26;color:#4c4f69;--shiki-dark:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"ps1\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#1E66F5;font-style:italic;--shiki-dark:#0DB9D7;--shiki-dark-font-style:inherit\">Set-PSReadLineOption\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\"> -\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#A9B1D6\">PredictionViewStyle ListView\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Another great feature of PSReadLine is the ability to customize key bindings. For example, if you want to emulate Bash or Emacs key bindings, add the following line:\u003C/p>\n\u003Cpre class=\"astro-code astro-code-themes catppuccin-latte tokyo-night\" style=\"background-color:#eff1f5;--shiki-dark-bg:#1a1b26;color:#4c4f69;--shiki-dark:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"ps1\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#1E66F5;font-style:italic;--shiki-dark:#0DB9D7;--shiki-dark-font-style:inherit\">Set-PSReadLineOption\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\"> -\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#A9B1D6\">EditMode Emacs\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"add-custom-functions\">Add custom functions\u003C/h2>\n\u003Cp>Finally, one of my favorite features of PowerShell is its ability to easily add custom functions, providing limitless possibilities for automation.\u003C/p>\n\u003Cp>To illustrate this, let’s consider a function that I frequently use, especially when working on collaborative projects: deleting Git branches that match a specific pattern. For instance, if I have multiple branches containing the word “hotfix” that I no longer need, I would like to delete them all at once. Here’s an example function that automates this process:”\u003C/p>\n\u003Cpre class=\"astro-code astro-code-themes catppuccin-latte tokyo-night\" style=\"background-color:#eff1f5;--shiki-dark-bg:#1a1b26;color:#4c4f69;--shiki-dark:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"ps1\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#8839EF;--shiki-dark:#BB9AF7\">function\u003C/span>\u003Cspan style=\"color:#1E66F5;font-style:italic;--shiki-dark:#7AA2F7;--shiki-dark-font-style:inherit\"> delete-branches\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\"> (\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\">$pattern\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\">)\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9CA0B0;font-style:italic;--shiki-dark:#51597D;--shiki-dark-font-style:italic\">  # Get all branch names that match the pattern\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\">  $branchesToDelete\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\"> =\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#A9B1D6\"> git branch \u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\">|\u003C/span>\u003Cspan style=\"color:#1E66F5;font-style:italic;--shiki-dark:#0DB9D7;--shiki-dark-font-style:inherit\"> Where-Object\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\"> {\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#89DDFF\"> $\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\">_\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#BB9AF7\"> -match\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\"> $pattern\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\"> }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#8839EF;--shiki-dark:#BB9AF7\">  if\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\"> (\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\">$branchesToDelete.Count\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#BB9AF7\"> -eq\u003C/span>\u003Cspan style=\"color:#FE640B;--shiki-dark:#FF9E64\"> 0\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\">)\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#1E66F5;font-style:italic;--shiki-dark:#0DB9D7;--shiki-dark-font-style:inherit\">    Write-Host\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\"> \"\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#9ECE6A\">No branches found matching the pattern '\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\">$pattern\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#9ECE6A\">'.\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\">\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9CA0B0;font-style:italic;--shiki-dark:#51597D;--shiki-dark-font-style:italic\">  # Prompt for confirmation before deleting\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\">  $confirmationMessage\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\"> =\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\"> \"\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#9ECE6A\">The following branches will be deleted: \u003C/span>\u003Cspan style=\"color:#EA76CB;--shiki-dark:#89DDFF\">`n\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#7DCFFF\">$(\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\">$branchesToDelete\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\"> -join\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\"> \"\u003C/span>\u003Cspan style=\"color:#EA76CB;--shiki-dark:#89DDFF\">`n\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\">\"\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#7DCFFF\">)\u003C/span>\u003Cspan style=\"color:#EA76CB;--shiki-dark:#89DDFF\">`n\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#9ECE6A\">Do you want to proceed? (Y/N)\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\">\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\">  $confirmation\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\"> =\u003C/span>\u003Cspan style=\"color:#1E66F5;font-style:italic;--shiki-dark:#0DB9D7;--shiki-dark-font-style:inherit\"> Read-Host\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\"> -\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#A9B1D6\">Prompt \u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\">$confirmationMessage\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#8839EF;--shiki-dark:#BB9AF7\">  if\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\"> (\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\">$confirmation\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#BB9AF7\"> -eq\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\"> \"\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#9ECE6A\">Y\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\">\"\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#BB9AF7\"> -or\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\"> $confirmation\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#BB9AF7\"> -eq\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\"> \"\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#9ECE6A\">y\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\">\"\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\">)\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#8839EF;--shiki-dark:#BB9AF7\">    foreach\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\"> (\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\">$branch\u003C/span>\u003Cspan style=\"color:#8839EF;--shiki-dark:#BB9AF7\"> in\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\"> $branchesToDelte\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\">)\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#4C4F69;--shiki-dark:#A9B1D6\">      git branch \u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\">-\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#A9B1D6\">D \u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\">$branch.Trim\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\">()\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#1E66F5;font-style:italic;--shiki-dark:#0DB9D7;--shiki-dark-font-style:inherit\">    Write-Host\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\"> \"\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#9ECE6A\">Branches deleted successfully.\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\">\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\">  }\u003C/span>\u003Cspan style=\"color:#8839EF;--shiki-dark:#BB9AF7\"> else\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#1E66F5;font-style:italic;--shiki-dark:#0DB9D7;--shiki-dark-font-style:inherit\">    Write-Host\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\"> \"\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#9ECE6A\">Operation cancelled.\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\">\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Then, simply typing \u003Ccode>delete-branches hotfix\u003C/code> will run the function above, prompt a list of branches that match the pattern \u003Ccode>hotfix\u003C/code> and ask you for confirmation to delete them all.\u003C/p>\n\u003Ch2 id=\"conclusions\">Conclusions\u003C/h2>\n\u003Cp>I hope you found this tutorial useful and that it inspired you to start utilizing these productivity hacks. Personally, I’m really happy with the results, and I have already noticed a significant improvement in the overall experience of using the terminal, making it more enjoyable and efficient.\u003C/p>",{"headings":207,"localImagePaths":247,"remoteImagePaths":248,"frontmatter":249,"imagePaths":254},[208,211,214,217,220,223,226,229,232,235,238,241,244],{"depth":109,"slug":209,"text":210},"pre-requisites-windows-terminal-and-powershell","Pre-requisites: Windows Terminal and PowerShell",{"depth":109,"slug":212,"text":213},"install-a-nerd-font","Install a Nerd Font",{"depth":109,"slug":215,"text":216},"change-the-color-scheme","Change the color scheme",{"depth":109,"slug":218,"text":219},"create-a-powershell-profile","Create a Powershell profile",{"depth":109,"slug":221,"text":222},"set-some-aliases","Set some aliases",{"depth":109,"slug":224,"text":225},"install-posh-git","Install posh-git",{"depth":109,"slug":227,"text":228},"install-oh-my-posh","Install Oh My Posh",{"depth":153,"slug":230,"text":231},"add-a-theme-to-oh-my-posh","Add a theme to Oh My Posh",{"depth":109,"slug":233,"text":234},"install-icons","Install icons",{"depth":109,"slug":236,"text":237},"install-z-directory-jumping","Install z (directory jumping)",{"depth":109,"slug":239,"text":240},"configure-psreadline","Configure PSReadLine",{"depth":109,"slug":242,"text":243},"add-custom-functions","Add custom functions",{"depth":109,"slug":245,"text":246},"conclusions","Conclusions",[],[],{"title":197,"pubDate":250,"description":78,"image":251,"tags":252,"draft":24,"minutesRead":253},["Date","2023-07-19T00:00:00.000Z"],{"url":84,"alt":85},[80,81,82],7.865,[],"understanding-react-server-components",{"id":255,"data":257,"body":266,"filePath":267,"digest":268,"rendered":269},{"title":258,"pubDate":259,"description":260,"tags":261,"image":263,"draft":24},"Understanding React Server Components",["Date","2024-08-29T00:00:00.000Z"],"Recently, the React team unveiled a formal approach for running React components exclusively on the server. This represents a significant shift in how we use React, causing some confusion within the community. In this article, I explore this new concept and provide a foundational understanding of how it works.",[64,262],"server components",{"url":264,"alt":265},"https://res.cloudinary.com/dx73a1lse/image/upload/v1724958842/blog/9e0060af-bc61-40cc-b516-2d13d013615b_v4pf3t.png","understanding react server components title on a blue background","React Server Components (RSC) are transforming the React ecosystem, and Next.js, one of the most popular frameworks, is fully embracing this approach.\n\nWhen I first learned about Server Components, I completely misunderstood them. I initially thought it was simply Server Side Rendering (SSR) with additional features, such as the ability to await methods called directly on the backend. I couldn't have been more wrong, and it seems this misconception is quite common. \n\nServer Components are much more than just enhanced SSR; in fact, they don't necessarily require SSR at all. In this blog post, I'll provide a high-level explanation that helped me build a mental model and will hopefully help you too. But first, let's start from the beginning.\n\n## How React renders\n\nTo understand Server Components better, let's first review how React renders a component. Consider a simple counter component:\n\n```js\n// App.js\nimport { useState } from 'react';\n\nexport default function App() {\n  const [count, setCount] = useState(0);\n\n  return (\n    \u003Cbutton onClick={() => setCount(count + 1)}>\n      You pressed me {count} times\n    \u003C/button>\n  );\n}\n```\n\nWhen compiled, the output of this component is converted into a `React.createElement` call:\n\n```js\n// App.js\nimport { useState } from 'react';\nimport React from 'react';\n\nexport default function App() {\n  const [count, setCount] = useState(0);\n\n  return React.createElement(\n    'button', \n    { onClick: () => setCount(count + 1) }, \n    `You pressed me ${count} times`\n  );\n}\n``` \n\nWhen this function runs, it produces a plain JavaScript object that looks something like this:\n\n```js\n{\n  type: 'button',\n  key: null,\n  ref: null,\n  props: {\n    onClick: () => setCount(count + 1),\n    children:`You pressed me ${count} times`,\n  },\n  _owner: null,\n  _store: { validated: false }\n}\n```\n\nThese objects, known as the Virtual DOM, are React's way of describing the DOM structure. They are used to compare renders, identify changes, and determine what needs to be updated in the actual DOM. \n\nDuring rendering, React uses this Virtual DOM to compare the current state of the UI with a new version generated after a state or prop change. This comparison process, called reconciliation, allows React to efficiently update only the parts of the real DOM that have changed, rather than re-rendering the entire UI.\n\nBut when does the initial render occur? This depends on whether our application is rendered entirely on the client side or not.\n\n## Rendering on the client\n\nIn a traditional client-only React application, the user receives an empty HTML that looks like this:\n\n```html\n\u003C!DOCTYPE html>\n\u003Chtml>\n  \u003Cbody>\n    \u003Cdiv id=\"root\">\u003C/div>\n    \u003Cscript src=\"/static/js/bundle.js\">\u003C/script>\n  \u003C/body>\n\u003C/html>\n```\n\nReact, which is included in the JavaScript bundle, uses the `\u003Cdiv id=\"root\">` element to inject all the DOM nodes once it's loaded on the client. To achieve this, React creates a root for the empty `\u003Cdiv id=\"root\">` element and takes over managing the DOM inside it by calling `root.render`:\n\n```js\nimport React from 'react';\nimport { createRoot } from 'react-dom/client';\nimport App from './App.js'\n\nconst root = createRoot(document.querySelector('#root'));\nroot.render(\u003CApp />);\n```\n\nAs you might already know this approach has its drawbacks. When a user visits a page built like this, the initial request retrieves an HTML file that is essentially empty.\n\nThe browser then starts downloading additional resources, including the JavaScript bundle. Only after this bundle is downloaded and parsed does React begin creating the DOM nodes, making the page finally usable. For larger applications, this means users may experience a significant delay with a blank page while the JavaScript is loading. This delay negatively impacts user experience, not to mention SEO.\n\nThis issue can be mitigated by rendering the initial React content on the server, which is where Server Side Rendering comes into play.\n\n## What is Server Side Rendering\n\nServer Side Rendering (SSR) performs the initial React render on the server to generate HTML, which is then sent to the browser. At a high-level, our `\u003CApp />` from the previous example can be rendered on a Node.js server using a React method called `renderToString` (the HTML has been simplified for brevity):\n\n```js\n/* /src/server/index.js */\nimport renderToString from 'react-dom/server';\nimport App from './App.js';\n\nexport function handleRequest(request, response) {\n  const appContent = renderToString(\u003CApp />);\n  // the result of this is: \"\u003Cbutton>You pressed me 0 times\u003C/button>\"\n  \n  response.send(`\n    \u003Chtml>\n      \u003Cbody>\n        ${appContent}\n      \u003C/body>\n    \u003C/html>\n  `);\n}\n```\n\nSimilar to the `render` method, `renderToString` recursively renders all components in `App`, producing HTML as a string. Even though more sophisticated strategies that support features like streaming are currently in use, this gives us an idea of how SSR works.\n\nThis approach has the advantage that the user can start viewing the content as soon as the HTML is received, even while the JavaScript is still loading, making the application more responsive.\n\nOnce the JavaScript has loaded, React makes the page interactive through a process called \"hydration\". During this process, React performs a render to determine the shape of the component tree and set up all of the interactivity, such as event listeners. As opposed to client-side rendering, this render is not used to create all of the DOM nodes, as they already exist from the server, but rather to integrate with the existing DOM.\n\nIn order to achieve this, React uses a method called `hydrateRoot` which is used instead of `createRoot` in client side rendering:\n\n```diff\nimport React from 'react'\nimport App from './App'\n- import { createRoot } from 'react-dom/client';\n+ import { hydrateRoot } from 'react-dom/client';\n\n- const root = createRoot(document.querySelector('#root'));\n- root.render(\u003CApp />);\n+ hydrateRoot(document.querySelector('#root'), \u003CApp />);\n```\n\nNote how, instead of creating DOM nodes and rendering them using the `createRoot` and `render` methods as we saw in the client side rendering example, now we just adopt the HTML received from the server using `hydrateRoot`.\n\n## Server Components\n\nServer Components introduce a new approach where components are executed only once, exclusively on the server. They are truly static because they do not re-render or hydrate on the client. Once their output is rendered on the client, it remains unchanged and immutable. \n\nThis server-only execution offers several performance benefits, including:\n\n- *Zero bundle size:* The code of Server Components doesn't get added to your JavaScript bundle, which means you can safely use large dependencies without the risk of shipping them to the client. For example, if we needed to use a syntax highlighting library, which tend to be quite heavy, we could run it on the server to generate the syntax-highlighted code without shipping the dependency.\n\n- *Secure access to backend services:* Since Server Components run only on the server, they have direct access to data sources such as databases and file systems while safely keeping sensitive data and logic away from the client.\n\nOn the other hand, because Server Components are not sent to the browser, they can't use any interactive APIs like `useState`. To differentiate Server Components from other React components, the latter have been renamed to Client Components.\n\nThe logic behind Server Components must be tightly integrated with the bundler, server, and router. Currently, [the simplest way to use Server Components is with Next.js 13.4+](https://react.dev/learn/start-a-new-react-project#bleeding-edge-react-frameworks), which incorporates them into its newly re-architected App Router.\n\n_NOTE: The term \"server\" in Server Components doesn't strictly mean that these components run on a server in real-time; rather, rendering ahead of time. For instance, by default, [Next.js configures Server Components to render at build time](https://nextjs.org/docs/app/building-your-application/rendering/server-components#static-rendering-default)._\n\n### Boundaries\n\nWhen building with Next.js, all components are assumed to be Server Components by default. To add interactivity, you need to \"opt-in\" by adding the `'use client'` directive at the top of the component file. This directive will convert the all the components in that file into Client Components.\n \nHowever, Client Components can only import other Client Components. This means that when we import a Client Component into a Server Component, we create a boundary, and all components down the tree from that point will be treated as Client Components. Because of this, we don't have to add `'use client'` to every single file that needs to run on the client. In practice, we only need to add it when we're creating new client boundaries.\n\nLet's imagine we are creating a new page in Next.js:\n\n```js\n/* app/page.js */\nexport default function Page() {\n  const [count, setCount] = useState(0);\n\n  return (\n    \u003Cbutton onClick={() => setCount(count + 1)}>\n      You pressed me {count} times\n    \u003C/button>\n  );\n}\n```\n\nAs soon as we tried to compile this, an error will be thrown indicating that we are using state in a Server Component. \n\nOne option is to use the `'use client'` directive at the top of the page, but let's take advantage of Server Components by refactoring our code. \n\nWe can start by moving the counter to its own Client Component like so:\n\n```js\n// Counter.js\n'use client';\n\nimport { useState } from 'react';\n\nexport default function Counter() {\n  const [count, setCount] = useState(0);\n\n  return (\n    \u003Cbutton onClick={() => setCount(count + 1)}>\n      You pressed me {count} times\n    \u003C/button>\n  );\n}\n```\n\nThen we could add some elements in our Server Component page and include our counter:\n\n```js\n// page.js\nimport Counter from './Counter';\n\nexport default function App() {\n  return (\n    \u003Cdiv>\n      \u003Ch1>My counter\u003C/h1>\n      \u003CCounter />\n    \u003C/div>\n  )\n}\n```\n\nNow we won't get any compilation errors, our Server and Client components are properly separated by the boundary in the counter.\n\n### Server Components vs SSR\n\nEven though the concepts of SSR and Server Components might seem similar at first glance since both involve running React components on the server, they differ fundamentally as we have juse seen.\n\nWhile SSR pre-renders the client application on the server to generate HTML, Server Components are rendered on the server, with their output passed to the client as serialized objects. These serialized objects, known as the *Server Component Payload*, represent a React component tree, not static HTML.\n\nIf we were to inspect the HTML of the previous page when received by the client (also truncated for simplicity), we would see something like this:\n\n```html\n\u003C!DOCTYPE html>\n\u003Chtml>\n  \u003Cbody>\n    \u003Cp>Hello World!\u003C/p>\n    \u003Cscript src=\"/static/js/bundle.js\">\u003C/script>\n    \u003Cscript>\n      self.__next_f.push([1,\n        \"4:I[(app-pages-browser)/./src/app/counter.js\\\",\n        [\n          '$',\n          'div',\n          null,\n          { children: [\n              ['$', 'h1', null, { children: 'My counter' }],\n              ['$', '$L4', null, {}],\n            ],\n          },\n        ]\n      ])\n    \u003C/script>\n  \u003C/body>\n\u003C/html>\n```\n\nAs we can see, next to our server-side rendered HTML, there are two \u003Cscript> tags.\n\nThe first tag loads the JavaScript bundle, which includes React and the Client Components.\n\nThe second tag contains what Server Components rendered—an array of payloads representing the object tree. Even though the actual format of this object differs a bit—it has been simplified here for clarity—we can distinguish a few key elements.\n\nIn the payload array, the element starting with the number `4` and the letter `I`, followed by a file path is our Client Component-the counter. Payloads that start with `I` are modules, which is how Client Components are loaded. The number `4` is simply an identifier. Also, notice that I included the file path as it would appear in development. In a production build, we would see something like `static/chunks/app/page-2bf114d4cb295821.js` instead.\n\nFollowing that, we see our React component tree. The `\"$\"` symbol indicates a DOM definition. First we have the `div` element which children are the `h1` heading and a `$L4` element. The latter instructs React to load the module identified by `4` (our counter) in that position within the component tree.\n\nWe can see some similarities between this object tree and what we previously saw rendered by `React.createElement`. In fact, during hydration, React uses this pre-rendered component tree just as it would if it had been rendered on the client, even though the initial rendering occurred entirely on the server.\n\nIf we were to look for the heading `Hello World!` in our bundle, it wouldn't appear. This is one of the strengths of Server Components. This was just a very simple example, but it could be scaled up to more complex processes like querying data from a database, reading from the file system, doing code highlighting, etc., and none of it would be included in the bundle—just a payload with the rendered component tree.\n\n## Conclusion\n\nWhile SSR pre-renders client applications on the server, Server Components takes it a step further by providing the performance benefits of running code exclusively on the server.\n\nServer Components become even more powerful when combined with Suspense and streaming SSR architecture, which allows rendering work to be split into chunks and streamed to the client as they become ready.\n\nAll of this represents a paradigm shift in the React ecosystem and will significantly change the way we build applications in the future.\n\n## References\n\nIf you want to learn more about React Server Components, I highly recommend these invaluable references, which I used myself while writing this article:\n\n- [Making Sense of React Server Components](https://www.joshwcomeau.com/react/server-components/#introduction-to-react-server-components-3): An exceptional and clear article by Josh Comeau, featuring numerous helpful diagrams that make the concepts easy to understand.\n- [RSC from scratch](https://github.com/reactwg/server-components/discussions/5): A detailed technical deep dive by Dan Abramov (former React core team member), which walks you through the process of \"inventing\" RSC from scratch to provide a comprehensive mental model.\n- [The forensics of React Server Components](https://www.smashingmagazine.com/2024/05/forensics-react-server-components/): A comprehensive explanation by Lazar Nikolov, who examines in detail the rendering lifecycle of RSC.\n- [Data Fetching with React Server Components](https://github.com/reactwg/server-components/discussions/5): An excellent demo on how to handle data fetching in RSC, by Dan Abramov and Lauren Tan.\n- [Next.js Docs](https://nextjs.org/docs/app/building-your-application/rendering/server-components): Next.js documentation on RSC, featuring a helpful explanation of how RSC are rendered and the various strategies involved.","src/content/blog/understanding-react-server-components.md","eb44708c5253b5e2",{"html":270,"metadata":271},"\u003Cp>React Server Components (RSC) are transforming the React ecosystem, and Next.js, one of the most popular frameworks, is fully embracing this approach.\u003C/p>\n\u003Cp>When I first learned about Server Components, I completely misunderstood them. I initially thought it was simply Server Side Rendering (SSR) with additional features, such as the ability to await methods called directly on the backend. I couldn’t have been more wrong, and it seems this misconception is quite common.\u003C/p>\n\u003Cp>Server Components are much more than just enhanced SSR; in fact, they don’t necessarily require SSR at all. In this blog post, I’ll provide a high-level explanation that helped me build a mental model and will hopefully help you too. But first, let’s start from the beginning.\u003C/p>\n\u003Ch2 id=\"how-react-renders\">How React renders\u003C/h2>\n\u003Cp>To understand Server Components better, let’s first review how React renders a component. Consider a simple counter component:\u003C/p>\n\u003Cpre class=\"astro-code astro-code-themes catppuccin-latte tokyo-night\" style=\"background-color:#eff1f5;--shiki-dark-bg:#1a1b26;color:#4c4f69;--shiki-dark:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#9CA0B0;font-style:italic;--shiki-dark:#51597D;--shiki-dark-font-style:italic\">// App.js\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#8839EF;--shiki-dark:#7DCFFF\">import\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\"> {\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#0DB9D7\"> useState\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\"> }\u003C/span>\u003Cspan style=\"color:#8839EF;--shiki-dark:#7DCFFF\"> from\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\"> '\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#9ECE6A\">react\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\">'\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#8839EF;--shiki-dark:#7DCFFF\">export\u003C/span>\u003Cspan style=\"color:#8839EF;--shiki-dark:#7DCFFF\"> default\u003C/span>\u003Cspan style=\"color:#8839EF;--shiki-dark:#BB9AF7\"> function\u003C/span>\u003Cspan style=\"color:#1E66F5;font-style:italic;--shiki-dark:#7AA2F7;--shiki-dark-font-style:inherit\"> App\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\">()\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#8839EF;font-style:inherit;--shiki-dark:#9D7CD8;--shiki-dark-font-style:italic\">  const\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\"> [\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#BB9AF7\">count\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">,\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#BB9AF7\"> setCount\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">]\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\"> =\u003C/span>\u003Cspan style=\"color:#1E66F5;font-style:italic;--shiki-dark:#7AA2F7;--shiki-dark-font-style:inherit\"> useState\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">(\u003C/span>\u003Cspan style=\"color:#FE640B;--shiki-dark:#FF9E64\">0\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">)\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#8839EF;font-style:inherit;--shiki-dark:#BB9AF7;--shiki-dark-font-style:italic\">  return\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\"> (\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\">    &#x3C;\u003C/span>\u003Cspan style=\"color:#1E66F5;--shiki-dark:#F7768E\">button\u003C/span>\u003Cspan style=\"color:#DF8E1D;--shiki-dark:#BB9AF7\"> onClick\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\">=\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#7DCFFF\">{\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\">()\u003C/span>\u003Cspan style=\"color:#8839EF;--shiki-dark:#BB9AF7\"> =>\u003C/span>\u003Cspan style=\"color:#1E66F5;font-style:italic;--shiki-dark:#7AA2F7;--shiki-dark-font-style:inherit\"> setCount\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">(\u003C/span>\u003Cspan style=\"color:#E64553;--shiki-dark:#C0CAF5\">count\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\"> +\u003C/span>\u003Cspan style=\"color:#FE640B;--shiki-dark:#FF9E64\"> 1\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">)\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#7DCFFF\">}\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9AA5CE\">      You pressed me \u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#7DCFFF\">{\u003C/span>\u003Cspan style=\"color:#E64553;--shiki-dark:#C0CAF5\">count\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#7DCFFF\">}\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9AA5CE\"> times\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\">    &#x3C;/\u003C/span>\u003Cspan style=\"color:#1E66F5;--shiki-dark:#F7768E\">button\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">  )\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>When compiled, the output of this component is converted into a \u003Ccode>React.createElement\u003C/code> call:\u003C/p>\n\u003Cpre class=\"astro-code astro-code-themes catppuccin-latte tokyo-night\" style=\"background-color:#eff1f5;--shiki-dark-bg:#1a1b26;color:#4c4f69;--shiki-dark:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#9CA0B0;font-style:italic;--shiki-dark:#51597D;--shiki-dark-font-style:italic\">// App.js\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#8839EF;--shiki-dark:#7DCFFF\">import\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\"> {\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#0DB9D7\"> useState\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\"> }\u003C/span>\u003Cspan style=\"color:#8839EF;--shiki-dark:#7DCFFF\"> from\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\"> '\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#9ECE6A\">react\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\">'\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#8839EF;--shiki-dark:#7DCFFF\">import\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#0DB9D7\"> React\u003C/span>\u003Cspan style=\"color:#8839EF;--shiki-dark:#7DCFFF\"> from\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\"> '\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#9ECE6A\">react\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\">'\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#8839EF;--shiki-dark:#7DCFFF\">export\u003C/span>\u003Cspan style=\"color:#8839EF;--shiki-dark:#7DCFFF\"> default\u003C/span>\u003Cspan style=\"color:#8839EF;--shiki-dark:#BB9AF7\"> function\u003C/span>\u003Cspan style=\"color:#1E66F5;font-style:italic;--shiki-dark:#7AA2F7;--shiki-dark-font-style:inherit\"> App\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\">()\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#8839EF;font-style:inherit;--shiki-dark:#9D7CD8;--shiki-dark-font-style:italic\">  const\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\"> [\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#BB9AF7\">count\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">,\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#BB9AF7\"> setCount\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">]\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\"> =\u003C/span>\u003Cspan style=\"color:#1E66F5;font-style:italic;--shiki-dark:#7AA2F7;--shiki-dark-font-style:inherit\"> useState\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">(\u003C/span>\u003Cspan style=\"color:#FE640B;--shiki-dark:#FF9E64\">0\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">)\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#8839EF;font-style:inherit;--shiki-dark:#BB9AF7;--shiki-dark-font-style:italic\">  return\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\"> React\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\">.\u003C/span>\u003Cspan style=\"color:#1E66F5;font-style:italic;--shiki-dark:#7AA2F7;--shiki-dark-font-style:inherit\">createElement\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">(\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\">    '\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#9ECE6A\">button\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\">'\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">,\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\"> \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\">    {\u003C/span>\u003Cspan style=\"color:#1E66F5;font-style:italic;--shiki-dark:#7AA2F7;--shiki-dark-font-style:inherit\"> onClick\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\">:\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\"> ()\u003C/span>\u003Cspan style=\"color:#8839EF;--shiki-dark:#BB9AF7\"> =>\u003C/span>\u003Cspan style=\"color:#1E66F5;font-style:italic;--shiki-dark:#7AA2F7;--shiki-dark-font-style:inherit\"> setCount\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">(\u003C/span>\u003Cspan style=\"color:#E64553;--shiki-dark:#C0CAF5\">count\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\"> +\u003C/span>\u003Cspan style=\"color:#FE640B;--shiki-dark:#FF9E64\"> 1\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">) \u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\">}\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">,\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\"> \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\">    `\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#9ECE6A\">You pressed me \u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#7DCFFF\">${\u003C/span>\u003Cspan style=\"color:#E64553;--shiki-dark:#C0CAF5\">count\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#7DCFFF\">}\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#9ECE6A\"> times\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\">`\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">  )\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>When this function runs, it produces a plain JavaScript object that looks something like this:\u003C/p>\n\u003Cpre class=\"astro-code astro-code-themes catppuccin-latte tokyo-night\" style=\"background-color:#eff1f5;--shiki-dark-bg:#1a1b26;color:#4c4f69;--shiki-dark:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\">{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#4C4F69;--shiki-dark:#73DACA\">  type\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">:\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\"> '\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#9ECE6A\">button\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\">'\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#4C4F69;--shiki-dark:#73DACA\">  key\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">:\u003C/span>\u003Cspan style=\"color:#8839EF;--shiki-dark:#FF9E64\"> null\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#4C4F69;--shiki-dark:#73DACA\">  ref\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">:\u003C/span>\u003Cspan style=\"color:#8839EF;--shiki-dark:#FF9E64\"> null\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#4C4F69;--shiki-dark:#73DACA\">  props\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">:\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#4C4F69;--shiki-dark:#73DACA\">    onClick\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">:\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\"> ()\u003C/span>\u003Cspan style=\"color:#8839EF;--shiki-dark:#BB9AF7\"> =>\u003C/span>\u003Cspan style=\"color:#1E66F5;font-style:italic;--shiki-dark:#7AA2F7;--shiki-dark-font-style:inherit\"> setCount\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">(\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\">count\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\"> +\u003C/span>\u003Cspan style=\"color:#FE640B;--shiki-dark:#FF9E64\"> 1\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">)\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#4C4F69;--shiki-dark:#73DACA\">    children\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">:\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\">`\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#9ECE6A\">You pressed me \u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#7DCFFF\">${\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\">count\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#7DCFFF\">}\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#9ECE6A\"> times\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\">`\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\">  }\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#4C4F69;--shiki-dark:#73DACA\">  _owner\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">:\u003C/span>\u003Cspan style=\"color:#8839EF;--shiki-dark:#FF9E64\"> null\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#4C4F69;--shiki-dark:#73DACA\">  _store\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">:\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\"> {\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#73DACA\"> validated\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">:\u003C/span>\u003Cspan style=\"color:#FE640B;--shiki-dark:#FF9E64\"> false\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\"> }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>These objects, known as the Virtual DOM, are React’s way of describing the DOM structure. They are used to compare renders, identify changes, and determine what needs to be updated in the actual DOM.\u003C/p>\n\u003Cp>During rendering, React uses this Virtual DOM to compare the current state of the UI with a new version generated after a state or prop change. This comparison process, called reconciliation, allows React to efficiently update only the parts of the real DOM that have changed, rather than re-rendering the entire UI.\u003C/p>\n\u003Cp>But when does the initial render occur? This depends on whether our application is rendered entirely on the client side or not.\u003C/p>\n\u003Ch2 id=\"rendering-on-the-client\">Rendering on the client\u003C/h2>\n\u003Cp>In a traditional client-only React application, the user receives an empty HTML that looks like this:\u003C/p>\n\u003Cpre class=\"astro-code astro-code-themes catppuccin-latte tokyo-night\" style=\"background-color:#eff1f5;--shiki-dark-bg:#1a1b26;color:#4c4f69;--shiki-dark:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"html\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#8839EF;--shiki-dark:#BA3C97\">&#x3C;!\u003C/span>\u003Cspan style=\"color:#8839EF;--shiki-dark:#F7768E\">DOCTYPE\u003C/span>\u003Cspan style=\"color:#DF8E1D;--shiki-dark:#BB9AF7\"> html\u003C/span>\u003Cspan style=\"color:#8839EF;--shiki-dark:#BA3C97\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\">&#x3C;\u003C/span>\u003Cspan style=\"color:#1E66F5;--shiki-dark:#F7768E\">html\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\">  &#x3C;\u003C/span>\u003Cspan style=\"color:#1E66F5;--shiki-dark:#F7768E\">body\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\">    &#x3C;\u003C/span>\u003Cspan style=\"color:#1E66F5;--shiki-dark:#F7768E\">div\u003C/span>\u003Cspan style=\"color:#DF8E1D;--shiki-dark:#BB9AF7\"> id\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\">=\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\">\"\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#9ECE6A\">root\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\">\"\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\">>&#x3C;/\u003C/span>\u003Cspan style=\"color:#1E66F5;--shiki-dark:#F7768E\">div\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\">    &#x3C;\u003C/span>\u003Cspan style=\"color:#1E66F5;--shiki-dark:#F7768E\">script\u003C/span>\u003Cspan style=\"color:#DF8E1D;--shiki-dark:#BB9AF7\"> src\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\">=\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\">\"\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#9ECE6A\">/static/js/bundle.js\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\">\"\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\">>\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#BA3C97\">&#x3C;\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\">/\u003C/span>\u003Cspan style=\"color:#1E66F5;--shiki-dark:#F7768E\">script\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\">  &#x3C;/\u003C/span>\u003Cspan style=\"color:#1E66F5;--shiki-dark:#F7768E\">body\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\">&#x3C;/\u003C/span>\u003Cspan style=\"color:#1E66F5;--shiki-dark:#F7768E\">html\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\">>\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>React, which is included in the JavaScript bundle, uses the \u003Ccode>&#x3C;div id=\"root\">\u003C/code> element to inject all the DOM nodes once it’s loaded on the client. To achieve this, React creates a root for the empty \u003Ccode>&#x3C;div id=\"root\">\u003C/code> element and takes over managing the DOM inside it by calling \u003Ccode>root.render\u003C/code>:\u003C/p>\n\u003Cpre class=\"astro-code astro-code-themes catppuccin-latte tokyo-night\" style=\"background-color:#eff1f5;--shiki-dark-bg:#1a1b26;color:#4c4f69;--shiki-dark:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#8839EF;--shiki-dark:#7DCFFF\">import\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#0DB9D7\"> React\u003C/span>\u003Cspan style=\"color:#8839EF;--shiki-dark:#7DCFFF\"> from\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\"> '\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#9ECE6A\">react\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\">'\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#8839EF;--shiki-dark:#7DCFFF\">import\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\"> {\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#0DB9D7\"> createRoot\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\"> }\u003C/span>\u003Cspan style=\"color:#8839EF;--shiki-dark:#7DCFFF\"> from\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\"> '\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#9ECE6A\">react-dom/client\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\">'\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#8839EF;--shiki-dark:#7DCFFF\">import\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#0DB9D7\"> App\u003C/span>\u003Cspan style=\"color:#8839EF;--shiki-dark:#7DCFFF\"> from\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\"> '\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#9ECE6A\">./App.js\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\">'\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#8839EF;font-style:inherit;--shiki-dark:#9D7CD8;--shiki-dark-font-style:italic\">const\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#BB9AF7\"> root\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\"> =\u003C/span>\u003Cspan style=\"color:#1E66F5;font-style:italic;--shiki-dark:#7AA2F7;--shiki-dark-font-style:inherit\"> createRoot\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">(\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\">document\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\">.\u003C/span>\u003Cspan style=\"color:#1E66F5;font-style:italic;--shiki-dark:#7AA2F7;--shiki-dark-font-style:inherit\">querySelector\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">(\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\">'\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#9ECE6A\">#root\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\">'\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">))\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\">root\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\">.\u003C/span>\u003Cspan style=\"color:#1E66F5;font-style:italic;--shiki-dark:#7AA2F7;--shiki-dark-font-style:inherit\">render\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">(\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\">&#x3C;\u003C/span>\u003Cspan style=\"color:#EA76CB;--shiki-dark:#DE5971\">App\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\"> />\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">)\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">;\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>As you might already know this approach has its drawbacks. When a user visits a page built like this, the initial request retrieves an HTML file that is essentially empty.\u003C/p>\n\u003Cp>The browser then starts downloading additional resources, including the JavaScript bundle. Only after this bundle is downloaded and parsed does React begin creating the DOM nodes, making the page finally usable. For larger applications, this means users may experience a significant delay with a blank page while the JavaScript is loading. This delay negatively impacts user experience, not to mention SEO.\u003C/p>\n\u003Cp>This issue can be mitigated by rendering the initial React content on the server, which is where Server Side Rendering comes into play.\u003C/p>\n\u003Ch2 id=\"what-is-server-side-rendering\">What is Server Side Rendering\u003C/h2>\n\u003Cp>Server Side Rendering (SSR) performs the initial React render on the server to generate HTML, which is then sent to the browser. At a high-level, our \u003Ccode>&#x3C;App />\u003C/code> from the previous example can be rendered on a Node.js server using a React method called \u003Ccode>renderToString\u003C/code> (the HTML has been simplified for brevity):\u003C/p>\n\u003Cpre class=\"astro-code astro-code-themes catppuccin-latte tokyo-night\" style=\"background-color:#eff1f5;--shiki-dark-bg:#1a1b26;color:#4c4f69;--shiki-dark:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#9CA0B0;font-style:italic;--shiki-dark:#51597D;--shiki-dark-font-style:italic\">/* /src/server/index.js */\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#8839EF;--shiki-dark:#7DCFFF\">import\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#0DB9D7\"> renderToString\u003C/span>\u003Cspan style=\"color:#8839EF;--shiki-dark:#7DCFFF\"> from\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\"> '\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#9ECE6A\">react-dom/server\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\">'\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#8839EF;--shiki-dark:#7DCFFF\">import\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#0DB9D7\"> App\u003C/span>\u003Cspan style=\"color:#8839EF;--shiki-dark:#7DCFFF\"> from\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\"> '\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#9ECE6A\">./App.js\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\">'\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#8839EF;--shiki-dark:#7DCFFF\">export\u003C/span>\u003Cspan style=\"color:#8839EF;--shiki-dark:#BB9AF7\"> function\u003C/span>\u003Cspan style=\"color:#1E66F5;font-style:italic;--shiki-dark:#7AA2F7;--shiki-dark-font-style:inherit\"> handleRequest\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\">(\u003C/span>\u003Cspan style=\"color:#E64553;font-style:italic;--shiki-dark:#E0AF68;--shiki-dark-font-style:inherit\">request\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">,\u003C/span>\u003Cspan style=\"color:#E64553;font-style:italic;--shiki-dark:#E0AF68;--shiki-dark-font-style:inherit\"> response\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\">)\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#8839EF;font-style:inherit;--shiki-dark:#9D7CD8;--shiki-dark-font-style:italic\">  const\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#BB9AF7\"> appContent\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\"> =\u003C/span>\u003Cspan style=\"color:#1E66F5;font-style:italic;--shiki-dark:#7AA2F7;--shiki-dark-font-style:inherit\"> renderToString\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">(\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\">&#x3C;\u003C/span>\u003Cspan style=\"color:#EA76CB;--shiki-dark:#DE5971\">App\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\"> />\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">)\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9CA0B0;font-style:italic;--shiki-dark:#51597D;--shiki-dark-font-style:italic\">  // the result of this is: \"&#x3C;button>You pressed me 0 times&#x3C;/button>\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">  \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\">  response\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\">.\u003C/span>\u003Cspan style=\"color:#1E66F5;font-style:italic;--shiki-dark:#7AA2F7;--shiki-dark-font-style:inherit\">send\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">(\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\">`\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#40A02B;--shiki-dark:#9ECE6A\">    &#x3C;html>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#40A02B;--shiki-dark:#9ECE6A\">      &#x3C;body>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#7C7F93;--shiki-dark:#7DCFFF\">        ${\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\">appContent\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#7DCFFF\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#40A02B;--shiki-dark:#9ECE6A\">      &#x3C;/body>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#40A02B;--shiki-dark:#9ECE6A\">    &#x3C;/html>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\">  `\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">)\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Similar to the \u003Ccode>render\u003C/code> method, \u003Ccode>renderToString\u003C/code> recursively renders all components in \u003Ccode>App\u003C/code>, producing HTML as a string. Even though more sophisticated strategies that support features like streaming are currently in use, this gives us an idea of how SSR works.\u003C/p>\n\u003Cp>This approach has the advantage that the user can start viewing the content as soon as the HTML is received, even while the JavaScript is still loading, making the application more responsive.\u003C/p>\n\u003Cp>Once the JavaScript has loaded, React makes the page interactive through a process called “hydration”. During this process, React performs a render to determine the shape of the component tree and set up all of the interactivity, such as event listeners. As opposed to client-side rendering, this render is not used to create all of the DOM nodes, as they already exist from the server, but rather to integrate with the existing DOM.\u003C/p>\n\u003Cp>In order to achieve this, React uses a method called \u003Ccode>hydrateRoot\u003C/code> which is used instead of \u003Ccode>createRoot\u003C/code> in client side rendering:\u003C/p>\n\u003Cpre class=\"astro-code astro-code-themes catppuccin-latte tokyo-night\" style=\"background-color:#eff1f5;--shiki-dark-bg:#1a1b26;color:#4c4f69;--shiki-dark:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"diff\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#4C4F69;--shiki-dark:#A9B1D6\">import React from 'react'\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#4C4F69;--shiki-dark:#A9B1D6\">import App from './App'\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">\u003Cspan style=\"user-select: none;\">-\u003C/span>\u003C/span>\u003Cspan style=\"color:#D20F39;--shiki-dark:#914C54\"> import { createRoot } from 'react-dom/client';\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">\u003Cspan style=\"user-select: none;\">+\u003C/span>\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#449DAB\"> import { hydrateRoot } from 'react-dom/client';\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">\u003Cspan style=\"user-select: none;\">-\u003C/span>\u003C/span>\u003Cspan style=\"color:#D20F39;--shiki-dark:#914C54\"> const root = createRoot(document.querySelector('#root'));\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">\u003Cspan style=\"user-select: none;\">-\u003C/span>\u003C/span>\u003Cspan style=\"color:#D20F39;--shiki-dark:#914C54\"> root.render(&#x3C;App />);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">\u003Cspan style=\"user-select: none;\">+\u003C/span>\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#449DAB\"> hydrateRoot(document.querySelector('#root'), &#x3C;App />);\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Note how, instead of creating DOM nodes and rendering them using the \u003Ccode>createRoot\u003C/code> and \u003Ccode>render\u003C/code> methods as we saw in the client side rendering example, now we just adopt the HTML received from the server using \u003Ccode>hydrateRoot\u003C/code>.\u003C/p>\n\u003Ch2 id=\"server-components\">Server Components\u003C/h2>\n\u003Cp>Server Components introduce a new approach where components are executed only once, exclusively on the server. They are truly static because they do not re-render or hydrate on the client. Once their output is rendered on the client, it remains unchanged and immutable.\u003C/p>\n\u003Cp>This server-only execution offers several performance benefits, including:\u003C/p>\n\u003Cul>\n\u003Cli>\n\u003Cp>\u003Cem>Zero bundle size:\u003C/em> The code of Server Components doesn’t get added to your JavaScript bundle, which means you can safely use large dependencies without the risk of shipping them to the client. For example, if we needed to use a syntax highlighting library, which tend to be quite heavy, we could run it on the server to generate the syntax-highlighted code without shipping the dependency.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>\u003Cem>Secure access to backend services:\u003C/em> Since Server Components run only on the server, they have direct access to data sources such as databases and file systems while safely keeping sensitive data and logic away from the client.\u003C/p>\n\u003C/li>\n\u003C/ul>\n\u003Cp>On the other hand, because Server Components are not sent to the browser, they can’t use any interactive APIs like \u003Ccode>useState\u003C/code>. To differentiate Server Components from other React components, the latter have been renamed to Client Components.\u003C/p>\n\u003Cp>The logic behind Server Components must be tightly integrated with the bundler, server, and router. Currently, \u003Ca href=\"https://react.dev/learn/start-a-new-react-project#bleeding-edge-react-frameworks\">the simplest way to use Server Components is with Next.js 13.4+\u003C/a>, which incorporates them into its newly re-architected App Router.\u003C/p>\n\u003Cp>\u003Cem>NOTE: The term “server” in Server Components doesn’t strictly mean that these components run on a server in real-time; rather, rendering ahead of time. For instance, by default, \u003Ca href=\"https://nextjs.org/docs/app/building-your-application/rendering/server-components#static-rendering-default\">Next.js configures Server Components to render at build time\u003C/a>.\u003C/em>\u003C/p>\n\u003Ch3 id=\"boundaries\">Boundaries\u003C/h3>\n\u003Cp>When building with Next.js, all components are assumed to be Server Components by default. To add interactivity, you need to “opt-in” by adding the \u003Ccode>'use client'\u003C/code> directive at the top of the component file. This directive will convert the all the components in that file into Client Components.\u003C/p>\n\u003Cp>However, Client Components can only import other Client Components. This means that when we import a Client Component into a Server Component, we create a boundary, and all components down the tree from that point will be treated as Client Components. Because of this, we don’t have to add \u003Ccode>'use client'\u003C/code> to every single file that needs to run on the client. In practice, we only need to add it when we’re creating new client boundaries.\u003C/p>\n\u003Cp>Let’s imagine we are creating a new page in Next.js:\u003C/p>\n\u003Cpre class=\"astro-code astro-code-themes catppuccin-latte tokyo-night\" style=\"background-color:#eff1f5;--shiki-dark-bg:#1a1b26;color:#4c4f69;--shiki-dark:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#9CA0B0;font-style:italic;--shiki-dark:#51597D;--shiki-dark-font-style:italic\">/* app/page.js */\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#8839EF;--shiki-dark:#7DCFFF\">export\u003C/span>\u003Cspan style=\"color:#8839EF;--shiki-dark:#7DCFFF\"> default\u003C/span>\u003Cspan style=\"color:#8839EF;--shiki-dark:#BB9AF7\"> function\u003C/span>\u003Cspan style=\"color:#1E66F5;font-style:italic;--shiki-dark:#7AA2F7;--shiki-dark-font-style:inherit\"> Page\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\">()\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#8839EF;font-style:inherit;--shiki-dark:#9D7CD8;--shiki-dark-font-style:italic\">  const\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\"> [\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#BB9AF7\">count\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">,\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#BB9AF7\"> setCount\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">]\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\"> =\u003C/span>\u003Cspan style=\"color:#1E66F5;font-style:italic;--shiki-dark:#7AA2F7;--shiki-dark-font-style:inherit\"> useState\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">(\u003C/span>\u003Cspan style=\"color:#FE640B;--shiki-dark:#FF9E64\">0\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">)\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#8839EF;font-style:inherit;--shiki-dark:#BB9AF7;--shiki-dark-font-style:italic\">  return\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\"> (\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\">    &#x3C;\u003C/span>\u003Cspan style=\"color:#1E66F5;--shiki-dark:#F7768E\">button\u003C/span>\u003Cspan style=\"color:#DF8E1D;--shiki-dark:#BB9AF7\"> onClick\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\">=\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#7DCFFF\">{\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\">()\u003C/span>\u003Cspan style=\"color:#8839EF;--shiki-dark:#BB9AF7\"> =>\u003C/span>\u003Cspan style=\"color:#1E66F5;font-style:italic;--shiki-dark:#7AA2F7;--shiki-dark-font-style:inherit\"> setCount\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">(\u003C/span>\u003Cspan style=\"color:#E64553;--shiki-dark:#C0CAF5\">count\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\"> +\u003C/span>\u003Cspan style=\"color:#FE640B;--shiki-dark:#FF9E64\"> 1\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">)\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#7DCFFF\">}\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9AA5CE\">      You pressed me \u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#7DCFFF\">{\u003C/span>\u003Cspan style=\"color:#E64553;--shiki-dark:#C0CAF5\">count\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#7DCFFF\">}\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9AA5CE\"> times\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\">    &#x3C;/\u003C/span>\u003Cspan style=\"color:#1E66F5;--shiki-dark:#F7768E\">button\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">  )\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>As soon as we tried to compile this, an error will be thrown indicating that we are using state in a Server Component.\u003C/p>\n\u003Cp>One option is to use the \u003Ccode>'use client'\u003C/code> directive at the top of the page, but let’s take advantage of Server Components by refactoring our code.\u003C/p>\n\u003Cp>We can start by moving the counter to its own Client Component like so:\u003C/p>\n\u003Cpre class=\"astro-code astro-code-themes catppuccin-latte tokyo-night\" style=\"background-color:#eff1f5;--shiki-dark-bg:#1a1b26;color:#4c4f69;--shiki-dark:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#9CA0B0;font-style:italic;--shiki-dark:#51597D;--shiki-dark-font-style:italic\">// Counter.js\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\">'\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#9ECE6A\">use client\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\">'\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#8839EF;--shiki-dark:#7DCFFF\">import\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\"> {\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#0DB9D7\"> useState\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\"> }\u003C/span>\u003Cspan style=\"color:#8839EF;--shiki-dark:#7DCFFF\"> from\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\"> '\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#9ECE6A\">react\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\">'\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#8839EF;--shiki-dark:#7DCFFF\">export\u003C/span>\u003Cspan style=\"color:#8839EF;--shiki-dark:#7DCFFF\"> default\u003C/span>\u003Cspan style=\"color:#8839EF;--shiki-dark:#BB9AF7\"> function\u003C/span>\u003Cspan style=\"color:#1E66F5;font-style:italic;--shiki-dark:#7AA2F7;--shiki-dark-font-style:inherit\"> Counter\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\">()\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#8839EF;font-style:inherit;--shiki-dark:#9D7CD8;--shiki-dark-font-style:italic\">  const\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\"> [\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#BB9AF7\">count\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">,\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#BB9AF7\"> setCount\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">]\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\"> =\u003C/span>\u003Cspan style=\"color:#1E66F5;font-style:italic;--shiki-dark:#7AA2F7;--shiki-dark-font-style:inherit\"> useState\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">(\u003C/span>\u003Cspan style=\"color:#FE640B;--shiki-dark:#FF9E64\">0\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">)\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#8839EF;font-style:inherit;--shiki-dark:#BB9AF7;--shiki-dark-font-style:italic\">  return\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\"> (\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\">    &#x3C;\u003C/span>\u003Cspan style=\"color:#1E66F5;--shiki-dark:#F7768E\">button\u003C/span>\u003Cspan style=\"color:#DF8E1D;--shiki-dark:#BB9AF7\"> onClick\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\">=\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#7DCFFF\">{\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\">()\u003C/span>\u003Cspan style=\"color:#8839EF;--shiki-dark:#BB9AF7\"> =>\u003C/span>\u003Cspan style=\"color:#1E66F5;font-style:italic;--shiki-dark:#7AA2F7;--shiki-dark-font-style:inherit\"> setCount\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">(\u003C/span>\u003Cspan style=\"color:#E64553;--shiki-dark:#C0CAF5\">count\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\"> +\u003C/span>\u003Cspan style=\"color:#FE640B;--shiki-dark:#FF9E64\"> 1\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">)\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#7DCFFF\">}\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9AA5CE\">      You pressed me \u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#7DCFFF\">{\u003C/span>\u003Cspan style=\"color:#E64553;--shiki-dark:#C0CAF5\">count\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#7DCFFF\">}\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9AA5CE\"> times\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\">    &#x3C;/\u003C/span>\u003Cspan style=\"color:#1E66F5;--shiki-dark:#F7768E\">button\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">  )\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Then we could add some elements in our Server Component page and include our counter:\u003C/p>\n\u003Cpre class=\"astro-code astro-code-themes catppuccin-latte tokyo-night\" style=\"background-color:#eff1f5;--shiki-dark-bg:#1a1b26;color:#4c4f69;--shiki-dark:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#9CA0B0;font-style:italic;--shiki-dark:#51597D;--shiki-dark-font-style:italic\">// page.js\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#8839EF;--shiki-dark:#7DCFFF\">import\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#0DB9D7\"> Counter\u003C/span>\u003Cspan style=\"color:#8839EF;--shiki-dark:#7DCFFF\"> from\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\"> '\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#9ECE6A\">./Counter\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\">'\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#8839EF;--shiki-dark:#7DCFFF\">export\u003C/span>\u003Cspan style=\"color:#8839EF;--shiki-dark:#7DCFFF\"> default\u003C/span>\u003Cspan style=\"color:#8839EF;--shiki-dark:#BB9AF7\"> function\u003C/span>\u003Cspan style=\"color:#1E66F5;font-style:italic;--shiki-dark:#7AA2F7;--shiki-dark-font-style:inherit\"> App\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\">()\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#8839EF;font-style:inherit;--shiki-dark:#BB9AF7;--shiki-dark-font-style:italic\">  return\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\"> (\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\">    &#x3C;\u003C/span>\u003Cspan style=\"color:#1E66F5;--shiki-dark:#F7768E\">div\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\">      &#x3C;\u003C/span>\u003Cspan style=\"color:#1E66F5;--shiki-dark:#F7768E\">h1\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\">>\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9AA5CE\">My counter\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\">&#x3C;/\u003C/span>\u003Cspan style=\"color:#1E66F5;--shiki-dark:#F7768E\">h1\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\">      &#x3C;\u003C/span>\u003Cspan style=\"color:#EA76CB;--shiki-dark:#DE5971\">Counter\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\"> />\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\">    &#x3C;/\u003C/span>\u003Cspan style=\"color:#1E66F5;--shiki-dark:#F7768E\">div\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">  )\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Now we won’t get any compilation errors, our Server and Client components are properly separated by the boundary in the counter.\u003C/p>\n\u003Ch3 id=\"server-components-vs-ssr\">Server Components vs SSR\u003C/h3>\n\u003Cp>Even though the concepts of SSR and Server Components might seem similar at first glance since both involve running React components on the server, they differ fundamentally as we have juse seen.\u003C/p>\n\u003Cp>While SSR pre-renders the client application on the server to generate HTML, Server Components are rendered on the server, with their output passed to the client as serialized objects. These serialized objects, known as the \u003Cem>Server Component Payload\u003C/em>, represent a React component tree, not static HTML.\u003C/p>\n\u003Cp>If we were to inspect the HTML of the previous page when received by the client (also truncated for simplicity), we would see something like this:\u003C/p>\n\u003Cpre class=\"astro-code astro-code-themes catppuccin-latte tokyo-night\" style=\"background-color:#eff1f5;--shiki-dark-bg:#1a1b26;color:#4c4f69;--shiki-dark:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"html\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#8839EF;--shiki-dark:#BA3C97\">&#x3C;!\u003C/span>\u003Cspan style=\"color:#8839EF;--shiki-dark:#F7768E\">DOCTYPE\u003C/span>\u003Cspan style=\"color:#DF8E1D;--shiki-dark:#BB9AF7\"> html\u003C/span>\u003Cspan style=\"color:#8839EF;--shiki-dark:#BA3C97\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\">&#x3C;\u003C/span>\u003Cspan style=\"color:#1E66F5;--shiki-dark:#F7768E\">html\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\">  &#x3C;\u003C/span>\u003Cspan style=\"color:#1E66F5;--shiki-dark:#F7768E\">body\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\">    &#x3C;\u003C/span>\u003Cspan style=\"color:#1E66F5;--shiki-dark:#F7768E\">p\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\">>\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9AA5CE\">Hello World!\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\">&#x3C;/\u003C/span>\u003Cspan style=\"color:#1E66F5;--shiki-dark:#F7768E\">p\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\">    &#x3C;\u003C/span>\u003Cspan style=\"color:#1E66F5;--shiki-dark:#F7768E\">script\u003C/span>\u003Cspan style=\"color:#DF8E1D;--shiki-dark:#BB9AF7\"> src\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\">=\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\">\"\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#9ECE6A\">/static/js/bundle.js\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\">\"\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\">>\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#BA3C97\">&#x3C;\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\">/\u003C/span>\u003Cspan style=\"color:#1E66F5;--shiki-dark:#F7768E\">script\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\">    &#x3C;\u003C/span>\u003Cspan style=\"color:#1E66F5;--shiki-dark:#F7768E\">script\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#4C4F69;--shiki-dark:#C0CAF5\">      self\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\">.\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#7DCFFF\">__next_f\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\">.\u003C/span>\u003Cspan style=\"color:#1E66F5;font-style:italic;--shiki-dark:#7AA2F7;--shiki-dark-font-style:inherit\">push\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">([\u003C/span>\u003Cspan style=\"color:#FE640B;--shiki-dark:#FF9E64\">1\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\">        \"\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#9ECE6A\">4:I[(app-pages-browser)/./src/app/counter.js\u003C/span>\u003Cspan style=\"color:#EA76CB;--shiki-dark:#89DDFF\">\\\"\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#FF5370\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">        [\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\">          '\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#9ECE6A\">$\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\">'\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\">          '\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#9ECE6A\">div\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\">'\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#8839EF;--shiki-dark:#FF9E64\">          null\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\">          {\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#73DACA\"> children\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\">:\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\"> [\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">              [\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\">'\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#9ECE6A\">$\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\">'\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">,\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\"> '\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#9ECE6A\">h1\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\">'\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">,\u003C/span>\u003Cspan style=\"color:#8839EF;--shiki-dark:#FF9E64\"> null\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">,\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\"> {\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#73DACA\"> children\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#89DDFF\">:\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\"> '\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#9ECE6A\">My counter\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\">'\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\"> }\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">]\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">              [\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\">'\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#9ECE6A\">$\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\">'\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">,\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\"> '\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#9ECE6A\">$L4\u003C/span>\u003Cspan style=\"color:#40A02B;--shiki-dark:#89DDFF\">'\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">,\u003C/span>\u003Cspan style=\"color:#8839EF;--shiki-dark:#FF9E64\"> null\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">,\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\"> {}\u003C/span>\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">]\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">            ]\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#7C7F93;--shiki-dark:#9ABDF5\">          }\u003C/span>\u003Cspan style=\"color:#7C7F93;--shiki-dark:#89DDFF\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">        ]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#4C4F69;--shiki-dark:#9ABDF5\">      ])\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#4C4F69;--shiki-dark:#BA3C97\">    &#x3C;\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\">/\u003C/span>\u003Cspan style=\"color:#1E66F5;--shiki-dark:#F7768E\">script\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\">  &#x3C;/\u003C/span>\u003Cspan style=\"color:#1E66F5;--shiki-dark:#F7768E\">body\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\">&#x3C;/\u003C/span>\u003Cspan style=\"color:#1E66F5;--shiki-dark:#F7768E\">html\u003C/span>\u003Cspan style=\"color:#179299;--shiki-dark:#BA3C97\">>\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>As we can see, next to our server-side rendered HTML, there are two \u003Cscript> tags.\u003C/script>\n\u003C/p>\u003Cp>The first tag loads the JavaScript bundle, which includes React and the Client Components.\u003C/p>\n\u003Cp>The second tag contains what Server Components rendered—an array of payloads representing the object tree. Even though the actual format of this object differs a bit—it has been simplified here for clarity—we can distinguish a few key elements.\u003C/p>\n\u003Cp>In the payload array, the element starting with the number \u003Ccode>4\u003C/code> and the letter \u003Ccode>I\u003C/code>, followed by a file path is our Client Component-the counter. Payloads that start with \u003Ccode>I\u003C/code> are modules, which is how Client Components are loaded. The number \u003Ccode>4\u003C/code> is simply an identifier. Also, notice that I included the file path as it would appear in development. In a production build, we would see something like \u003Ccode>static/chunks/app/page-2bf114d4cb295821.js\u003C/code> instead.\u003C/p>\n\u003Cp>Following that, we see our React component tree. The \u003Ccode>\"$\"\u003C/code> symbol indicates a DOM definition. First we have the \u003Ccode>div\u003C/code> element which children are the \u003Ccode>h1\u003C/code> heading and a \u003Ccode>$L4\u003C/code> element. The latter instructs React to load the module identified by \u003Ccode>4\u003C/code> (our counter) in that position within the component tree.\u003C/p>\n\u003Cp>We can see some similarities between this object tree and what we previously saw rendered by \u003Ccode>React.createElement\u003C/code>. In fact, during hydration, React uses this pre-rendered component tree just as it would if it had been rendered on the client, even though the initial rendering occurred entirely on the server.\u003C/p>\n\u003Cp>If we were to look for the heading \u003Ccode>Hello World!\u003C/code> in our bundle, it wouldn’t appear. This is one of the strengths of Server Components. This was just a very simple example, but it could be scaled up to more complex processes like querying data from a database, reading from the file system, doing code highlighting, etc., and none of it would be included in the bundle—just a payload with the rendered component tree.\u003C/p>\n\u003Ch2 id=\"conclusion\">Conclusion\u003C/h2>\n\u003Cp>While SSR pre-renders client applications on the server, Server Components takes it a step further by providing the performance benefits of running code exclusively on the server.\u003C/p>\n\u003Cp>Server Components become even more powerful when combined with Suspense and streaming SSR architecture, which allows rendering work to be split into chunks and streamed to the client as they become ready.\u003C/p>\n\u003Cp>All of this represents a paradigm shift in the React ecosystem and will significantly change the way we build applications in the future.\u003C/p>\n\u003Ch2 id=\"references\">References\u003C/h2>\n\u003Cp>If you want to learn more about React Server Components, I highly recommend these invaluable references, which I used myself while writing this article:\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ca href=\"https://www.joshwcomeau.com/react/server-components/#introduction-to-react-server-components-3\">Making Sense of React Server Components\u003C/a>: An exceptional and clear article by Josh Comeau, featuring numerous helpful diagrams that make the concepts easy to understand.\u003C/li>\n\u003Cli>\u003Ca href=\"https://github.com/reactwg/server-components/discussions/5\">RSC from scratch\u003C/a>: A detailed technical deep dive by Dan Abramov (former React core team member), which walks you through the process of “inventing” RSC from scratch to provide a comprehensive mental model.\u003C/li>\n\u003Cli>\u003Ca href=\"https://www.smashingmagazine.com/2024/05/forensics-react-server-components/\">The forensics of React Server Components\u003C/a>: A comprehensive explanation by Lazar Nikolov, who examines in detail the rendering lifecycle of RSC.\u003C/li>\n\u003Cli>\u003Ca href=\"https://github.com/reactwg/server-components/discussions/5\">Data Fetching with React Server Components\u003C/a>: An excellent demo on how to handle data fetching in RSC, by Dan Abramov and Lauren Tan.\u003C/li>\n\u003Cli>\u003Ca href=\"https://nextjs.org/docs/app/building-your-application/rendering/server-components\">Next.js Docs\u003C/a>: Next.js documentation on RSC, featuring a helpful explanation of how RSC are rendered and the various strategies involved.\u003C/li>\n\u003C/ul>",{"headings":272,"localImagePaths":297,"remoteImagePaths":298,"frontmatter":299,"imagePaths":304},[273,276,279,282,285,288,291,294],{"depth":109,"slug":274,"text":275},"how-react-renders","How React renders",{"depth":109,"slug":277,"text":278},"rendering-on-the-client","Rendering on the client",{"depth":109,"slug":280,"text":281},"what-is-server-side-rendering","What is Server Side Rendering",{"depth":109,"slug":283,"text":284},"server-components","Server Components",{"depth":153,"slug":286,"text":287},"boundaries","Boundaries",{"depth":153,"slug":289,"text":290},"server-components-vs-ssr","Server Components vs SSR",{"depth":109,"slug":292,"text":293},"conclusion","Conclusion",{"depth":109,"slug":295,"text":296},"references","References",[],[],{"title":258,"pubDate":300,"description":260,"image":301,"tags":302,"draft":24,"minutesRead":303},["Date","2024-08-29T00:00:00.000Z"],{"url":264,"alt":265},[64,262],10.63,[],"projects",["Map",307,308],"first-project",{"id":307,"data":309,"filePath":316,"digest":317,"rendered":318},{"title":310,"description":311,"tags":312,"url":314,"githubUrl":315},"My first project","This is my first project in Astro",[313],"astro","my-url","my-git","src/content/projects/first-project.md","9b65c9f4847bcf61",{"html":68,"metadata":319},{"headings":320,"localImagePaths":321,"remoteImagePaths":322,"frontmatter":323,"imagePaths":326},[],[],[],{"title":310,"description":311,"tags":324,"url":314,"githubUrl":315,"minutesRead":325},[313],0,[]]